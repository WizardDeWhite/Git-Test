1. What is RBAC

Role based access control

This should be enabled when api-server starts.

2. Related Objects

  * Role
  * ClusterRole
  * RoleBinding

2.1 Role and ClusterRole

They both define rules that represent a set of permissions.

Role is Namespace scoped, while ClusterRole is cluster scoped.

2.1.1 Role Example

```
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" 标明 core API 组
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
```

This defines a Role, pod-reader, who has permissions of get/watch/list for
pods just in default namespace.

2.1.1 ClusterRole Example

```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" 被忽略，因为 ClusterRoles 不受名字空间限制
  name: secret-reader
rules:
- apiGroups: [""]
  # 在 HTTP 层面，用来访问 Secret 对象的资源的名称为 "secrets"
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
```

2.2 RoleBinding and ClusterRoleBinding

Assign authority defined in Role / ClusterRole to one group subject(users,
groups or serviceaccount).

2.2.1 RoleBinding Example

Assign "pod-reader" Role to user "jane" in default namespace.

```
apiVersion: rbac.authorization.k8s.io/v1
# 此角色绑定允许 "jane" 读取 "default" 名字空间中的 Pods
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
# 你可以指定不止一个“subject（主体）”
- kind: User
  name: jane # "name" 是不区分大小写的
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" 指定与某 Role 或 ClusterRole 的绑定关系
  kind: Role # 此字段必须是 Role 或 ClusterRole
  name: pod-reader     # 此字段必须与你要绑定的 Role 或 ClusterRole 的名称匹配
  apiGroup: rbac.authorization.k8s.io
```

Bind to ServiceAccount

```
subjects:
- kind: ServiceAccount
  name: default
  namespace: kube-system
```

2.2.2 ClusterRoleBinding Example

```
apiVersion: rbac.authorization.k8s.io/v1
# 此集群角色绑定允许 “manager” 组中的任何人访问任何名字空间中的 secrets
kind: ClusterRoleBinding
metadata:
  name: read-secrets-global
subjects:
- kind: Group
  name: manager # 'name' 是不区分大小写的
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
```

2.3 Service Account

2.3.1 New SA

```
apiVersion: v1
kind: ServiceAccount
metadata:
  name: build-robot
```

$ kubectl apply -f sa.yaml

After this, you would a secret token by 
"kubectl get serviceaccounts/build-robot -o yaml"

This token is automatically generated and is referenced by this sa.

2.3.2 Apply SA to Pod

Take nginx Pod as an example: 

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-app
  labels:
    run: nginx-app
spec:
  serviceAccountName: build-robot
  containers:
  - name: nginx
    env:
    - name: CLUSTER_NM
      value: "test"
    image: nginx:latest
    ports:
    - containerPort: 80
```

2.3.3 Apply SA to Deployment

Take nginx Deployment as an example: 

```
apiVersion: apps/v1
kind: Deployment
metadata:
    name: nginx-deployment
    labels:
        app: nginx
spec:
    replicas: 3
    selector:
        matchLabels:
            app: nginx
    template:
        metadata:
            labels:
                app: nginx
        spec:
            serviceAccountName: build-robot
            containers:
            - name: nginx
              env:
              - name: CLUSTER_NM
                value: "test"
              image: nginx:latest
              ports:
              - containerPort: 80
```

2.3.4 ServiceAccount Permission

https://kubernetes.io/docs/reference/access-authn-authz/rbac/#service-account-permissions


0. Reference

https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/
https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/
