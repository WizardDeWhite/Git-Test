1. Start Pod and run container

Reference
https://kubernetes.io/zh/docs/reference/kubectl/cheatsheet/
https://kubernetes.io/zh/docs/reference/kubectl/overview/#%E7%A4%BA%E4%BE%8B-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C
https://kubernetes.io/zh/docs/reference/kubectl/cheatsheet/

1.1 Pod Config file

With the following config file: pod.yaml

```
apiVersion: v1
kind: Pod
metadata:
  name: vcont-yw-host1
  labels:
    run: vcont-yw
spec:
  runtimeClassName: kata
  containers:
  - name: vcont-yw
    image: k8s.net/sandbox/kernel/vcontainer-perf:fio-seq-f0badf27
    securityContext:
      privileged: true
    volumeMounts:
    - name: vcont-store
      mountPath: /vcont
  volumes:
  - name: vcont-store
    hostPath:
      path: /vcont
      type: Directory
```

Or a nginx app

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-app
  labels:
    run: nginx-app
spec:
  containers:
  - name: nginx
    env:
    - name: CLUSTER_NM
      value: "test"
    image: nginx:latest
    ports:
    - containerPort: 80
```

1.2 Start Pod

$ kubectl apply -f pod.yaml

Then you could list pods with:

$ kubectl get pods

If you want to delete the pod, you could

$ kubectl delete -f pod.yaml
$ kubectl delete pod <pod-name>

1.3 Execute command in container

Single container case

$ kubectl exec <pod-name> -- ls

Multi-container case

$ kubectl exec <pod-name> -c container -- ls

1.4 Get events from pod

$ kubectl get events

1.5 Expose pod information via env

https://kubernetes.io/zh/docs/tasks/inject-data-application/environment-variable-expose-pod-information/

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-app
  labels:
    run: nginx-app
spec:
  containers:
  - name: nginx
    env:
    - name: MY_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    image: nginx:latest
    ports:
    - containerPort: 80
```

1.6 Define Pod hostname/subdomain for DNS record

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-app
  labels:
    run: nginx-app
spec:
  containers:
  hostname: my-nginx-app
  subdomain: yw-test
  - name: nginx
    env:
    - name: MY_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    image: nginx:latest
    ports:
    - containerPort: 80
```

The dns record should be:

  my-nginx-app.yw-test.default.svc.cluster.local

But, I didn't manage to test this successfully. Someone says it needs to
define a headless service. Leave this to later test.

1.7 Set hostname to FQDN

May need support from api-server.

https://kubernetes.io/zh/docs/concepts/services-networking/dns-pod-service/#pod-sethostnameasfqdn-field

Seems should use v1.19+.

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-app
  labels:
    run: nginx-app
spec:
  containers:
  hostname: my-nginx-app
  subdomain: yw-test
  setHostnameAsFQDN: true
  - name: nginx
    env:
    - name: MY_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    image: nginx:latest
    ports:
    - containerPort: 80
```


1.8 Assign Pod to node

https://kubernetes.io/zh/docs/concepts/scheduling-eviction/assign-pod-node/

1.8.1 Add label to node

$ kubectl label nodes nodeName labelName=labelValue

1.8.2 Add nodeSelector to Pod yaml

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-app
  labels:
    run: nginx-app
spec:
  nodeSelector:
    labelName: labelValue
  containers:
  - name: nginx
    env:
    - name: MY_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    image: nginx:latest
    ports:
    - containerPort: 80
```

1.9 Use ConfigMap in Pod

https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-pod-configmap/

We can pass configmap to pod via environment.

The configmap used in the following example is created in configmap.txt.

1.9.1 Pass the whole configmap as env

Let's define the configmap as below:

```
apiVersion: v1
kind: ConfigMap
metadata:
  name: special-config
  namespace: default
data:
  SPECIAL_LEVEL: very
  SPECIAL_TYPE: charm
```

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-app
  labels:
    run: nginx-app
spec:
  containers:
  - name: nginx
    env:
    - name: CLUSTER_NM
      value: "test"
    image: nginx:latest
    ports:
    - containerPort: 80
    envFrom:
    - configMapRef:
        name: special-config
```

The env in pod looks like:

```
# kubectl exec nginx-app -- env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=nginx-app
CLUSTER_NM=test
SPECIAL_LEVEL=very
SPECIAL_TYPE=charm
```

1.9.2 Set one env from configmap

```
apiVersion: v1
kind: Pod
metadata:
  name: nginx-app
  labels:
    run: nginx-app
spec:
  containers:
  - name: nginx
    env:
    - name: CLUSTER_NM
      value: "test"
    - name: LIVES
      valueFrom:
        configMapKeyRef:
          name: game-config
          key: game.property
    image: nginx:latest
    ports:
    - containerPort: 80
```

The env in pod looks like:

```
# minikube kubectl -- exec nginx-app -- env 
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=nginx-app
CLUSTER_NM=test
LIVES=enemies=aliens
lives=3
enemies.cheat=true
enemies.cheat.level=noGoodRotten
secret.code.passphrase=UUDDLRLRBABAS
secret.code.allowed=true
secret.code.lives=30

```

2. Label and Selector

https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/labels/

2.1 Add/Del label to Pod

$ kubectl label pod POD_NAME KEY1=VALUE1

$ kubectl label pod POD_NAME KEY1-

2.2 Filter pod based on label

$ kubectl get pods -l k8s-app=kata

Or

$ kubectl get pods -l 'k8s-app in (kata, qa)'

