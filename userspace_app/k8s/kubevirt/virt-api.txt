1. arch
================================================================================
virt-api --port 8443 --console-server-port 8168 --subresource-only -v verbosity

app = virt_api.NewVirtApi()
service.Setup(app)
app.Execute() -> virtAPIApp::Execute()
    app.ConfigureOpenAPIService()
        webservice at /swagger
    app.Run()
        app.readRequestHeader()
        app.prepareCertManager()
        app.registerMutatingWebhook()

        # retrieve Informers
        webhookInformers := webhooks.GetInformers()
        kubeInformerFactory := controller.NewKubeInformerFactory(
		app.virtCli.RestClient(),
		app.virtCli,
		app.aggregatorClient,
		app.namespace)
        configMapInformer := kubeInformerFactory.ConfigMap()
        crdInformer := kubeInformerFactory.CRD()
        authConfigMapInformer := kubeInformerFactory.ApiAuthConfigMap()
        kubevirtCAConfigInformer := kubeInformerFactory.KubeVirtCAConfigMap()
        kubeVirtInformer := kubeInformerFactory.KubeVirt()

        # run Informers
        go webhookInformers.VMIInformer.Run(stopChan)
        go webhookInformers.VMIPresetInformer.Run(stopChan)
        go webhookInformers.NamespaceLimitsInformer.Run(stopChan)
        go webhookInformers.VMRestoreInformer.Run(stopChan)
        go kubeVirtInformer.Run(stopChan)
        go configMapInformer.Run(stopChan)
        go crdInformer.Run(stopChan)
        go authConfigMapInformer.Run(stopChan)
        go kubevirtCAConfigInformer.Run(stopChan)

        cache.WaitForCacheSync()

        app.startTLS(kubeInformerFactory, stopChan)
            app.setupTLS()
            app.Compose()
                app.composeSubresources()
                    subws = new(restful.WebService)
                    subws.Path("/apis/%s/%s")

                    subresourceApp := rest.NewSubresourceAPIApp(app.virtCli, app.consoleServerPort, app.handlerTLSConfiguration, app.clusterConfig)
                        SubresourceAPIApp{
                            statusUpdater: status.NewVMStatusUpdater(virtCli)
                        }

                    "restart" -> subresourceApp.RestartVMRequestHandler
                    "start" -> subresourceApp.StartVMRequestHandler
                    "stop" -> subresourceApp.StopVMRequestHandler
                restful.Filter(filter.RequestLoggingFilter())
            server.ListenAndServeTLS()

2. SubresourceAPIApp::RestartVMRequestHandler, by change VM State
================================================================================
vm = app.fetchVirtualMachine(name, namespace)
    vm, err := app.virtCli.VirtualMachine(namespace).Get(name, &k8smetav1.GetOptions{})
vmi = app.virtCli.VirtualMachineInstance(namespace).Get(name, &k8smetav1.GetOptions{})
bodyString = getChangeRequestJson(vm,
	v1.VirtualMachineStateChangeRequest{Action: v1.StopRequest, UID: &vmi.UID},
	v1.VirtualMachineStateChangeRequest{Action: v1.StartRequest})
    test = "{ "op": "test", "path": "/status/stateChangeRequests", "value": %s}"
    update = "{ "op": "add", "path": "/status/stateChangeRequests", "value": %s}"
    return "[%s, %s]", test, update
app.statusUpdater.PatchStatus(vm, types.JSONPatchType, []byte(bodyString))
    VMStatusUpdater::PatchStatus(vm, types.JSONPatchType, bytes)
        updater::patchWithSubresource(obj, pt, data)
            updater::patchStatusUnstructured(obj, patchType, data)
                updater.cli.VirtualMachine(a.GetNamespace()).PatchStatus(a.GetName(), patchType, data)


3. List of webservice 
================================================================================

"restart"    subresourceApp.RestartVMRequestHandler
"migrate"    subresourceApp.MigrateVMRequestHandler
"start"      subresourceApp.StartVMRequestHandler
"stop"       subresourceApp.StopVMRequestHandler
"pause"      subresourceApp.PauseVMRequestHandler
"unpause"    subresourceApp.UnpauseVMRequestHandler
"console"    subresourceApp.ConsoleRequestHandler
"vnc"        subresourceApp.VNCRequestHandler
"guestinfo"  subresourceApp.GuestOSInfo
"rename"     subresourceApp.RenameVMRequestHandler
"userlist"   subresourceApp.UserList
"filesystemlist"     subresourceApp.FilesystemList

"healthz"    healthz.KubeConnectionHealthzFuncFactory(app.clusterConfig)
