1. Arch
================================================================================
/usr/bin/virt-launcher --qemu-timeout 5m \
    --name xx --namespace xx \
    --kubevirt-share-dir "/var/run/kubevirt" \
    --ephemeral-disk-dir "/var/run/kubevirt-ephemeral-disks" \
    --container-disk-dir "/var/run/kubevirt/container-disks"

main()
    vm = v1.NewVMIReferenceFromNameWithNS(namespace, name)
    initializeDirs(virtShareDir, ephemeralDiskDir, containerDiskDir, hotplugDiskDir, uid)
    util.SetupLibvirt()
        qemuConf = os.OpenFile("/etc/libvirt/qemu.conf"), adjust cgroup and hugepage
        libvirtConf = os.OpenFile("/etc/libvirt/libvirtd.conf"), log to stderr
    util.StartLibvirt()
        cmd := exec.Command("/usr/sbin/libvirtd")
        cmd.Start()
    domainName := vmi.Namespace + vmi.Name
    util.StartVirtlog()
        cmd := exec.Command("/usr/sbin/virtlogd", "-f /etc/libvirt/virtlogd.conf")
        cmd.Start()
        logfile = "/var/log/libvirt/qemu/%s.log", domainName
    domainConn = createLibvirtConnection()
        libvirtUri := "qemu:///system"
        domainConn, err := virtcli.NewConnection(libvirtUri, "", "", 10*time.Second)
            virConn, err = newConnection(uri, user, pass)
                virConn, err := libvirt.NewConnectWithAuth(uri, auth, 0)
            lvConn = &LibvirtConnection{virtConn, user, pass, uri: "qemu:///system", }
            return lvConn
        return domainConn
    notifier = notifyclient.NewNotifier(*virtShareDir), "/var/run/kubevirt"
        return &Notifier{
             pipeSocketPath:   filepath.Join(virtShareDir, "domain-notify-pipe.sock"),
             legacySocketPath: filepath.Join(virtShareDir, "domain-notify.sock"),
        }, for notify what to who?
    domainManager = virtwrap.NewLibvirtDomainManager(domainConn, virtShareDir)
    options = cmdserver.NewServerOptions(*useEmulation)
    cmdclient.SetLegacyBaseDir(*virtShareDir)
    # client can use this to tell virt-launcher to start/stop vm
    cmdServerDone = startCmdServer(cmdclient.UninitializedSocketOnGuest(),
                    "/var/run/kubevirt/socks/launcher-init-sock"
		    domainManager, stopChan, options)
        done = cmdserver.RunServer(socketPath), setup grpc server
        client = cmdclient.NewClient(socketPath), setup grpc client
        client.Ping()
        # VirtLauncherClient <-> Launcher
        return done
    startDomainEventMonitoring(notifier, *virtShareDir, domainConn, events, )
        notifier.StartDomainNotifier(domainConn, )
            agentPoller = agentpoller.CreatePoller()
                p = AgentPoller {}
                p.workers = append(p.workers, PollerWorker{})
            domainConn.DomainEventLifecycleRegister()
                l.Connect.DomainEventLifecycleRegister()
            domainConn.DomainEventDeviceAddedRegister()
            domainConn.DomainEventDeviceRemovedRegister()
            domainConn.AgentEventLifecycleRegister()
    markReady()
        rename "/var/run/kubevirt/socks/launcher-init-sock"
    domain = waitForDomainUUID(qemuTimeout, events, signalStopChan, domainManager)
    mon = virtlauncher.NewProcessMonitor()
        monitor{domain.Spec.UUID, finalShutdownCallback, gracefulShutdownCallback}
    mon.RunForever()
        mon.monitorLoop(startTimeout, signalStopChan)

2. eventCallback(domainConn, libvirtEvent, notifier), triggered by cb registered in StartDomainNotifier()
================================================================================
d, err := domainConn.LookupDomainByName(util.DomainFromNamespaceName(domain.ObjectMeta.Namespace, domain.ObjectMeta.Name))
status, reason, err := d.GetState()
domain.SetState(util.ConvState(status), util.ConvReason(status, reason))
spec, err := util.GetDomainSpecWithRuntimeInfo(status, d)
domain.Spec = spec

if libvirtEvent.Event.Event == libvirt.DOMAIN_EVENT_DEFINED
   && libvirt.DomainEventDefinedDetailType(libvirtEvent.Event.Detail) == libvirt.DOMAIN_EVENT_DEFINED_ADDED
    event = watch.Event{Type: watch.Added, Object: domain}
    notifier.SendDomainEvent(event)
if libvirtEvent.Event.Event == libvirt.DOMAIN_EVENT_STARTED
   && libvirt.DomainEventStartedDetailType(libvirtEvent.Event.Detail) == libvirt.DOMAIN_EVENT_STARTED_MIGRATED
    event := watch.Event{Type: watch.Added, Object: domain}
    notifier.SendDomainEvent(event)

notifier.SendDomainEvent(watch.Event{})
    notifier.connect()
        socketPath := n.detectSocketPath()
        conn, err := grpcutil.DialSocketWithTimeout(socketPath, 5)
        client = notifyv1.NewNotifyClient(conn)
        notifier.conn = conn
        notifier.v1client = client
    request = notifyv1.DomainEventRequest {
		DomainJSON: domainJSON,
		StatusJSON: statusJSON,
		EventType:  string(event.Type),
	}
    response = notifier.v1client.HandleDomainEvent(ctx, &request)
        notifyClient::HandleDomainEvent()
            grpc.Invoke(ctx, "/kubevirt.notify.v1.Notify/HandleDomainEvent") --> virt-handler::Notify::HandleDomainEvent


3. virt-handler <-> virt-launcher
================================================================================

   virt-handler                         virt-launcher
   +----------------------+             +---------------------------+
   |   LifecycleHandler   |             | cmdserver.RunServer()     |
   |     cmdclient.       |   send cmd  |                           |
   |   VirtLauncherClient |    --->     | Launcher                  |
   |                      |             |                           |
   |                      |   rcv stat  |                           |
   |   Notify             |    <---     | notifyClient              |
   +----------------------+             +---------------------------+

0. Data Struct
================================================================================
0.1 LibvirtConnection, instance of cli.Connection
================================================================================

   LibvirtConnection
   +---------------------------------+
   |user/pass/uri                    |
   |    (string)                     |
   |Connect                          |  = libvirt.NewConnectWithAuth("qemu:///system")
   |    (libvirt.Connect)            |
   |                                 |
   |domainEventCallbacks             |
   |                                 |
   |domainDeviceAddedEventCallbacks  |
   |domainDeviceRemovedEventCallbacks|
   |                                 |
   |agentEventCallbacks              |
   |                                 |
   +---------------------------------+

0.2 AgentPoller
================================================================================

   AgentPoller
   +---------------------------------+
   |Connection                       |
   |    (cli.Connection)             |
   |VmiUID                           |
   |    (types.UID)                  |
   |domainName                       |
   |    (string)                     |
   |agentStore                       |  = agentpoller.NewAsyncAgentStore()
   |    (AsyncAgentStore)            |
   |    +----------------------------+
   |    |store                       |
   |    |    (sync.Map)              |
   |    |AgentUpdated                |
   |    |    (chan AgentUpdatedEvent)|
   |    |    +-----------------------+
   |    |    |Type(AgentCommand)     |
   |    |    |DomainInfo             |
   |    +----+-----------------------+
   |                                 |
   |workers                          |  ticker exec with executeAgentCommands()
   |    ([]PollerWorker)             |  con.QemuAgentCommand()
   |    +----------------------------+
   |    |AgentCommands               |  a list of commands executed on guestAgent
   |    |    ([]AgentCommand)        |
   |    |CallTick                    |
   |    +----------------------------+
   |    |AgentCommands               |  = []AgentCommand{GET_AGENT}
   |    +----------------------------+
   |    |AgentCommands               |  = []AgentCommand{GET_INTERFACES, GET_OSINFO, GET_TIMEZONE, GET_HOSTNAME}
   |    +----------------------------+
   |    |AgentCommands               |  = []AgentCommand{GET_FILESYSTEM}
   |    +----------------------------+
   |    |AgentCommands               |  = []AgentCommand{GET_USERS}
   +----+----------------------------+


0.3 Notifier, used in eventCallback()
================================================================================
   Notifier
   +---------------------------------+
   |conn                             |  setup in Notifier::connect()
   |    (*grpc.ClientConn)           |
   |v1client                         |
   |    (notifyv1.NotifyClient)      |
   |    +----------------------------+
   |    |cc                          |  = conn
   |    |    (*grpc.ClientConn)      |
   |    +----------------------------+
   |                                 |
   |pipeSocketPath                   |  = "/var/run/kubevirt/domain-notify-pipe.sock"
   |legacySocketPath                 |  = "/var/run/kubevirt/domain-notify.sock"
   |    (string)                     |
   +---------------------------------+
