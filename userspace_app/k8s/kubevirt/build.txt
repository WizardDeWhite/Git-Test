1. make

hack/dockerized ...

->

docker exec kubevirt-bazel-server /entrypoint.sh \
       DOCKER_PREFIX=index.docker.io/myrepo DOCKER_TAG=mybuild \
       IMAGE_PULL_POLICY= VERBOSITY= \
       ./hack/build-manifests.sh && hack/bazel-fmt.sh && \
       hack/bazel-build.sh

This means the build is done in container via:

  * ./hack/build-manifests.sh
  * ./hack/bazel-fmt.sh
  * ./hack/bazel-build.sh

The first two are preparation and the last one does the real build.

2. make push

hack/dockerized ... ./hack/bazel-push-images.sh

->

docker exec kubevirt-bazel-server /entrypoint.sh \
       ... \
       hack/bazel-push-images.sh

->

        bazel run \
            --config=${ARCHITECTURE} \
            --define container_prefix=${docker_prefix} \
            --define image_prefix=${image_prefix} \
            --define container_tag=${tag} \
            //:push-${target}

->

push-other-images
push-virt-operator
push-virt-api
push-virt-controller
push-virt-handler
push-virt-launcher
push-conformance

Those rules are defined in BUILD.bazel

2.1 push-other-images

load("@io_bazel_rules_docker//contrib:push-all.bzl", "docker_push")

docker_push(
    name = "push-other-images",
    bundle = ":build-other-images",
)

container_bundle(
    name = "build-other-images",
    images = {
        # cmd images
        "$(container_prefix)/$(image_prefix)example-hook-sidecar:$(container_tag)": "//cmd/example-hook-sidecar:example-hook-sidecar-image",
        "$(container_prefix)/$(image_prefix)example-cloudinit-hook-sidecar:$(container_tag)": "//cmd/example-cloudinit-hook-sidecar:example-cloudinit-hook-sidecar-image",
        "$(container_prefix)/$(image_prefix)subresource-access-test:$(container_tag)": "//cmd/subresource-access-test:subresource-access-test-image",
        # container-disk images
        "$(container_prefix)/$(image_prefix)alpine-container-disk-demo:$(container_tag)": "//containerimages:alpine-container-disk-image",
        "$(container_prefix)/$(image_prefix)cirros-container-disk-demo:$(container_tag)": "//containerimages:cirros-container-disk-image",
        "$(container_prefix)/$(image_prefix)cirros-custom-container-disk-demo:$(container_tag)": "//containerimages:cirros-custom-container-disk-image",
        "$(container_prefix)/$(image_prefix)fedora-cloud-container-disk-demo:$(container_tag)": "//containerimages:fedora-cloud-container-disk-image",
        "$(container_prefix)/$(image_prefix)microlivecd-container-disk-demo:$(container_tag)": "//containerimages:microlivecd-container-disk-image",
        "$(container_prefix)/$(image_prefix)virtio-container-disk:$(container_tag)": "//containerimages:virtio-container-disk-image",
        # Customized container-disk images
        "$(container_prefix)/$(image_prefix)fedora-sriov-lane-container-disk:$(container_tag)": "//containerimages:fedora-sriov-lane-container-disk-image",
        # testing images
        "$(container_prefix)/$(image_prefix)disks-images-provider:$(container_tag)": "//images/disks-images-provider:disks-images-provider-image",
        "$(container_prefix)/$(image_prefix)cdi-http-import-server:$(container_tag)": "//images/cdi-http-import-server:cdi-http-import-server-image",
        "$(container_prefix)/$(image_prefix)nfs-server:$(container_tag)": "//images/nfs-server:nfs-server-image",
        "$(container_prefix)/$(image_prefix)vm-killer:$(container_tag)": "//images/vm-killer:vm-killer-image",
        "$(container_prefix)/$(image_prefix)winrmcli:$(container_tag)": "//images/winrmcli:winrmcli-image",
    },
)

2.2 push-virt-operator

container_push(
    name = "push-virt-operator",
    format = "Docker",
    image = "//cmd/virt-operator:virt-operator-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-operator",
    tag = "$(container_tag)",
)

2.3 push-virt-api
container_push(
    name = "push-virt-api",
    format = "Docker",
    image = "//cmd/virt-api:virt-api-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-api",
    tag = "$(container_tag)",
)

2.4 push-virt-controller
container_push(
    name = "push-virt-controller",
    format = "Docker",
    image = "//cmd/virt-controller:virt-controller-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-controller",
    tag = "$(container_tag)",
)

2.5 push-virt-handler
container_push(
    name = "push-virt-handler",
    format = "Docker",
    image = "//cmd/virt-handler:virt-handler-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-handler",
    tag = "$(container_tag)",
)

2.6 push-virt-launcher
container_push(
    name = "push-virt-launcher",
    format = "Docker",
    image = "//cmd/virt-launcher:virt-launcher-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-launcher",
    tag = "$(container_tag)",
)

2.7 push-conformance
container_push(
    name = "push-conformance",
    testonly = True,
    format = "Docker",
    image = "//tests:conformance_image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)conformance",
    tag = "$(container_tag)",
)

3. hack/bazel-build.sh

bazel build \
    --config=${ARCHITECTURE} \
    --stamp \
    //tools/csv-generator/...

Then take a look into tools/csv-generator/BUILD.bazel

```
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "go_default_library",
    srcs = ["csv-generator.go"],
    importpath = "kubevirt.io/kubevirt/tools/csv-generator",
    visibility = ["//visibility:private"],
    deps = [
        "//pkg/virt-operator/creation/components:go_default_library",
        "//pkg/virt-operator/creation/csv:go_default_library",
        "//tools/util:go_default_library",
    ],
)
```

3.1 load(@io_bazel_rules_go//go:def.bzl, "go_binary", "go_library")

io_bazel_rules_go is defined in WORKSPACE

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "08369b54a7cbe9348eea474e36c9bbb19d47101e8860cec75cbf1ccd4f749281",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.24.0/rules_go-v0.24.0.tar.gz",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.24.0/rules_go-v0.24.0.tar.gz",
        "https://storage.googleapis.com/builddeps/08369b54a7cbe9348eea474e36c9bbb19d47101e8860cec75cbf1ccd4f749281",
    ],
)

go/def.bzl defines the rule go_binary.

4. rsync daemon

rsync daemon is used by hack/dockerized

4.1 /etc/rsyncd.conf in kubevirt/builder

$ cat /etc/rsyncd.conf
gid = 0
uid = 0
log file = /dev/stdout
reverse lookup = no
[build]
    hosts allow = *
    read only = false
    path = /root/go/src/kubevirt.io/kubevirt/
    comment = input sources
[out]
    hosts allow = *
    read only = false
    path = /root/go/src/kubevirt.io/kubevirt/_out
    comment = build output
[vendor]
    hosts allow = *
    read only = false
    path = /root/go/src/kubevirt.io/kubevirt/vendor
    comment = vendor directory

4.2 rsync step in dockerized

4.2.1 sync project to container

rsync ${KUBEVIRT_DIR}/${RSYNCTEMP} "rsync://root@127.0.0.1:${RSYNCD_PORT}/build/${RSYNCTEMP}"

kubevirt is synced to /root/go/src/kubevirt.io/kubevirt/

4.2.2 sync project to container again?

_rsync \
    --delete \
    --exclude 'bazel-bin' \
    --exclude 'bazel-genfiles' \
    --exclude 'bazel-kubevirt' \
    --exclude 'bazel-out' \
    --exclude 'bazel-testlogs' \
    --exclude 'cluster-up/cluster/**/.kubectl' \
    --exclude 'cluster-up/cluster/**/.oc' \
    --exclude 'cluster-up/cluster/**/.kubeconfig' \
    --exclude "_out" \
    --exclude ".vagrant" \
    --exclude ".bazeldnf" \
    ${KUBEVIRT_DIR}/ \
    "rsync://root@127.0.0.1:${RSYNCD_PORT}/build"

--delete:  delete extraneous files from dest dirs
--exclude: not sync this file

4.2.3 copy out from container

OUT_DIR=$KUBEVIRT_DIR/_out
_rsync --delete "rsync://root@127.0.0.1:${RSYNCD_PORT}/out" ${OUT_DIR}

5. Debug build process

Add bash script in following files, those would be synced into container and
executed:

hack/dockerized
hack/bazel-build.sh

