1. Arch
================================================================================

virt-operator --port 8434 -v 2
Execute()
    app.kubeVirtInformer = app.informerFactory.KubeVirt()
    app.kubeVirtController = NewKubeVirtController()
        kubeVirtInformer.AddEventHandler() {
            AddFunc:    addKubeVirt,
            DeleteFunc: deleteKubeVirt,
        }
    app.Run()
        app.kubeVirtController.Run()
            KubeVirtController::Execute()
                key = queue.Get()
                KubeVirtController::execute(key.(string))
                    # when kubeVirtExpectations.SatisfiedExpectations()
                    KubeVirtController::syncDeployment()
                        targetStrategy = c.loadInstallStrategy(kv)
                            job = c.generateInstallStrategyJob(config)
                            batch.Jobs().Create(job)   ->  virt-operator --dump-install-strategy

virt-operator --dump-install-strategy
with 4 envs:
    OperatorImageEnvName:   "OPERATOR_IMAGE"
    TargetInstallNamespace: "TARGET_INSTALL_NAMESPACE"
    TargetImagePullPolicy:  "TARGET_IMAGE_PULL_POLICY"
    TargetDeploymentConfig: "TARGET_DEPLOYMENT_CONFIG"

Execute()
    installstrategy.DumpInstallStrategyToConfigMap(app.clientSet, app.operatorNamespace)
        config, err := util.GetConfigFromEnv(), get KubeVirtDeploymentConfig, passed via env
        configMap = NewInstallStrategyConfigMap(config, addMonitorServiceResources, operatorNamespace)
            strategy = GenerateCurrentInstallStrategy(config, )
                strategy := &InstallStrategy{}
                crd = components.NewVirtualMachineInstanceCrd()
                crd = components.NewVirtualMachineInstanceCrd
                crd = components.NewPresetCrd
                crd = components.NewReplicaSetCrd
                crd = components.NewVirtualMachineCrd
                crd = components.NewVirtualMachineInstanceMigrationCrd
                crd = components.NewVirtualMachineSnapshotCrd
                crd = components.NewVirtualMachineSnapshotContentCrd
                crd = components.NewVirtualMachineRestoreCrd
                strategy.crds = append(strategy.crds, crd)
                strategy.services += NewPrometheusService()
                strategy.services += NewApiServerService(), Service "virt-api"
                strategy.services += NewOperatorWebhookService(), Service "kubevirt.io:virt-operator"
                strategy.deployments += NewApiServerDeployment(), Deployment "virt-api"
                strategy.deployments += NewControllerDeployment(), Deployment "virt-controller"
                strategy.daemonSets += NewHandlerDaemonSet(), DaemonSet "virt-handler"
                strategy.apiService += NewVirtAPIAPIServices()
            configMap := &corev1.ConfigMap{Data: "manifests": strategy}
        clientset.CoreV1().ConfigMaps().Create(configMap)

2. app.kubeVirtController = NewKubeVirtController()
================================================================================
c.kubeVirtExpectations = util.Expectations {
    ServiceAccount: 
	contoller.NewUIDTrackingControllerExpectations(
	    contoller.NewControllerExpectationsWithName("ServiceAccount")
	)
}

kubeVirtInformer.AddEventHandler
	AddFunc:    c.addKubeVirt,
	DeleteFunc: c.deleteKubeVirt,
	UpdateFunc: c.updateKubeVirt,

informers.Namespace.AddEventHandler(cache.ResourceEventHandlerFuncs{
	AddFunc: func(obj interface{}) {
		c.genericAddHandler(obj, nil)
	},
	UpdateFunc: func(oldObj, newObj interface{}) {
		c.genericUpdateHandler(oldObj, newObj, nil)
	},


c.informers.ServiceAccount.AddEventHandler(cache.ResourceEventHandlerFuncs{
	AddFunc: func(obj interface{}) {
		c.genericAddHandler(obj, c.kubeVirtExpectations.ServiceAccount)
	},
	DeleteFunc: func(obj interface{}) {
		c.genericDeleteHandler(obj, c.kubeVirtExpectations.ServiceAccount)
	},
	UpdateFunc: func(oldObj, newObj interface{}) {
		c.genericUpdateHandler(oldObj, newObj, c.kubeVirtExpectations.ServiceAccount)
	},
})

3. app.kubeVirtController.Run()
================================================================================
3.1 cache.WaitForCacheSync(stopCh, c.kubeVirtInformer.HasSynced)
================================================================================
3.2 cache.WaitForCacheSync(stopCh, c.informers.ServiceAccount.HasSynced)
================================================================================
3.3 c.runWorker -> c.Execute()
================================================================================
3.3.1 key, quit := c.queue.Get()
================================================================================
3.3.2 c.execute(key.(string))
================================================================================
3.3.2.1 obj, exists, err := c.kubeVirtInformer.GetStore().GetByKey(key)
================================================================================
3.3.2.2 kv := obj.(*v1.KubeVirt)
================================================================================
3.3.2.3 c.kubeVirtExpectations.SatisfiedExpectations(key)
================================================================================
3.3.2.4 c.syncDeployment(kvCopy)
================================================================================
3.3.2.5 operatorutil.SetConditionTimestamps(kv, kvCopy)
================================================================================

4. Expectations.SatisfiedExpectations(key string), eg: kubevirt/kubevirt
================================================================================
4.1 e.ServiceAccount.SatisfiedExpectations(key) && ...  -> ControllerExpectations.SatisfiedExpectations(key)
================================================================================
4.1.1 exp, exists, err := ControllerExpectations.GetExpectations(key)
================================================================================
4.1.1.1 exp, exists, err := ControllerExpectations.GetByKey(key) -> cache.GetByKey(key)
================================================================================
4.1.1.1.1 c.cacheStorage.Get(key) -> threadSafeMap.Get(key)
================================================================================
4.1.2 exp.Fulfilled() -> ControlleeExpectations.Fulfilled()
================================================================================
4.1.3 exp.isExpired()
================================================================================

5. KubeVirtController.syncDeployment(kv *v1.KubeVirt)
================================================================================
5.1 config := operatorutil.GetTargetConfigFromKV(kv), get DeploymentConfig
================================================================================
5.2 util.SetOperatorVersion(kv)
================================================================================
5.3 config.SetTargetDeploymentConfig(kv), set DeploymentConfig to KV.Status.TargetDeploymentConfig
================================================================================
5.3 kv.Status.Phase = v1.KubeVirtPhaseDeploying
================================================================================
5.4 targetStrategy, targetPending  = c.loadInstallStrategy(kv)
================================================================================
5.4.1 job := c.generateInstallStrategyJob(config)
================================================================================
5.4.1.1 job := &batchv1.Job {"virt-operator --dump-install-strategy"}
================================================================================
5.4.2 c.kubeVirtExpectations.InstallStrategyJob.RaiseExpectations(kvkey, 1, 0)
================================================================================
5.4.3 batch.Jobs(c.operatorNamespace).Create(job)
================================================================================
5.5 util.AddFinalizer(kv)
================================================================================
5.6 synced, err := installstrategy.SyncAll(c.queue, kv, targetStrategy, c.stores,
		c.clientset, c.aggregatorClient, &c.kubeVirtExpectations)
================================================================================
5.7 config.SetObservedDeploymentConfig(kv)
================================================================================
5.8 kv.Status.Phase = v1.KubeVirtPhaseDeployed
================================================================================

6. installstrategy.DumpInstallStrategyToConfigMap(app.clientSet, app.operatorNamespace)
================================================================================
6.1 config, err := util.GetConfigFromEnv(), get KubeVirtDeploymentConfig, passed via env
================================================================================
6.2 configMap = NewInstallStrategyConfigMap(config, addMonitorServiceResources, operatorNamespace)
================================================================================
6.2.1 strategy = GenerateCurrentInstallStrategy(config, )
================================================================================
6.2.1.0 strategy := &InstallStrategy{}
================================================================================
6.2.1.1 crd = components.NewVirtualMachineInstanceCrd()
================================================================================
6.2.1.2 crd = components.NewVirtualMachineInstanceCrd
================================================================================
6.2.1.3 crd = components.NewPresetCrd
================================================================================
6.2.1.4 crd = components.NewReplicaSetCrd
================================================================================
6.2.1.5 crd = components.NewVirtualMachineCrd
================================================================================
6.2.1.6 crd = components.NewVirtualMachineInstanceMigrationCrd
================================================================================
6.2.1.7 crd = components.NewVirtualMachineSnapshotCrd
================================================================================
6.2.1.8 crd = components.NewVirtualMachineSnapshotContentCrd
================================================================================
6.2.1.9 crd = components.NewVirtualMachineRestoreCrd
================================================================================
6.2.1.10 strategy.crds = append(strategy.crds, crd)
================================================================================
6.2.1.11 strategy.services += NewPrometheusService()
================================================================================
6.2.1.12 strategy.services += NewApiServerService(), Service "virt-api"
================================================================================
6.2.1.13 strategy.services += NewOperatorWebhookService(), Service "kubevirt.io:virt-operator"
================================================================================
6.2.1.14 strategy.deployments += NewApiServerDeployment(), Deployment "virt-api"
================================================================================
6.2.1.15 strategy.deployments += NewControllerDeployment(), Deployment "virt-controller"
================================================================================
6.2.1.16 strategy.daemonSets += NewHandlerDaemonSet(), DaemonSet "virt-handler"
================================================================================
6.2.1.17 strategy.apiService += NewVirtAPIAPIServices()
================================================================================
6.2.2 configMap := &corev1.ConfigMap{Data: "manifests": strategy}
================================================================================
6.3 clientset.CoreV1().ConfigMaps().Create(configMap)
================================================================================

0. data struct
================================================================================
0.1 KubeVirt
================================================================================
   KubeVirt
   +---------------------------------+
   |metav1.TypeMeta                  |
   |metav1.ObjectMeta                |
   |                                 |
   |                                 |
   |Spec                             |
   |    (KubeVirtSpec)               |
   |    +----------------------------+
   |    |ImageTag                    |
   |    |ImageRegistry               |
   |    |                            |
   |    |Configuration               |
   |    |    (KubeVirtConfiguration) |
   |    |    +-----------------------+
   |    |    |CPUModel               |
   |    |    |CPURequest             |
   |    |    |MachineType            |
   |    |    |                       |
   |    |    |                       |
   |    +----+-----------------------+
   |Status                           |
   |    (KubeVirtStatus)             |
   |    +----------------------------+
   |    |OperatorVersion             |
   |    |TargetKubeVirtRegistry      |
   |    |TargetKubeVirtVersion       |
   |    |TargetDeploymentID          |
   |    |TargetDeploymentConfig      |  string formatted KubeVirtDeploymentConfig
   |    |                            |
   |    |ObservedKubeVirtRegistry    |
   |    |ObservedKubeVirtVersion     |
   |    |ObservedDeploymentID        |
   |    |ObservedDeploymentConfig    |
   |    |                            |
   |    |Phase                       |  "Deploying" "Deployed" "Deleting" "Deleted"
   |    |Conditions                  |
   |    |    ([]KubeVirtCondition)   |
   |    |    +-----------------------+
   |    |    |Type                   |
   |    |    |Status                 |
   |    |    |LastProbeTime          |
   |    |    |LastTransitionTime     |
   |    |    |Reason                 |
   |    |    |                       |
   |    |    |                       |
   +----+----+-----------------------+

0.2 UIDTrackingControllerExpectations
================================================================================

   UIDTrackingControllerExpectations
   +---------------------------------+
   |ControllerExpectationsInterface  |
   |ControllerExpectations           |
   |    +----------------------------+
   |    |name                        |
   |    |cache.Store                 |  = cache.NewStore(ExpKeyFunc)
   |    |    +-----------------------+
   |    |    |cacheStorage           |  = NewThreadSafeStore()
   |    |    |   +-------------------+
   |    |    |   |items              |
   |    |    |   | (map[s]interface) |
   |    |    |   |                   |
   |    |    |   +-------------------+
   |    |    |keyFunc                |  = keyFunc
   |    +----+-----------------------+
   |uidStoreLock                     |
   |                                 |
   |uidStore                         |  = cache.NewStore(UIDSetKeyFunc)
   |    (cache.Store)                |
   +---------------------------------+

0.3 KubeVirtDeploymentConfig
================================================================================

   KubeVirtDeploymentConfig
   +---------------------------------+
   |ID                               |
   |Namespace                        |
   |Registry                         |
   |ImagePrefix                      |
   |                                 |
   |KubeVirtVersion                  |
   |                                 |
   |VirtOperatorSha                  |
   |VirtApiSha                       |
   |VirtControllerSha                |
   |VirtHandlerSha                   |
   |VirtLauncherSha                  |
   |                                 |
   |AdditionalProperties             |
   |PassthroughEnvVars               |
   |    (map[string]string)          |
   +---------------------------------+

0.4 InstallStrategy
================================================================================

   InstallStrategy
   +---------------------------------+
   |serviceAccounts                  |
   |    ([]ServiceAccount)           |
   |                                 |
   |clusterRoles                     |
   |    ([]ClusterRole)              |
   |clusterRoleBindings              |
   |    ([]ClusterRoleBinding)       |
   |                                 |
   |crds                             |
   |    ([]CustomResourceDefinition) |
   |                                 |
   |services                         |
   |    ([]Service)                  |
   |deployments                      |
   |    ([]Deployment)               |
   |daemonSets                       |
   |    ([]DaemonSet)                |
   |apiServices                      |
   |    ([]APIService)               |
   |                                 |
   |                                 |
   +---------------------------------+

0.5 service.Service
================================================================================

   service.Service (&VirtOperatorApp)
   +---------------------------------+
   |AddFlags                         |
   |Run                              |
   |                                 |
   +---------------------------------+
   |service.ServiceListen            |
   |    +----------------------------+
   |    |Name                        |
   |    |BindAddress                 |  = "0.0.0.0"
   |    |Port                        |  = 8186
   |    |                            |
   |    +----------------------------+
   |clientSet                        |  = kubecli.GetKubevirtClient()
   |restClient                       |  = clientSet.RestClient()
   |informerFactory                  |  = NewKubeInformerFactory()
   |kubeVirtController               |  = NewKubeVirtController()
   |kubeVirtRecorder                 |  = app.getNewRecorder()
   |                                 |
   |operatorNamespace                |  = clientutil.GetNamespace() = "kubevirt"
   |                                 |
   |kubeVirtInformer                 |  = informerFactory.KubeVirt()
   |kubeVirtCache                    |  = kubeVirtInformer.GetStore()
   |                                 |
   |stores                           |  = util.Stores{}
   |    +----------------------------+
   |    |ServiceAccountCache         |
   |    |ClusterRoleCache            |
   |    |                            |
   |    |    (cache.Store)           |
   |    +----------------------------+
   |informers                        |  = util.Informers{}
   |    +----------------------------+
   |    |ServiceAccount              |
   |    |ClusterRole                 |
   |    |                            |
   |    |                            |
   |    |                            |
   |    |                            |
   |    | (cache.SharedIndexInformer)|
   |    +----------------------------+
   |                                 |
   |LeaderElection                   |  = DefaultLeaderElectionConfiguration()
   |aggregatorClient                 |  = clientset.NewForConfigOrDie()
   |operatorCertManager              |
   +---------------------------------+

0.6 KubeVirtController
================================================================================

   KubeVirtController
   +---------------------------------+
   |clientset                        |  = app.clientSet
   |    (KubevirtClient)             |
   |queue                            |
   |    (RateLimitingInterface)      |
   |kubeVirtInformer                 |  = app.kubeVirtInformer
   |    (cache.SharedIndexInformer)  |
   |recorder                         |  = app.kubeVirtRecorder
   |    (EventRecorder)              |
   |stores                           |  = app.stores
   |    (util.Stores)                |
   |informers                        |  = app.informers
   |    (util.Informers)             |
   |kubeVirtExpectations             |
   |    (util.Expectations)          |
   |installStrategyMap               |
   |    (map[string]*InstallStrategy)|
   |                                 |
   |operatorNamespace                |  = app.operatorNamespace
   |    (string)                     |
   |aggregatorClient                 |
   |    (APIServiceInterface)        |
   |statusUpdater                    |
   |    (KVStatusUpdater)            |
   +---------------------------------+

