0. Preparation

$ git clone https://github.com/insujang/kubernetes-test-controller.git
$ git clone https://github.com/kubernetes/code-generator
$ cd code-generator
$ git checkout v0.17.0

1. Generating code with code generator

1.1 File arch

What we need is these tree files.

$ tree -L 3 kubernetes-test-controller/lib/testresource/
kubernetes-test-controller/lib/testresource/
├── generated
└── v1beta1
    ├── doc.go
    ├── register.go
    └── types.go

1.1.1 types.go <-> create_custom_resource.yaml

type TestResourceSpec struct {
	Command        string `json:"command"`
	CustomProperty string `json:"customProperty"`
}
type TestResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   TestResourceSpec `json:"spec"`
	Status string           `json:"status"`
}

```
apiVersion: insujang.github.io/v1beta1
kind: TestResource
metadata:
        name: example-tr
spec:
        command: "echo Hello World!"
        customProperty: "asdasd1234"
```

We can see the struct TestResourceSpec defined in code could be mapped to the
definition in yaml.

1.2 Generate code

Assume we download code-generator at the same directory as kubernetes-test-controller

1.2.1 modify module path

$ cd code-generator
~/code-generator $ go mod edit -replace=insujang.github.io/kubernetes-test-controller=../kubernetes-test-controller
 
1.2.2 Generate code

~/code-generator $ ./generate-groups.sh all \
    insujang.github.io/kubernetes-test-controller/lib/testresource/generated \
    insujang.github.io/kubernetes-test-controller/lib testresource:v1beta1 \
    --go-header-file ./hack/boilerplate.go.txt --output-base ..
Generating deepcopy funcs
Generating clientset for testresource:v1beta1 at insujang.github.io/lib/testresource/generated/clientset
Generating listers for testresource:v1beta1 at insujang.github.io/lib/testresource/generated/listers
Generating informers for testresource:v1beta1 at insujang.github.io/lib/testresource/generated/informers

Parameters:

  * all is the target
  * 2nd is the module name to be imported
  * 3rd and 4th is the location of source.
  * --output-base specify the generated code location, otherwise will be in GOPATH

Now take a look at the generated files:

$ tree -L 3 ../insujang.github.io/kubernetes-test-controller/lib/
../insujang.github.io/kubernetes-test-controller/lib/
└── testresource
    ├── generated
    │  ├── clientset
    │  ├── informers
    │  └── listers
    └── v1beta1
        └── zz_generated.deepcopy.go

1.2.3 Move files together

Then move the files together:

$ cp -r ../insujang.github.io/kubernetes-test-controller/lib/testresource/* ../kubernetes-test-controller/lib/testresource/
$ rm -r ../insujang.github.io

After this, the file arch looks:

$ tree -L 3 kubernetes-test-controller/lib/testresource/
kubernetes-test-controller/lib/testresource/
├── generated
│     ├── clientset
│     │     └── versioned
│     ├── informers
│     │     └── externalversions
│     └── listers
│         └── testresource
└── v1beta1
    ├── doc.go
    ├── register.go
    ├── types.go
    └── zz_generated.deepcopy.go

2. Custom controller based on generated code and client-go

The core structure Controller:

type Controller struct {
	kubeclientset          kubernetes.Interface
	apiextensionsclientset apiextensionsclientset.Interface
	testresourceclientset  testresourceclienteset.Interface
	informer               cache.SharedIndexInformer
	lister                 testresourcelisters.TestResourceLister
	recorder  record.EventRecorder
	workqueue workqueue.RateLimitingInterface
}

apiextensionsclientset: add CRD and check status
testresourceclientset:  create and update CRD object
informer:               wait sync and add event handler
recorder:               broadcast event
workqueue:              for further process

2.1 Build controller

$ cd kubernetes-test-controller/cmd/controller
$ go build

2.2 Run controller

$ export KUBECONFIG="/root/.kube/config"
$ ./controller

PS: set KUBECONFIG to the correct kubernetes configure file.

2.3 More detail on each elements in Controller

2.3.1 apiextensionsclientset

This is created from "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
which is provided by k8s infrastructure.

2.3.2 testClient

This is created from "insujang.github.io/kubernetes-test-controller/lib/testresource/generated/clientset/versioned"
which is generated by code-generator.

2.3.3 informerFactory 

This is created from "insujang.github.io/kubernetes-test-controller/lib/testresource/generated/informers/externalversions"
with testClient as input. This means the informerFactory is also provided by
code-generator. 

2.3.4 informer

	informer := informerFactory.Insujang().V1beta1().TestResources()

This is retrieved from informerFactory.

3. Automatic generate CRD validation

Now we can generate the CRD validation code from the CRD definition in
types.go instead of write by hand.

This is done by two steps:

  * generate crd.yaml from types.go by controller-gen
  * extract validation part in crd.yaml and put into validations_generated.go

3.1 Generate CRD yaml from code

$ cd kubernetes-test-controller
$ GOFLAGS= controller-gen crd:allowDangerousTypes=true paths=./lib/testresource/v1beta1/

Then the crd yaml would be generated in ./config/crd/ directory.

3.2 Extract validation part

This is done by the tool validation-generator.go, which is copied from
kubevirt.

The output file is validations_generated.go which would be used by crd.go.

0. Reference

This one is based on this reference:
https://insujang.github.io/2020-02-13/programming-kubernetes-crd/

The project github
https://github.com/insujang/kubernetes-test-controller.git

