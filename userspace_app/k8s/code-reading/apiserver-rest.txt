1. Call flow and how storage is got
================================================================================
New()
  s := CustomResourceDefinitions{}
  apiResourceConfig = c.GenericConfig.MergedResourceConfig
  apiGroupInfo = genericapiserver.NewDefaultAPIGroupInfo()
  storage[""] = customResourceDefinitionStorage
  apiGroupInfo.VersionedResourcesStorageMap[v1.SchemeGroupVersion.Version] = storage
  InstallAPIGroup(apiGroupInfo)

RunAggregator()
  serverConfig = genericapiserver.NewRecommendedConfig(aggregatorscheme.Codecs)
	return &RecommendedConfig{
		Config: *NewConfig(codecs),
	}
  config = apiserver.Config {
    GenericConfig: serverConfig
  }
  config.Complete().NewWithDelegate()
    config.GenericConfig.Complete()
      RecommendedConfig.Config.Complete()
    apiGroupInfo = apiservicerest.NewRESTStorage(c.GernericConfig., c.GenericConfig.RESTOptionsGetter)
    InstallAPIGroup(apiGroupInfo)

InstallAPIGroup(apiGroupInfo)
  InstallAPIGroups(apiGroupInfos)
    s.installAPIResources(apiGroupInfo)
      apiGroupVersion = s.getAPIGroupVersion(apiGroupInfo)
        storage[] = apiGroupInfo.VersionedResourcesStorageMap[]
        version.Storage = storage
        return version
      apiGroupVersion.InstallREST(s.Handler.GoRestfulContainer)
        installer := &APIInstaller{
          group: apiGroupVersion
        }
        installer.Install()
          ws := a.newWebService()
          a.registerResourceHandlers(path, a.group.Storage[path], ws)

1. registerResourceHandlers(path, storage, ws)
================================================================================
lister, isLister := storage.(rest.Lister)

1.1 install actions
================================================================================
// Create Route for actions
case: "GET"
case: "PATCH"
case: "POST"
case: "PUT"

2. POST -> restfulCreateResource()
================================================================================
handlers.CreateResource(r, &scope, admit)(res.ResponseWriter, req.Request)

3. PUT -> restfulUpdateResource()
================================================================================
handlers.UpdateResource(r, &scope, admit)(res.ResponseWriter, req.Request)

4. LIST -> restfulListResource(lister, watcher, reqScope, false, a.minRequestTimeout)
================================================================================
handlers.ListResource(r, rw, &scope, forceWatch, minRequestTimeout)(res.ResponseWriter, req.Request)
4.1 namespace, err := scope.Namer.Namespace(req)
================================================================================
4.2 metainternalversionscheme.ParameterCodec.DecodeParameters(req.URL.Query(), scope.MetaGroupVersion, &opts); err != nil {
================================================================================
4.3 result, err := r.List(ctx, &opts), r is of type REST, so the func is Store.List()
================================================================================
4.3.1 out = Store.ListPredicate(ctx, Store.PredicateFunc(label, field), options)
================================================================================
4.3.1.1 e.Storage.List()
================================================================================
4.3.1.1.1 DryRunnableStorage.Storage.List(ctx, key, opts, listObj), implementation of DryRunnableStorage.Storage?
================================================================================
4.3.2 Store.Decorator(out)
================================================================================
4.3.3 return out
================================================================================
4.4 transformResponseObject(ctx, scope, trace, req, w, http.StatusOK, outputMediaType, result)
================================================================================

5. apiservicerest.NewRESTStorage()
================================================================================
5.1 apiGroupInfo = genericapiserver.NewDefaultAPIGroupInfo()
================================================================================
5.2 storage = map[string]rest.Storage{}
================================================================================
5.3 apiServiceREST := apiservicestorage.NewREST(aggregatorscheme.Scheme, restOptionsGetter), &REST{genericregistry.Store}
================================================================================
5.3.1 store = &genericregistry.Store{
  NewFunc:                  func() runtime.Object { return &apiregistration.APIService{} },
  NewListFunc:              func() runtime.Object { return &apiregistration.APIServiceList{} },
  PredicateFunc:            apiservice.MatchAPIService,
  DefaultQualifiedResource: apiregistration.Resource("apiservices"),
  
  CreateStrategy: strategy,
  UpdateStrategy: strategy,
  DeleteStrategy: strategy,
  
  // TODO: define table converter that exposes more than name/creation timestamp
  TableConvertor: rest.NewDefaultTableConvertor(apiregistration.Resource("apiservices")),
}
================================================================================
5.3.2 options = generic.StoreOptions{}
================================================================================
5.3.3 store.CompleteWithOptions(options)
================================================================================
5.3.3.1 opts, err := options.RESTOptions.GetRESTOptions(e.DefaultQualifiedResource)
================================================================================
5.3.4 return &REST{store}
================================================================================
5.4 storage["apiservices"] = apiServiceREST (*REST)
================================================================================
5.5 apiGroupInfo.VersionedResourcesStorageMap[] = storage
================================================================================

0. Data Struct
================================================================================

0.1 action
================================================================================

    action
    +------------------------------+
    |Verb                          |  = "GET", "PUT", "POST"
    |Path                          |
    |    (string)                  |
    |Params                        |
    |    ([]*restful.Parameter)    |
    |Namer                         |
    |    (handlers.ScopeNamer)     |
    |                              |
    +------------------------------+

0.2 APIInstaller
================================================================================

    APIInstaller
    +------------------------------+
    |group                         |
    |    (*APIGroupVersion)        |
    |    +-------------------------+
    |    |Storage                  |  copied from APIGroupInfo.VersionedResourcesStorageMap
    |    |    (map[]rest.Storage)  |
    |    |    +--------------------+
    |    |    |New()               |
    |    |    +--------------------+
    |    |GroupVersion             |
    |    |                         |
    |    |Serializer               |
    |    |ParameterCodec           |
    |    |                         |
    |    |Typer                    |
    |    |Creater                  |
    |    |Convertor                |
    |    |                         |
    |    +-------------------------+
    |                              |
    |                              |
    |                              |
    +------------------------------+

0.3 APIGroupInfo
================================================================================

    APIGroupInfo
    +------------------------------+
    |Scheme                        |
    |ParameterCodec                |
    |                              |
    |VersionedResourcesStorageMap  | customresourcedefinition.NewREST()
    |(map[string]map[]rest.Storage)| apiservicerest.NewRESTStorage()
    |                              |
    +------------------------------+

0.4 REST -> store
================================================================================

    REST
    +------------------------------+
    |*genericregistry.Store        |
    |  +---------------------------+
    |  |NewFunc                    |
    |  |NewListFunc                |
    |  |KeyRootFunc                |
    |  |KeyFunc                    |
    |  |ObjectNameFunc             |
    |  |TTLFunc                    |
    |  |PredicateFunc              |
    |  |DestroyFunc                |
    |  |                           |
    |  |                           |
    |  |                           |
    |  |Storage                    |
    |  |   (DryRunnableStorage)    |
    |  |   +-----------------------+
    |  |   |Codec                  |
    |  |   |   (runtime.Codec)     |
    |  |   |Storage                |
    |  |   |   (storage.Interface) |
    |  |   |   +-------------------+
    |  |   |   |Create()/Delete()  |
    |  |   |   |Watch()/WatchList()|
    |  |   |   |Get()              |
    |  |   |   |List()             |
    |  |   |   |                   |
    +--+---+---+-------------------+

0.5 apiserver.Config
================================================================================

    Config
    +------------------------------+
    |GenericConfig                 |
    |  (*RecommendedConfig)        |
    |  +---------------------------+
    |  |Config                     |
    |  |  +------------------------+
    |  |  |                        |
    |  |  |                        |
    |  |  |                        |
    |  |  |                        |
    |  |  |                        |
    |  |  |                        |
    |  |  +------------------------+
    |  |                           |
    |  +---------------------------+
    |ExtraConfig                   |
    |                              |
    +------------------------------+

0. Reference
================================================================================
http://yangxikun.github.io/kubernetes/2020/01/30/kubernetes-apiserver-concurrent-safe.html
