1. Print

1.1 Pretty Print Json

$ cat example.json | jq
$ jq . example.json

1.2 Print value

# print metadata of index 0
$ jq '.volumeClaimTemplates[0].metadata' example.json

# print metadata of all
$ jq '.volumeClaimTemplates[].metadata' example.json
$ jq '.volumeClaimTemplates[] | .metadata' example.json

# array slice
$ jq '.volumeClaimTemplates[1:2] | .[] | .metadata' example.json

# print metadata and storageClassName
$ jq '.volumeClaimTemplates[0].metadata, .volumeClaimTemplates[0].spec.storageClassName' example.json

# print into a new record
$ jq '[.volumeClaimTemplates[0].metadata, .volumeClaimTemplates[0].spec.storageClassName]' example.json

# print in new form
$ jq '{name: .volumeClaimTemplates[].metadata.name, class: .volumeClaimTemplates[].spec.storageClassName}' example.json

2. Modify

2.1 Modify a key's value

cat example.json | \
    jq '.volumeClaimTemplates[0].spec.storageClassName = "nvme"'

2.2 Remove a key

$ jq 'del(.volumeClaimTemplates[].status)' example.json

2.3 Map values

$ echo '[12,14,15]' | jq 'map(.-2)'

2.4 Get average

$ echo '[12,14,15]' | jq 'add / length'

2.2 Modify key's value on specific condition

cat example.json | \
    jq '.volumeClaimTemplates |= map(if .metadata.name == "sysvol" then .spec.storageClassName="nvme" else . end)'

jq -f filter1.flt example.json

cat example.json | \
    jq '.volumeClaimTemplates |= map(if .spec.storageClassName == "local-ssd" then .spec.resources.requests.storage=.spec.resources.requests.storage+"nvme" else . end)'

3. Built-In operations

3.1 Addition

$ echo "{\"a\": 7}" | jq '.a + 1'
$ echo "{\"a\": [1,2], \"b\": [3,4]}" | jq '.a + .b'

3.2 Substraction

$ echo "[\"xml\", \"yaml\", \"json\"]" | jq '. - ["xml", "yaml"]'

3.3 Get Keys

$ jq '.volumeClaimTemplates[] | keys' example.json

3.4 Map

$ echo "[1,2,3]" | jq 'map(.+1)'

$ echo "{\"a\": 1, \"b\": 2, \"c\": 3}" | jq 'map_values(.+1)'

