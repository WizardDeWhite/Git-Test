1. Reference:
================================================================================
History of eBPF:
https://www.ibm.com/developerworks/cn/linux/l-lo-eBPF-history/index.html

Paper: The BSD Packet Filter: A New Architecture for User-level Packet Capture
http://www.tcpdump.org/papers/bpf-usenix93.pdf

Introduction to eBPF
https://lwn.net/Articles/740157/

An introduction to the BPF Compiler Collection
https://lwn.net/Articles/742082/

BCC install guide
https://github.com/iovisor/bcc/blob/master/INSTALL.md

BCC Tutorial
https://github.com/iovisor/bcc/blob/master/docs/tutorial.md

Learn eBPF Tracing: Tutorial and Examples
http://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html

bcc Python Developer Tutorial
https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md

bcc Reference Guide
https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md

BPF: A Tour of Program Type
https://blogs.oracle.com/linux/notes-on-bpf-1

2. Compile Samples in kernel source tree
================================================================================
In kernel examples:
kernel_source_tree/samples/bpf/*

# need to install clang and llvm
# cd samples/bpf
# make

or run following command in kernel source tree root directory

# make M=$PWD/samples/bpf BPF_SAMPLES_PATH=$PWD/samples/bpf

2.1 Kernel configuration requirement
================================================================================

CONFIG_BPF=y
CONFIG_BPF_SYSCALL=y
# [optional, for tc filters]
CONFIG_NET_CLS_BPF=m
# [optional, for tc actions]
CONFIG_NET_ACT_BPF=m
CONFIG_BPF_JIT=y
# [for Linux kernel versions 4.1 through 4.6]
CONFIG_HAVE_BPF_JIT=y
# [for Linux kernel versions 4.7 and later]
CONFIG_HAVE_EBPF_JIT=y
# [optional, for kprobes]
CONFIG_BPF_EVENTS=y

CONFIG_NET_SCH_SFQ=m
CONFIG_NET_ACT_POLICE=m
CONFIG_NET_ACT_GACT=m
CONFIG_DUMMY=m
CONFIG_VXLAN=m

3. map mechanism in eBPF
================================================================================

                            Kernel
                             +------------------------------+
                             |                              |
                             | .............                |
                             | . Map       .        * * * * |
                             | .............         BPF    |
                             |      ^               *     * |
                             |      |                       |
    +------------+   bpf()   |      v               *     * |
    | Userspace  |  syscall  | +--------------+      Prog   |
    |            |< - - - - >| | bpf_map::ops |< - >*     * |
    |  Process   |           | +--------------+             |
    +------------+           |                      * * * * |
                             +------------------------------+


4. command, map, program
================================================================================
4.1 command type, used in syscall bpf()
================================================================================
enum bpf_cmd {
	BPF_MAP_CREATE,
	BPF_MAP_LOOKUP_ELEM,
	BPF_MAP_UPDATE_ELEM,
	BPF_MAP_DELETE_ELEM,
	BPF_MAP_GET_NEXT_KEY,
	BPF_PROG_LOAD,
	BPF_OBJ_PIN,
	BPF_OBJ_GET,
	BPF_PROG_ATTACH,
	BPF_PROG_DETACH,
	BPF_PROG_TEST_RUN,
	BPF_PROG_GET_NEXT_ID,
	BPF_MAP_GET_NEXT_ID,
	BPF_PROG_GET_FD_BY_ID,
	BPF_MAP_GET_FD_BY_ID,
	BPF_OBJ_GET_INFO_BY_FD,
	BPF_PROG_QUERY,
	BPF_RAW_TRACEPOINT_OPEN,
	BPF_BTF_LOAD,
	BPF_BTF_GET_FD_BY_ID,
	BPF_TASK_FD_QUERY,
	BPF_MAP_LOOKUP_AND_DELETE_ELEM,
	BPF_MAP_FREEZE,
	BPF_BTF_GET_NEXT_ID,
	BPF_MAP_LOOKUP_BATCH,
	BPF_MAP_LOOKUP_AND_DELETE_BATCH,
	BPF_MAP_UPDATE_BATCH,
	BPF_MAP_DELETE_BATCH,
	BPF_LINK_CREATE,
	BPF_LINK_UPDATE,
};

4.2 map type
================================================================================
enum bpf_map_type {
	BPF_MAP_TYPE_UNSPEC,
	BPF_MAP_TYPE_HASH,
	BPF_MAP_TYPE_ARRAY,
	BPF_MAP_TYPE_PROG_ARRAY,
	BPF_MAP_TYPE_PERF_EVENT_ARRAY,
	BPF_MAP_TYPE_PERCPU_HASH,
	BPF_MAP_TYPE_PERCPU_ARRAY,
	BPF_MAP_TYPE_STACK_TRACE,
	BPF_MAP_TYPE_CGROUP_ARRAY,
	BPF_MAP_TYPE_LRU_HASH,
	BPF_MAP_TYPE_LRU_PERCPU_HASH,
	BPF_MAP_TYPE_LPM_TRIE,
	BPF_MAP_TYPE_ARRAY_OF_MAPS,
	BPF_MAP_TYPE_HASH_OF_MAPS,
	BPF_MAP_TYPE_DEVMAP,
	BPF_MAP_TYPE_SOCKMAP,
	BPF_MAP_TYPE_CPUMAP,
	BPF_MAP_TYPE_XSKMAP,
	BPF_MAP_TYPE_SOCKHASH,
	BPF_MAP_TYPE_CGROUP_STORAGE,
	BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
	BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
	BPF_MAP_TYPE_QUEUE,
	BPF_MAP_TYPE_STACK,
	BPF_MAP_TYPE_SK_STORAGE,
	BPF_MAP_TYPE_DEVMAP_HASH,
	BPF_MAP_TYPE_STRUCT_OPS,
};

4.3 prog type, pass to bpf_prog_load()
================================================================================
Quoted from bpf(2) man page:

   The eBPF program type (prog_type) determines the subset of kernel helper
   functions that the program may call.  The program type also determines the
   program input (context)—the format of struct bpf_con‐ text (which is the
   data blob passed into the eBPF program as the first argument).

enum bpf_prog_type {
	BPF_PROG_TYPE_UNSPEC,
	BPF_PROG_TYPE_SOCKET_FILTER,
	BPF_PROG_TYPE_KPROBE,
	BPF_PROG_TYPE_SCHED_CLS,
	BPF_PROG_TYPE_SCHED_ACT,
	BPF_PROG_TYPE_TRACEPOINT,
	BPF_PROG_TYPE_XDP,
	BPF_PROG_TYPE_PERF_EVENT,
	BPF_PROG_TYPE_CGROUP_SKB,
	BPF_PROG_TYPE_CGROUP_SOCK,
	BPF_PROG_TYPE_LWT_IN,
	BPF_PROG_TYPE_LWT_OUT,
	BPF_PROG_TYPE_LWT_XMIT,
	BPF_PROG_TYPE_SOCK_OPS,
	BPF_PROG_TYPE_SK_SKB,
	BPF_PROG_TYPE_CGROUP_DEVICE,
	BPF_PROG_TYPE_SK_MSG,
	BPF_PROG_TYPE_RAW_TRACEPOINT,
	BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
	BPF_PROG_TYPE_LWT_SEG6LOCAL,
	BPF_PROG_TYPE_LIRC_MODE2,
	BPF_PROG_TYPE_SK_REUSEPORT,
	BPF_PROG_TYPE_FLOW_DISSECTOR,
	BPF_PROG_TYPE_CGROUP_SYSCTL,
	BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
	BPF_PROG_TYPE_CGROUP_SOCKOPT,
	BPF_PROG_TYPE_TRACING,
	BPF_PROG_TYPE_STRUCT_OPS,
	BPF_PROG_TYPE_EXT,
};

4.3.1 BPF_PROG_TYPE_SOCKET_FILTER
================================================================================
Refer to https://blogs.oracle.com/linux/notes-on-bpf-1

Attach to a specific socket, setsockopt(sock, SOL_SOCKET, SO_ATTACH_BPF, ).

The context is struct __sk_buff.

This type ebpf is processed in sk_filter_trim_cap()

    sk_filter_trim_cap()
        bpf_prog_run_save_cb()
            res = BPF_PROG_RUN(prog, skb);
                bpf_dispatcher_nop_func(skb, prog->insnsi, prog->bpf_func)


4.3.2 BPF_PROG_TYPE_TRACEPOINT
================================================================================
Attach to a eventfd by ioctl(efd, PERF_EVENT_IOC_SET_BPF, fd).
The detail is in load_and_attach() in sample/bpf/bpf_load.c

The context is trace point specific.

For example, for event syscalls/sys_enter_open, the file "format" shows the
context struct.

    /sys/kernel/debug/tracing/events/syscalls/sys_enter_open/format

This type ebpf is processed in trace_call_bpf().

    trace_call_bpf()
        ret = BPF_PROG_RUN_ARRAY_CHECK(call->prog_array, ctx, BPF_PROG_RUN);
            BPF_PROG_RUN(prog, ctx);

5. libbpf, user interface for bpf program
================================================================================
It is in kernel source code directory:

    tools/lib/bpf

5.1 libbpf api are defined in tools/lib/bpf
================================================================================

bpf_prog_load()
bpf_map_lookup_elem()

5.2 libbpf finally use bpf() syscall to connect with kernel
================================================================================

bpf_map_lookup_elem()
    sys_bpf(BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));
        syscall(__NR_bpf, cmd, attr, size);

In kernel bpf syscall is defined as:

#define __NR_bpf 280
__SYSCALL(__NR_bpf, sys_bpf)  -> SYSCALL_DEFINE3(bpf, ... )

6. bpf helpers, kernel interfaces
================================================================================
Defined in kernel/bpf/helpers.c

BPF_CALL_2(bpf_map_lookup_elem, struct bpf_map *, map, void *, key)
{
	WARN_ON_ONCE(!rcu_read_lock_held());
	return (unsigned long) map->ops->map_lookup_elem(map, key);
}

llvm built-in, load_half()/load_word() is declared in
tools/testing/selftests/bpf/bpf_legacy.h

