1. Build from source

https://github.com/firecracker-microvm/firecracker/blob/master/docs/getting-started.md#building-from-source

git clone https://github.com/firecracker-microvm/firecracker

# prepare docker before running this
tools/devtool build

# or do it manually
rustup target add x86_64-unknown-linux-musl
arch=`uname -m`
cargo build --target ${arch}-unknown-linux-musl

Note: musl-gcc should be installed. 

https://www.musl-libc.org/how.html

git clone git://git.musl-libc.org/musl
cd musl
./configure
make && make install
export PATH=/usr/local/musl/bin/:$PATH

2. Running firecracker

https://github.com/firecracker-microvm/firecracker/blob/master/docs/getting-started.md#running-firecracker

2.1 Get kernel and rootfs

```
  arch=`uname -m`
  dest_kernel="hello-vmlinux.bin"
  dest_rootfs="hello-rootfs.ext4"
  image_bucket_url="https://s3.amazonaws.com/spec.ccfc.min/img"

  if [ ${arch} = "x86_64" ]; then
          kernel="${image_bucket_url}/hello/kernel/hello-vmlinux.bin"
          rootfs="${image_bucket_url}/hello/fsfiles/hello-rootfs.ext4"
  elif [ ${arch} = "aarch64" ]; then
          kernel="${image_bucket_url}/aarch64/ubuntu_with_ssh/kernel/vmlinux.bin"
          rootfs="${image_bucket_url}/aarch64/ubuntu_with_ssh/fsfiles/xenial.rootfs.ext4"
  else
          echo "Cannot run firecracker on $arch architecture!"
          exit 1
  fi

  echo "Downloading $kernel..."
  curl -fsSL -o $dest_kernel $kernel

  echo "Downloading $rootfs..."
  curl -fsSL -o $dest_rootfs $rootfs

  echo "Saved kernel file to $dest_kernel and root block device to $dest_rootfs."
```

2.2 Start firecracker

rm -f /tmp/firecracker.socket
./firecracker --api-sock /tmp/firecracker.socket

Or you can use config file:

./firecracker --api-sock /tmp/firecracker.socket --config-file FILE_NAME

```
{
  "boot-source": {
    "kernel_image_path": "hello-vmlinux.bin",
    "boot_args": "console=ttyS0 reboot=k panic=1 pci=off"
  },
  "drives": [
    {
      "drive_id": "rootfs",
      "path_on_host": "hello-rootfs.ext4",
      "is_root_device": true,
      "is_read_only": false
    }
  ],
  "machine-config": {
    "vcpu_count": 2,
    "mem_size_mib": 1024,
    "ht_enabled": false
  }
}
```

By doing so, we can skip 2.3.

2.3 Set guest kernel and rootfs

```
  arch=`uname -m`
  kernel_path=$(pwd)"/hello-vmlinux.bin"

  if [ ${arch} = "x86_64" ]; then
    curl --unix-socket /tmp/firecracker.socket -i \
        -X PUT 'http://localhost/boot-source'   \
        -H 'Accept: application/json'           \
        -H 'Content-Type: application/json'     \
        -d "{
              \"kernel_image_path\": \"${kernel_path}\",
              \"boot_args\": \"console=ttyS0 reboot=k panic=1 pci=off\"
         }"
  elif [ ${arch} = "aarch64" ]; then
      curl --unix-socket /tmp/firecracker.socket -i \
        -X PUT 'http://localhost/boot-source'   \
        -H 'Accept: application/json'           \
        -H 'Content-Type: application/json'     \
        -d "{
              \"kernel_image_path\": \"${kernel_path}\",
              \"boot_args\": \"keep_bootcon console=ttyS0 reboot=k panic=1 pci=off\"
         }"
  else
      echo "Cannot run firecracker on $arch architecture!"
      exit 1
  fi
```

```
  rootfs_path=$(pwd)"/hello-rootfs.ext4"
  curl --unix-socket /tmp/firecracker.socket -i \
    -X PUT 'http://localhost/drives/rootfs' \
    -H 'Accept: application/json'           \
    -H 'Content-Type: application/json'     \
    -d "{
          \"drive_id\": \"rootfs\",
          \"path_on_host\": \"${rootfs_path}\",
          \"is_root_device\": true,
          \"is_read_only\": false
     }"
```

2.4 Start guest

```
curl --unix-socket /tmp/firecracker.socket -i \
    -X PUT 'http://localhost/actions'       \
    -H  'Accept: application/json'          \
    -H  'Content-Type: application/json'    \
    -d '{
        "action_type": "InstanceStart"
     }'
```
