1. Project github

https://github.com/containerd/containerd

2. Quick Start

2.1 Installation

$ yum install containerd
$ yum install cri-tools

2.2 Configuration

2.2.1 Systemd Config

$ sudo systemctl enable containerd

This would

Created symlink /etc/systemd/system/multi-user.target.wants/containerd.service → /usr/lib/systemd/system/containerd.service.

2.2.2 Containerd Config

/etc/containerd/config.toml

This could be generated by

$ containerd config default > /etc/containerd/config.toml

2.2.3 Crictl config

Set the correct grpc address

$ crictl config runtime-endpoint unix:///run/containerd/containerd.sock

Or you can adjust /etc/crictl.yaml directly

2.3 Start Containerd Service

$ sudo systemctl start containerd

2.4 Quick check

$ crictl ps

If this command display following message, congratulations, it is running.

"
CONTAINER ID        IMAGE               CREATED             STATE               NAME                ATTEMPT
"

2.4.1 Known Issues

2.4.1.1 Need to run as root

2.4.1.1 unsupported output format

On Fedora, "crictl ps" would return this:

FATA[0000] listing pod sandboxes failed: unsupported output format ""

This seems to be a known issue. Add "--output=table" as workaround.

$ crictl ps --output=table

3. Run Pod Sandbox and Container

3.1 Run Pod

Pod-config.json

```
{
    "metadata": {
        "name": "nginx-sandbox",
        "namespace": "default",
        "attempt": 1,
        "uid": "hdishd83djaidwnduwk28bcsb"
    },
    "log_directory": "/tmp",
    "linux": {
    }
}
```

$ crictl runp pod-config.json

Then you can list the pod by:

$ crictl pods
POD ID              CREATED             STATE               NAME                NAMESPACE           ATTEMPT
f84dd361f8dc5       17 seconds ago      Ready               nginx-sandbox     default             1

3.2 Run Container in Sandbox

container-config.json

```
{
  "metadata": {
      "name": "busybox"
  },
  "image":{
      "image": "busybox"
  },
  "command": [
      "top"
  ],
  "log_path":"busybox.0.log",
  "linux": {
  }
}
```

$ crictl create f84dd361f8dc5 container-config.json pod-config.json

Then you can list the container by:

$ crictl ps -a
CONTAINER ID        IMAGE               CREATED             STATE               NAME                ATTEMPT
1128073c47d9e       busybox             17 seconds ago      Created             busybox             0

Then start the container

$ crictl start 1128073c47d9e

Now the state is running

$ crictl ps -a
CONTAINER ID        IMAGE               CREATED             STATE               NAME                ATTEMPT
1128073c47d9e       busybox             2 minutes ago       Running             busybox             0

3.3 Delete Pod

crictl rmp pod_id

3.4 Delete Container

crictl rm container_id

4. Build

https://github.com/containerd/containerd/blob/master/BUILDING.md

The steps are clear, just follow.

Gernally, just make is fine.

5. View containerd log

Containerd log is collected by systemd.

$ journalctl -u containerd.service

List log with specific level

$ journalctl -u containerd.service -p info

$ journalctl -u containerd.service --since "5 min ago"

0. Reference

Debugging Kubernetes nodes with crictl
https://kubernetes.io/docs/tasks/debug-application-cluster/crictl/

Container Runtime Interface (CRI) CLI
https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md

如何使用containerd
https://www.jianshu.com/p/d9bf66841a1e
