1. http_server.go

This program is used to display content in http request.

E.g: go run http_server.go

$ curl http://localhost:8000/vm/rest?yes=abc\&name=r -H "User:admin"

$ curl -X POST http://localhost:8000/vm/rest?yes=abc\&name=r -H "User:admin" \
	-H 'content-type: application/json' -d "{\"type\":\"abc\"}"

Test for compare request

$ curl http://localhost:8000/compare?yes=abc\&name=r -H "User:admin" -H "Group:test"
$ curl http://localhost:8000/compare?yes=abc\&name=r -H "User:admin"
$ curl http://localhost:8000/diffurl?yes=abc\&name=r -H "User:admin" -H "Group:test"
$ curl -X Post http://localhost:8000/compare?yes=abc\&name=r -H "User:admin" -H "Group:test"
$ curl -X Post http://localhost:8000/compare?yes=abc\&name=r -H "User:admin" -H "Group:test" -d @ping.json
$ curl -X Post http://localhost:8000/compare?yes=abc\&name=r -H "User:admin" -H "Group:test" -d @ping2.json

2. gin_server.go

This program is used to show how to use package gin to build a http server.

E.g: go run gin_server.go

$ curl http://localhost:8000/ping -H "User:admin" -d @ping.json
$ curl -X GET http://localhost:8000/ping?marker=abc -H "User:admin" -d @ping.json

3. http_get.go

First startup a server,

e.g. "go run http_server.go", "go run gin_server.go"

$ go run http_get.go http://localhost:8000

4. http_client.go

Start the gin_server

$ go run http_client.go

5. resty.go

Start the gin_server

$ go run resty.go

6. mux_server.go

$ go run mux_server.go
$ curl http://localhost:8000/
$ curl -X POST http://localhost:8000/   # POST not Post!!!
$ curl http://localhost:8000/user
