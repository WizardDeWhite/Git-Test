1. x86_64_start_kernel(), jump from head_64.S
================================================================================

1.1 idt_setup_early_handler()
================================================================================

1.1.1 set_intr_gate()
================================================================================

1.1.2 load_idt(&idt_descr)
================================================================================
static inline void native_load_idt(const struct desc_ptr *dtr)
{
	asm volatile("lidt %0"::"m" (*dtr));
}

2. start_kernel()
================================================================================

2.1 setup_arch()
================================================================================

2.1.1 idt_setup_early_traps(), TRAP_DB & TRAP_BP
================================================================================

2.1.1.1 idt_setup_from_table(idt_table, early_idts)
================================================================================
; write gates in early_idts to idt_table

2.1.1.2 load_idt(&idt_descr)
================================================================================

2.2 trap_init()
================================================================================

2.2.1 setup_cpu_entry_areas()
================================================================================

2.2.2 idt_setup_traps(), set from def_idts
================================================================================

2.2.2.1 EXPLAIN: how def_idts defines
================================================================================

static const __initconst struct idt_data def_idts[] = {
	INTG(X86_TRAP_DE,		divide_error),
};

idtentry divide_error			do_divide_error			has_error_code=0

DO_ERROR(X86_TRAP_DE,     SIGFPE,  FPE_INTDIV,   IP, "divide error",        divide_error)

#define DO_ERROR(trapnr, signr, sicode, addr, str, name)		   \
dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	   \
{									   \
	do_error_trap(regs, error_code, str, trapnr, signr, sicode, addr); \
}

2.2.3 cpu_init()
================================================================================

2.2.3.1 load_current_idt(), load_idt(&idt_descr)
================================================================================

2.2.3.2 load_TR_desc()
================================================================================

2.2.3.3 load_mm_ldt()
================================================================================

2.2.4 idt_setup_ist_traps(), set from ist_idts
================================================================================

2.2.5 x86_init.irqs.trap_init(), x86_init_noop
================================================================================

2.3 mm_init()
================================================================================

2.3.1 mem_init()
================================================================================

2.4 sched_init()
================================================================================

2.5 early_irq_init()
================================================================================

2.3.1 init_irq_default_affinity()
================================================================================
static void __init init_irq_default_affinity(void)
{
#ifdef CONFIG_CPUMASK_OFFSTACK
	if (!irq_default_affinity)
		zalloc_cpumask_var(&irq_default_affinity, GFP_NOWAIT);
#endif
	if (cpumask_empty(irq_default_affinity))
		cpumask_setall(irq_default_affinity);
}

2.3.2 arch_probe_nr_irqs()
================================================================================
int __init arch_probe_nr_irqs(void)
{
	int nr;

	if (nr_irqs > (NR_VECTORS * nr_cpu_ids))
		nr_irqs = NR_VECTORS * nr_cpu_ids;

	nr = (gsi_top + nr_legacy_irqs()) + 8 * nr_cpu_ids;
#if defined(CONFIG_PCI_MSI) || defined(CONFIG_HT_IRQ)
	/*
	 * for MSI and HT dyn irq
	 */
	if (gsi_top <= NR_IRQS_LEGACY)
		nr +=  8 * nr_cpu_ids;
	else
		nr += gsi_top * 16;
#endif
	if (nr < nr_irqs)
		nr_irqs = nr;

	/*
	 * We don't know if PIC is present at this point so we need to do
	 * probe() to get the right number of legacy IRQs.
	 */
	return legacy_pic->probe();
}

2.3.2.1 legacy_pic->probe(), probe_8259A()
================================================================================

2.3.3 alloc_desc()
================================================================================

2.3.4 irq_insert_desc()
================================================================================
static void irq_insert_desc(unsigned int irq, struct irq_desc *desc)
{
	radix_tree_insert(&irq_desc_tree, irq, desc);
}

2.3.5 arch_early_irq_init()
================================================================================

2.3.5.1 init_legacy_irqs()
================================================================================

2.3.5.2 irq_domain_add_tree(), init x86_vector_domain
================================================================================

2.3.5.3 irq_set_default_host()
================================================================================

2.3.5.4 arch_init_msi_domain(), msi_default_domain
================================================================================

2.3.5.5 arch_init_htirq_domain(), htirq_domain
================================================================================

2.3.5.6 arch_early_ioapic_init()
================================================================================

2.6 init_IRQ()
================================================================================

2.6.1 ()
================================================================================

2.6.2 x86_init.irqs.intr_init() -> native_init_IRQ()
================================================================================

2.6.2.1 idt_setup_apic_and_irq_gates(), idt_table, apci_idts, irq_entries_start
================================================================================
common_interrupt:
	addq	$-0x80, (%rsp)			/* Adjust vector to [-256, -1] range */
	call	interrupt_entry
	UNWIND_HINT_REGS indirect=1
	call	do_IRQ	/* rdi points to pt_regs */

ENTRY(irq_entries_start)
    vector=FIRST_EXTERNAL_VECTOR
    .rept (FIRST_SYSTEM_VECTOR - FIRST_EXTERNAL_VECTOR)
	UNWIND_HINT_IRET_REGS
	pushq	$(~vector+0x80)			/* Note: always in signed byte range */
	jmp	common_interrupt
	.align	8
	vector=vector+1
    .endr
END(irq_entries_start)


2.7 local_irq_enable()
================================================================================

3. do_IRQ(), init by idt_setup_apic_and_irq_gates()
================================================================================

0. data structure
================================================================================

0.1 irq_desc
================================================================================

    irq_desc
    +--------------------------+   
    |depth                     |
    |wake_depth                |
    |     (unsigned int)       |
    +--------------------------+
    |irq_common_data           |
    | (struct irq_common_data) |
    |  +-----------------------+
    |  |state_use_accessors    |
    |  |affinity               |
    |  |msi_desc               |
    |  |    (struct msi_desc *)|
    |  |handler_data           |
    |  |    (void *)           |
    +--+-----------------------+
    |irq_data                  |
    |    (struct irq_data)     |
    |  +-----------------------+
    |  |mask                   |
    |  |irq                    |
    |  |                       |
    |  |common                 |
    |  |irq_chip               |     i8259A_chip
    |  |irq_domain             |
    |  |chip_data              |
    |  |                       |
    +--+-----------------------+
    |handle_irq                |     handle_bad_irq, handle_level_irq
    |                          |
    +--------------------------+
    |                          |
    |                          |
    +--------------------------+

0.2 irq_domain
================================================================================

    +--------------------------+
    |name                      |
    |    (char *)              |
    +--------------------------+
    |ops                       |
    |  (struct irq_domain_ops) |
    |  +-----------------------+
    |  |match                  |
    |  |select                 |
    |  |map                    |
    |  |unmap                  |
    |  |                       |
    +--+-----------------------+
    |host_data                 |
    |   (void *)               |
    +--------------------------+
    |                          |
    |                          |
    +--------------------------+

0.2 irq_desc_tree, a radix tree
================================================================================

            irq_desc_tree
               /   \
              /     \
         irq_desc   irq_desc


0.3 irq_default_domain
================================================================================

irq_default_domain = x86_vector_domain

0.4 software arch
================================================================================
    

    IDT (idt_table)                struct irq_desc                                struct irqaction      struct irqaction
    +-----------+        +-----------------------------------------+    +----------------+    +----------------+
    |           |        |action (struct irqaction*)        next --|--->|         next --|--->|         next --| -> NULL
    +-----------+        |                                         |    |                |    |                |
    |           |        |                    +--> handler         |    | +->handler     |    | +->handler     |
    +-----------+        +--------------------|--------------------+    +-|--------------+    +-|--------------+
    .           .   +--->|handle_irq()        +----------------+---+------+---------------------+
    .           .   |    |= handle_level_irq                   |   |
    .           .   |    |= handle_edge_irq                    |   |
    +-----------+   |    |= handle_edge_eoi_irq                |   |
    |           |   |    |= handle_percpu_irq                  |   |
    +-----------+   |    |  |                                  |   |
    |do_IRQ  ---|---+    |  +->  __handle_irq_event_percpu() --+   |
    +-----------+        |                                         |
    |           |        +-----------------------------------------+
    +-----------+        
    .           .        
    .           .        
    .           .        
    +-----------+
    |           |
    +-----------+
    |           |
    +-----------+
