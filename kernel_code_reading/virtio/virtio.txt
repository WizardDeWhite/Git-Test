1. virtio_init, core_initcall
================================================================================
static int virtio_init(void)
{
	if (bus_register(&virtio_bus) != 0)
		panic("virtio bus registration failed");
	return 0;
}

1.1 bus_register(&virtio_bus)
================================================================================

1. virtio device probe flow
================================================================================
     device_attach(dev) -> __device_attach(dev, false);
         ret = bus_for_each_drv(dev->bus, NULL, &data, __device_attach_driver);
             driver_match_device(drv, dev)
                drv->bus->match() -> virtio_dev_match()
             driver_probe_device(drv, dev) -> really_probe()
                dev->bus->probe() -> virtio_dev_probe()
                device_add_groups(dev, drv->dev_groups)

2. virtio_bus
================================================================================
static struct bus_type virtio_bus = {
	.name  = "virtio",
	.match = virtio_dev_match,
	.dev_groups = virtio_dev_groups,
	.uevent = virtio_uevent,
	.probe = virtio_dev_probe,
	.remove = virtio_dev_remove,
};

2.1 virtio_dev_match
================================================================================
static int virtio_dev_match(struct device *_dv, struct device_driver *_dr)
{
	unsigned int i;
	struct virtio_device *dev = dev_to_virtio(_dv);
	const struct virtio_device_id *ids;

	ids = drv_to_virtio(_dr)->id_table;
	for (i = 0; ids[i].device; i++)
		if (virtio_id_match(dev, &ids[i]))
			return 1;
	return 0;
}

2.1.1 virtio_id_match
================================================================================
static inline int virtio_id_match(const struct virtio_device *dev,
				  const struct virtio_device_id *id)
{
	if (id->device != dev->id.device && id->device != VIRTIO_DEV_ANY_ID)
		return 0;

	return id->vendor == VIRTIO_DEV_ANY_ID || id->vendor == dev->id.vendor;
}

2.2 virtio_dev_groups, sysfs attributes
================================================================================
static struct attribute *virtio_dev_attrs[] = {
	&dev_attr_device.attr,
	&dev_attr_vendor.attr,
	&dev_attr_status.attr,
	&dev_attr_modalias.attr,
	&dev_attr_features.attr,
	NULL,
};
ATTRIBUTE_GROUPS(virtio_dev);

2.3 virtio_dev_uevent, invoked in dev_uevent()
================================================================================
static int virtio_uevent(struct device *_dv, struct kobj_uevent_env *env)
{
	struct virtio_device *dev = dev_to_virtio(_dv);

	return add_uevent_var(env, "MODALIAS=virtio:d%08Xv%08X",
			      dev->id.device, dev->id.vendor);
}

2.4 virtio_dev_probe(_d), invoked in really_probe()
================================================================================
2.4.1 dev = dev_to_virtio(_d)
================================================================================
2.4.2 drv = drv_to_virtio(dev->dev.driver)
================================================================================
2.4.3 virtio_add_status(dev, VIRTIO_CONFIG_S_DRIVER);
================================================================================
2.4.3.1 dev->config->set_status(dev, dev->config->get_status(dev) | status);
================================================================================
2.4.4 device_features = dev->config->get_features(dev)
================================================================================
2.4.5 driver_features = drv->feature_table[i]
================================================================================
2.4.6 driver_features_legacy = drv->feature_table_legacy[i]
================================================================================
2.4.7 err = drv->validate(dev);
================================================================================
2.4.8 err = virtio_finalize_features(dev)
================================================================================
2.4.8.1 ret = dev->config->finalize_features(dev);
================================================================================
2.4.8.2 virtio_add_status(dev, VIRTIO_CONFIG_S_FEATURES_OK)
================================================================================
2.4.9 drv->probe(dev)
================================================================================
2.4.10 drv->scan(dev)
================================================================================
2.4.11 virtio_config_enable(dev)
================================================================================
2.4.11.1 dev->config_enabled = true;
================================================================================

3. register_virtio_device(dev), register virtio device and try to probe it
================================================================================
3.1 dev->dev.bus = &virtio_bus
================================================================================
3.2 device_initialize(&dev->dev)
================================================================================
3.3 dev_set_name(&dev->dev, "virtio%u", dev->index);
================================================================================
3.4 dev->config->reset(dev)
================================================================================
3.5 virtio_add_status(dev, VIRTIO_CONFIG_S_ACKNOWLEDGE)
================================================================================
3.6 INIT_LIST_HEAD(&dev->vqs)
================================================================================
3.7 device_add(&dev->dev)
================================================================================
3.7.1 bus_add_device(dev)
================================================================================
3.7.2 bus_probe_device(dev)
================================================================================
3.7.2.1 device_initial_probe(dev) --> __device_attach()
================================================================================

4. register_virtio_driver(driver)
================================================================================
4.1 driver_register(&driver->driver)
================================================================================
4.1.1 bus_add_driver(drv)
================================================================================
4.1.1.1 driver_attach
================================================================================

0. Data Structure
================================================================================

0.1. virtio_driver
================================================================================

    virtio_driver
    +-------------------------------------+  
    |driver                               |
    |    (struct device_driver)           |
    |id_table                             |
    |    (struct virio_device_id*)        |
    |    +--------------------------------+
    |    |device                          |
    |    |vendor                          |
    |    +--------------------------------+
    |                                     |
    |feature_table_size                   |
    |    (int)                            |
    |feature_table                        |
    |    (int *)                          |
    |feature_table_size_legacy            |
    |    (int)                            |
    |feature_table_legacy                 |
    |    (int *)                          |
    |                                     |
    |probe()                              |
    |scan()                               |
    +-------------------------------------+  

0.2. virtio_device
================================================================================

    virtio_device
    +-------------------------------------+  
    |dev                                  |
    |    (struct device)                  |
    |    +--------------------------------+
    |    |bus                             |  = &virtio_bus
    |    +--------------------------------+
    |index                                |
    |    (int)                            |
    |id                                   |
    |    (struct virtio_device_id)        |
    |                                     |
    |config_enabled                       |  = false by default, true after probe
    |    (bool)                           |
    |features                             |  = driver_features & device_features
    |    (u64)                            |
    |config                               |
    |    (struct virtio_config_ops*)      |
    |vringh_config                        |
    |    (struct vringh_config_ops*)      |
    |                                     |
    |priv                                 |
    |    (void *)                         |
    +-------------------------------------+  
