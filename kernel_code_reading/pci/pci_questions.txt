Basic Questions:
1. how pci subsystem enumerate the pci bus at bootup?
   acpi_pci_root_add() will get the root bridge bus number
   and downstream bus range.
   then it will call pci_acpi_scan_root() to enumerate the bridge.

   pci_acpi_scan_root() will get the resourses from the acpi namespace 
   and then do a depth first search.

2. how to reassign bus number ? when bios not work fine
   First pass the kernel command line parameter, pci=assign-busses
   This will enable the pcibios_assign_all_busses() which enable pci_fixup_parent_subordinate_busnr().
   The pci_fixup_parent_subordinate_busnr() is used to fix the subordinate number in pass 1 of 
   pci_scan_bridge().

   pci_fixup_parent_subordinate_busnr() will both overwrite the pci_bus->subordinate and 
   write the config space of the bridge.

  
   how to reassign bus resource ? when bios not work fine
   On x86, get_current_resources() is called to get resouces from ACPI namespace.
   And register the resource in the linux kernel.

   In the kernel initializatioin process, pcibios_assign_resources() is call which than call
   pci_assign_unassigned_resources().

3. Why it need to scan the bridge twice?
   There are two passed for the pci_scan_bridge().

   pass 0 are for those works fine with the BIOS/Firmware.
   BIOS/Firmware take care of the bus/resource assignment.

   pass 1 are for those couldn't work fine with BIOS/Firmware.
   kernel will assign bus number for them.

4. How the pci_dev structure used by the driver?

5. How to maintain the bus and dev hierarchy? 
   all bus link to a list or form a tree?
   all pci_dev linkd to a list or form a tree, how could driver traverse them?

6. How can I print the bus hierarchy in user space?
   lspci?

7. one resouce with its parent equals to null means?
   this resource is not registered in the system?

8. pci_dev->subordinate != null
   means this pci_dev is a bridge

9. why pci_try_num in pci_assign_unassigned_resources()
   is max_depth + 1;

PCIe Questions:
1. How PCIe device support 256 functions per device.
   And how linux code enumerate it in code? pci_scan_child_bus()
	
   What is ARI and Routing ID?

2. What is the pci_bus structure when ARI device is there



             +-----------+-------------------+------------------+
             |           |Upstream Port      |                  | pci_dev.subordinate = Bus#1?
             |           +--------+----------+                  |
             |                    |                             |
             |                    |                             |
             |                    |   Bus#1                     |
             |      --------------+--------------------         |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |     +------+                  +--------+         |
             |     |      |                  |DownStream|       |
             +-----+--+---+------------------+---+----+---------+
                      |                          |
                      | Bus#2                    |Bus#3
                +-----+-------+           +------+--------+
                |ARI Device 1 |           | ARI Device 2  |
                |             |           |               |
                +-------------+           +---------------+

Since ARI Device could have 256 Functions, then after enumerate Device1, how could it 
enumerate Device2?
Will introduce another bus below Upstream Port?


SRIOV Questions:                                                
1. For SRIOV, how to get the VF and how this VF is used by guest? or host?

2. what is VF stride

3. The same as the #2 in PCIe question, 
   How to represent the device if VF is enabled for a SRIOV device.
   How could many pci_bus related to this pci_dev?

4. Does VF has its own configuration space?
   Yes, and the meaning of some bits is not the same as PCIe.

5. The BAR size in the SRIOV Extended Capabilities is the total
   size of all NumVFs VF?

6. All the memory resource needed by VFs is reflected in the PF BAR?
   And when this amount of resource are required ?

Some issue want to identify:

1. pci_bus->number and pci_bus->secondary redundant?
   in pci_alloc_child_bus

2. pci_bus->resource redundant?
   in pci_alloc_child_bus


PE related questions:
=====================================================================
1. What is the purpose of PE?
   dynamically assigen the IOA, part of IOA, for Dynamic Reconfiguration and LPAR.
   prevent one PE affect another and prevent one PE access others resource

2. what step need to be done to enable the PE? requirement
   A PE is defined by its Enhanced I/O Error Handling (EEH) domain and associated resources.
   The resources that need to be partitioned and not overlap with other PE domain include:
   * The Memory Mapped I/O (MMIO) Load and Store address space which is available to the PE
     use the page table mechanism to control this.
   * The DMA I/O bus address space which is available to the PE
     TCE like IO MMU.
   * The configuration address space of the PE
   * The interrupts which are accessible to the PE
   * The error domains of the PE
     one PE error will not affect another PE.
     controlled by EEH
   * The reset domain: A reset domain contains all the components of a PE
     all PE must be independently resetable by a reset domain
   * power domain(optional?) 
     need to be in different power domain than other PEs


3. terminology in PE

3.1 PE domain
    A PE domain is defined by its top-most (closest to the PHB) PCI configuration address (in the terms of the RTAS calls,
    the PHB_Unit_ID_Hi, PHB_Unit_ID_Low, and config_addr), which will be called the PE configuration address in
    this architecture, and encompasses everything below that in the I/O tree.

3.2 PE primary bus
    The top-most PCI bus of the PE will be called the PE primary bus.

3.3 MMIO validation, MDE & MDT 
    MMIO Domain Entry and MMIO Domain Table
    The MMIO Domain Tables (MDTs), which contain the MDEs, are located in the PHB chip.

    several bits in the MMIO address is used to associate the address range with a 
    MMIO Domain Entry (MDE).

    The MDE associates an MMIO address range (that is, each MDE Index) 
    with a PE's #, by the PE # field in the MDE.

3.4 DMA validation, TVT & TCT
    TVT: Translation Validation Table
    TCT: Translation and Control Table
    TTA: TCE Table Address

    TVT is located in PHB
    TCT is located in System Memory

3.5 MSI validation

3.6 where is the PE state?
   as shown in Figure 9 (page 84) in PAPR
   any requirement of where should PE state be put?

3.6.1 PE state contains
    EEH Enablement state 
    MMIO stopped state
    DMA stopped state

    MMIO stopped state and DMA stopped state should be independent

4. How this PE is used by OS?

5. how MMIO address translate between pci domain and cpu domain
   there are several variants
   platform is 32-bit or 64-bit
   pci bus is 32-bit or 64-bit, for PCIE it is 64-bit
   IOA is 32-bit or 64-bit

   what is the difference of 32-bit MMIO and 64-bit MMIO?

6. how DMA address translates
   DMA channel is different from the MMIO channel?
   this is 32-bit or 64-bit?

7. key difference between current implementation and future implementation
   The key difference between how IBM is implementing PEs today and how we
   are planning on doing it in the future, is that the endpoint state is 
   migrated from an IBM-unique bridge chip up to the PHB, allowing the use 
   of cheaper industry-standard switch and bridge chips in the future. 

   Reason: 
   This capability to migrate the function from the Terminal Bridges to the 
   PHB is made possible by the fact that the PCI-E provides IOA identification 
   information in each PCI-E transaction. 


8. how TCE and TVT is used?

