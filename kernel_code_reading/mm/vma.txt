1. General helpers
================================================================================

1.1 allocation/deallocation from vm_area_cachep(kmem_cache)
================================================================================
vm_area_alloc/vm_area_dup
vm_area_free

1.2 find_vma_links(), get the location to insert
================================================================================
after a successful search, it returns
  * prev, the prev vma
  * rb_link, exact pointer to put vma
  * rb_parent, vma's parent

1.3 vma_link(), insert a vma
================================================================================
need to rely on other helper like find_vma_links() to get the location

1.3.1 __vma_link()
================================================================================

1.3.1.1 __vma_link_list(), link to ordered list
================================================================================

1.3.1.2 __vma_link_rb(), link to rb tree (vm_mm->mm_rb)
================================================================================

1.3.2 __vma_link_file()
================================================================================

1.4 vma_rb_erase(), remove vma from rb tree
================================================================================

1.4.1 __vma_rb_erase()
================================================================================

1.5 split_vma(mm, vma, addr, new_below)
================================================================================

1.5.1 __split_vma()
================================================================================

1.5.1.1 vm_area_dup()
================================================================================

1.5.1.2 anon_vma_clone(), reverse mapping
================================================================================

1.5.1.3 vma_adjust()
================================================================================

1.6 vma_adjust()
================================================================================

1.6.1 __vma_adjust()
================================================================================

1.6.1.1 vma_adjust_trans_huge()
================================================================================

1.7 vma_merge()
================================================================================

1.7.1 can_vma_merge_after/before()
================================================================================

1.7.2 __vma_adjust()
================================================================================

2. old_mmap(), mmap syscall
================================================================================
ksys_mmap_pgoff()
    vm_mmap_pgoff()

2.1 vm_mmap_pgoff(file, addr, len, prot, flag, pgoff) 
================================================================================

2.1.1 security_mmap_file() 
================================================================================

2.1.2 do_mmap_pgoff()
================================================================================

2.1.2.1 do_mmap(file, addr, len, prot, flags, 0, pgoff, populate, uf)
================================================================================

2.1.3 mm_populate()
================================================================================

3. do_mmap() The caller must hold down_write(&current->mm->mmap_sem).
================================================================================

3.1 len = PAGE_ALIGN(len)
================================================================================

3.2 addr = get_unmapped_area(file, addr, len, pgoff, flags)
================================================================================

3.2.1 get_area, arch_get_unmapped_area_topdown
================================================================================

3.2.1.1 vm_unmapped_area()
================================================================================

3.3 if (offset_in_page(addr)) return
================================================================================

3.4 mmap_region()
================================================================================

3.4.1 call_mmap(file, vma)
================================================================================
; set vma->vm_ops, e.g. generic_file_vm_ops

4. do_munmap()
================================================================================
unmap range [start, start + len]

4.1 find_vma()
================================================================================

4.2 __split_vma()
================================================================================

4.3 detach_vmas_to_be_unmapped()
================================================================================

4.4 unmap_region()
================================================================================

4.4.1 lru_add_drain()
================================================================================

4.4.2 tlb_gather_mmu()
================================================================================

4.4.3 update_hiwater_rss()
================================================================================

4.4.4 unmap_vmas()
================================================================================

4.4.4.1 unmap_single_vma()
================================================================================

4.4.5 free_pgtables()
================================================================================

4.4.5.1 free_pgd_range()
================================================================================

4.4.6 tlb_finish_mmu()
================================================================================

4.5 arch_unmap()
================================================================================

4.6 remove_vma_list()
================================================================================

4.6.1 update_hiwater_vm()
================================================================================

4.6.2 vm_stat_account()
================================================================================

4.6.3 remove_vma()
================================================================================

4.6.4 vm_unacct_memory()
================================================================================

0. data structure
================================================================================

0.1 mm_struct
================================================================================

    mm_struct
    +--------------------------------+
    |pgd                             |
    |    (pgd_t *)                   |
    |                                |
    +--------------------------------+
    |map_count                       |    num of vmas
    |    (int)                       |
    |mm_rb                           |    rb_root of vmas
    |    (struct rb_root)            |
    |mmap                            |    the first vma
    |    (struct vm_area_struct*)    |
    |                                |
    +--------------------------------+
    |cpu_bitmap[]                    |
    |    (unsigned long)             |
    |tlb_flush_pending               |
    |    (atomic_t)                  |
    +--------------------------------+
    |start_code, end_code            |
    |start_data, end_data            |
    |start_brk, brk                  |    http://t.cn/RnaZRUv
    |start_stack                     |
    |                                |
    |highest_vm_end                  |    last vma end address
    |    (unsigned long)             |
    |                                |
    +--------------------------------+
    |rss_stat                        |
    |    (struct mm_rss_stat)        |
    |    +---------------------------+
    |    |count[NR_MM_COUNTERS]      | MM_FILEPAGES/ANONPAGES/SWAPENTS/SHMEMPAGES
    |    |    (atomic_long_t)        |
    |    +---------------------------+
    |                                |
    |                                |
    |                                |
    |                                |
    |                                |
    +--------------------------------+

0.2 vm_area_struct
================================================================================

    vm_area_struct
    +--------------------------------+
    |vm_mm                           |    the mm we belongs to
    |   (struct mm_struct *)         |
    +--------------------------------+
    |vm_rb                           |    vma rb tree node
    |   (struct rb_node)             |
    |vm_prev, vm_next                |    vma list in order
    |   (struct vm_area_struct*)     |    * no overlap to each other
    |                                |
    +--------------------------------+
    |vm_start, vm_end                |    the range we cover
    |   (unsigned long)              |
    |                                |
    |vm_pgoff                        |    offset in PAGE_SIZE
    |   (unsigned long)              |
    +--------------------------------+
    |rb_subtree_gap                  |    http://tinylab.org/rbtree-part1/
    |   (unsigned long)              |
    +--------------------------------+
    |vm_flags                        |    VM_READ/WRITE/EXEC
    |   (unsigned long)              |
    |vm_page_prot                    |    access PTE permission of this VMA calculated from vm_flags
    |   (pgprot_t)                   |    _PAGE_PRESENT/RW/ACCESSED/DIRTY
    |                                |
    +--------------------------------+
    |vm_file                         |
    |   (struct file*)               |
    |                                |
    |                                |
    |shared                          |
    |   +----------------------------+
    |   |rb                          |
    |   |    (struct rb_node)        |
    |   |rb_subtree_last             |
    |   |    (unsigned long)         |
    +---+----------------------------+
    |                                |
    |                                |
    |                                |
    +--------------------------------+
    |vm_policy                       |
    |   (struct mempolicy *)         |
    +--------------------------------+
