1. kswapd_init()
================================================================================
static int __init kswapd_init(void)
{
	int nid, ret;

	swap_setup();
	for_each_node_state(nid, N_MEMORY)
 		kswapd_run(nid);
	ret = cpuhp_setup_state_nocalls(CPUHP_AP_ONLINE_DYN,
					"mm/vmscan:online", kswapd_cpu_online,
					NULL);
	WARN_ON(ret < 0);
	return 0;
}

1.1 kswapd_run(), for each numa node
================================================================================
int kswapd_run(int nid)
{
	pg_data_t *pgdat = NODE_DATA(nid);
	int ret = 0;

	if (pgdat->kswapd)
		return 0;

	pgdat->kswapd = kthread_run(kswapd, pgdat, "kswapd%d", nid);
	if (IS_ERR(pgdat->kswapd)) {
		/* failure at boot is fatal */
		BUG_ON(system_state < SYSTEM_RUNNING);
		pr_err("Failed to start kswapd on node %d\n", nid);
		ret = PTR_ERR(pgdat->kswapd);
		pgdat->kswapd = NULL;
	}
	return ret;
}

1.2 kswapd_cpu_online(), set kswapd cpu affinity
================================================================================

2. kswapd()
================================================================================

2.1 kswapd_try_to_sleep()
================================================================================

2.1.1 prepare_to_wait()
================================================================================

2.1.2 prepare_kswapd_sleep()
================================================================================

2.1.3 finish_wait()
================================================================================

2.2 try_to_freeze()
================================================================================

2.3 fs_reclaim_acquire()
================================================================================

2.4 balance_pgdat()
================================================================================

2.5 fs_reclaim_release()
================================================================================

3. balance_pgdat()
================================================================================

3.1 pgdat_balanced(pgdat, sc.order, classzone_idx)
================================================================================

3.1.1 zone_watermark_ok_safe()
================================================================================

3.1.1.1 zone_page_state()
================================================================================

3.1.1.2 __zone_watermark_ok()
================================================================================

3.2 age_active_anon()
================================================================================

3.3 mem_cgroup_soft_limit_reclaim()
================================================================================

3.4 kswapd_shrink_node()
================================================================================

