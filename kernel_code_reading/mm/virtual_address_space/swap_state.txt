1. add_to_swap(struct page *page), called by shrink_list
================================================================================
1.1 entry = get_swap_page(page)
================================================================================
1.2 add_to_swap_cache(page, entry, )
================================================================================
1.2.1 address_space = swap_address_space(entry)
================================================================================
1.2.1.1 swapper_spaces[swp_type(entry)][swp_offset(entry) >> SWAP_ADDRESS_SPACE_SHIFT]
================================================================================
1.2.2 XA_STATE_ORDER(xas, &address_space->i_pages, idx, compound_order(page))
================================================================================
1.2.3 page_ref_add(page, nr)
================================================================================
1.2.4 SetPageSwapCache(page)
================================================================================
1.2.5 set_page_private(page + i, entry.val + i)
================================================================================
1.2.6 xas_store(&xas, page)
================================================================================
1.2.7 return 0
================================================================================
1.3 set_page_dirty(page)
================================================================================
1.4 return 1, successfully added to swap
================================================================================

1. pageout(struct page *page, struct address_space *mapping), called by shrink_list
================================================================================
1.1 mapping->a_ops->writepage(page, &wbc), a_ops = swap_aops for swap
================================================================================
