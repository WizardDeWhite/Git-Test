1. vma General helpers
================================================================================

1.1 allocation/deallocation from vm_area_cachep(kmem_cache)
================================================================================
vm_area_alloc/vm_area_dup
vm_area_free

1.2 find_vma_links(), get the location to insert
================================================================================
after a successful search, it returns
  * prev, the prev vma
  * rb_link, exact pointer to put vma
  * rb_parent, vma's parent

1.3 vma_link(), insert a vma
================================================================================
need to rely on other helper like find_vma_links() to get the location

1.3.1 __vma_link()
================================================================================

1.3.1.1 __vma_link_list(), link to ordered list
================================================================================

1.3.1.2 __vma_link_rb(), link to rb tree (vm_mm->mm_rb)
================================================================================

1.3.2 __vma_link_file()
================================================================================

1.4 vma_rb_erase(), remove vma from rb tree
================================================================================

1.4.1 __vma_rb_erase()
================================================================================

1.5 split_vma(mm, vma, addr, new_below)
================================================================================

1.5.1 __split_vma()
================================================================================

1.5.1.1 vm_area_dup()
================================================================================

1.5.1.2 anon_vma_clone(), reverse mapping
================================================================================

1.5.1.3 vma_adjust()
================================================================================

1.6 vma_adjust()
================================================================================

1.6.1 __vma_adjust()
================================================================================

1.6.1.1 vma_adjust_trans_huge()
================================================================================

1.7 vma_merge()
================================================================================

1.7.1 can_vma_merge_after/before()
================================================================================

1.7.2 __vma_adjust()
================================================================================

1.8 find_vma/_prev()
================================================================================
; search the rb_tree

1.9 __vma_link_rb(mm, vma)
================================================================================
1.9.1 vma_gap_update(vma->vm_next)
================================================================================
1.9.2 mm->highest_vm_end = vm_end_gap(vma)
================================================================================
1.9.3 vma_gap_update(vma), calculate vma->rb_subtree_gap and propagate it
================================================================================
1.9.3.1 vma_gap_callbacks_propagate(&vma->vm_rb, NULL); propagate rb_subtree_gap up the rb_tree
================================================================================

2. anon_vma / rmap helper
================================================================================
What is rmap:

The solution to these problems is reverse mapping, the creation of a data
structure which, given a physical page, can return a list of PTEs which point
to that page.

These Reference helps to understand how rmap evolves

rmap chain http://lwn.net/2002/0124/kernel.php3
The object-based reverse-mapping VM https://lwn.net/Articles/23732/
Virtual Memory II: the return of objrmap  https://lwn.net/Articles/75198/
The case of the overly anonymous anon_vma https://lwn.net/Articles/383162/

2.1 anon_vma_alloc
================================================================================

2.2 anon_vma_chain_alloc
================================================================================

2.2 __anon_vma_prepare
================================================================================

2.2.1 anon_vma_chain_alloc
================================================================================

2.2.2 find_mergeable_anon_vma
================================================================================

2.2.3 anon_vma_alloc
================================================================================

2.2.4 anon_vma_chain_link
================================================================================

2.2.4.1 avc->vma = vma
================================================================================

2.2.4.2 avc->anon_vma = anon_vma
================================================================================

2.2.4.3 list_add(&avc->same_vma, &vma->anon_vma_chain)
================================================================================

2.2.4.4 anon_vma_interval_tree_insert(avc, &anon_vma->rb_root);
================================================================================

2.3 anon_vma_clone(dst, src)
================================================================================

2.3.1 list_for_each_entry_reverse(pavc, &src->anon_vma_chain, same_vma)
================================================================================

2.3.2 anon_vma_chain_alloc()
================================================================================

2.3.3 anon_vma = pavc->anon_vma
================================================================================

2.3.4 root = lock_anon_vma_root(root, anon_vma)
================================================================================

2.3.5 anon_vma_chain_link(dst, avc, anon_vma)
================================================================================

2.3.6 dst->anon_vma = anon_vma
================================================================================

2.3.7 unlock_anon_vma_root(root)
================================================================================

2.4 anon_vma_fork(vma, pvma), called from dup_mmap
================================================================================

2.4.1 vma->anon_vma = NULL
================================================================================

2.4.2 anon_vma_clone(vma, pvma)
================================================================================

2.4.3 anon_vma = anon_vma_alloc()
================================================================================

2.4.3.1 anon_vma->degree = 1
================================================================================

2.4.3.2 anon_vma->parent = anon_vma
================================================================================

2.4.3.3 anon_vma->root = anon_vma
================================================================================

2.4.4 anon_vma_chain_alloc()
================================================================================

2.4.5 anon_vma->root = pvma->anon_vma->root
================================================================================

2.4.6 anon_vma->parent = pvma->anon_vma
================================================================================

2.4.7 get_anon_vma(anon_vma->root)
================================================================================

2.4.7.1 atomic_inc(&anon_vma->root->refcount);
================================================================================

2.4.8 vma->anon_vma = anon_vma
================================================================================

2.4.9 anon_vma_lock_write(anon_vma)
================================================================================

2.4.9.1 down_write(&anon_vma->root->rwsem);
================================================================================

2.4.10 anon_vma_chain_link(vam, avc, anon_vma)
================================================================================

2.4.11 anon_vma->parent->degree++
================================================================================

2.5 page_anon_vma(page), get anon_vma related to a page
================================================================================

2.5.1 page = compound_head(page)
================================================================================

2.5.2 __page_rmapping(page)
================================================================================

2.6 rmap_walk_anon(page, ), iterate anon_vma->rb_root for rmap
================================================================================

2.6.1 anon_vma = page_anon_vma(page)
================================================================================

2.6.2 start = page_to_pgoff(page)
================================================================================

2.6.2.1 return page->index
================================================================================

2.6.3 end = start + hpage_nr_pages(page) - 1
================================================================================

2.6.4 anon_vma_interval_tree_foreach(avc, &anon_vma->rb_root, start, end)
================================================================================

4. do_munmap() -> __do_munmap(mm, start, len, )
================================================================================
unmap range [start, start + len]

4.1 find_vma(mm, start)
================================================================================
4.2 __split_vma()
================================================================================
4.3 detach_vmas_to_be_unmapped(), isolate related vma
================================================================================

4.4 unmap_region(mm, vma, prev, start, end), release page table
================================================================================
4.4.1 lru_add_drain()
================================================================================
4.4.2 tlb_gather_mmu()
================================================================================
4.4.3 update_hiwater_rss()
================================================================================
4.4.4 unmap_vmas(vma, start, end), free real page
================================================================================
4.4.4.1 unmap_single_vma() -> zap_pte_range()
================================================================================
4.4.5 free_pgtables(), free page table page
================================================================================
4.4.5.1 free_pgd_range()
================================================================================
4.4.6 tlb_finish_mmu()
================================================================================

4.5 arch_unmap()
================================================================================
4.6 remove_vma_list()
================================================================================
4.6.1 update_hiwater_vm()
================================================================================
4.6.2 vm_stat_account()
================================================================================
4.6.3 remove_vma()
================================================================================
4.6.4 vm_unacct_memory()
================================================================================

0. data structure
================================================================================

0.1 mm_struct
================================================================================

    mm_struct
    +--------------------------------+
    |pgd                             |
    |    (pgd_t *)                   |
    |                                |
    +--------------------------------+
    |map_count                       |    num of vmas
    |    (int)                       |
    |mm_rb                           |    rb_root of vmas
    |    (struct rb_root)            |
    |mmap                            |    the first vma
    |    (struct vm_area_struct*)    |
    |                                |
    +--------------------------------+
    |cpu_bitmap[]                    |
    |    (unsigned long)             |
    |tlb_flush_pending               |
    |    (atomic_t)                  |
    +--------------------------------+
    |start_code, end_code            |
    |start_data, end_data            |
    |start_brk, brk                  |    http://t.cn/RnaZRUv
    |start_stack                     |
    |                                |
    |highest_vm_end                  |    last vma end address
    |    (unsigned long)             |
    |                                |
    +--------------------------------+
    |rss_stat                        |
    |    (struct mm_rss_stat)        |
    |    +---------------------------+
    |    |count[NR_MM_COUNTERS]      | MM_FILEPAGES/ANONPAGES/SWAPENTS/SHMEMPAGES
    |    |    (atomic_long_t)        |
    |    +---------------------------+
    |                                |
    |                                |
    |                                |
    |                                |
    |                                |
    +--------------------------------+

0.2 vm_area_struct
================================================================================

    vm_area_struct
    +--------------------------------+
    |vm_mm                           |    the mm we belongs to
    |   (struct mm_struct *)         |
    +--------------------------------+
    |vm_rb                           |    vma rb tree node
    |   (struct rb_node)             |
    |vm_prev, vm_next                |    vma list in order
    |   (struct vm_area_struct*)     |    * no overlap to each other
    |                                |
    +--------------------------------+
    |vm_start, vm_end                |    the range we cover
    |   (unsigned long)              |
    |                                |
    |vm_pgoff                        |    offset in PAGE_SIZE
    |   (unsigned long)              |
    +--------------------------------+
    |rb_subtree_gap                  |    http://tinylab.org/rbtree-part1/
    |   (unsigned long)              |
    +--------------------------------+
    |vm_flags                        |    VM_READ/WRITE/EXEC
    |   (unsigned long)              |
    |vm_page_prot                    |    access PTE permission of this VMA calculated from vm_flags
    |   (pgprot_t)                   |    _PAGE_PRESENT/RW/ACCESSED/DIRTY
    |                                |
    +--------------------------------+
    |vm_file                         |
    |   (struct file*)               |
    |                                |
    |                                |
    |shared                          |
    |   +----------------------------+
    |   |rb                          |
    |   |    (struct rb_node)        |
    |   |rb_subtree_last             |
    |   |    (unsigned long)         |
    +---+----------------------------+
    |vm_policy                       |
    |   (struct mempolicy *)         |
    +--------------------------------+
    |anon_vma                        |    place to assign it:
    |   (struct anon_vma*)           |    anon_vma_clone, __anon_vma_prepare
    |                                |
    |anon_vma_chain                  |
    |   (sruct list_head)            |
    +--------------------------------+

0.3 anon_vma / anon_vma_chain
================================================================================

0.3.1 anon_vma
================================================================================

    anon_vma
    +--------------------------------+
    |root                            |   default to first anon_vma
    |parent                          |
    |    (struct anon_vma*)          |
    +--------------------------------+
    |rb_root                         |
    |    (struct rb_root_cached)     |
    |                                |
    +--------------------------------+
    |refcount                        |
    |degree                          |   default is 1
    |                                |
    |                                |
    +--------------------------------+


0.3.2 anon_vma_chain
================================================================================

    anon_vma_chain
    +--------------------------------+
    |cached_vma_start                |
    |cached_vma_last                 |
    |rb_subtree_last                 |
    |    (unsigned long)             |
    +--------------------------------+
    |anon_vma                        |
    |    (struct anon_vma*)          |
    +--------------------------------+
    |vma                             |
    |    (struct vm_area_struct*)    |
    +--------------------------------+
    |rb                              |
    |    (struct rb_node)            |
    +--------------------------------+
    |same_vma                        |
    |    (struct list_head)          |
    +--------------------------------+

0.3.3 anon_vma / anon_vma_chain / vm_area_struct
================================================================================

                                   anon_vma
                           +----------------------+
                           |                      |
                           |rb_root  -+-          |
                           +----------|-----------+
                                      |        ^
                                      |        |
                           anon_vma_chain      |   vm_area_struct
                           +----------|---+    |   +--------------+
                           |anon_vma    --|----+---|anon_vma      |
                           |vma         --|----|-->|              |
                           |rb       -+-  |    |   |              |
                           +----------+---+    |   +--------------+
                                      |        |
           -+-------------------------+--------|-----------+
            |                                  |           |
            |        +-------------------------+-----------|--------+
            |        |                                     |        |
 anon_vma_chain      |   vm_area_struct         anon_vma_chain      |   vm_area_struct
 +----------|---+    |   +--------------+       +----------|---+    |   +--------------+
 |rb            |        |              |       |rb            |        |              |
 |anon_vma    --|----+---|anon_vma      |       |anon_vma    --|----+---|anon_vma      |
 |vma         --|------->|              |       |vma         --|------->|              |
 +--------------+        +--------------+       +--------------+        +--------------+



      vm_area_struct
      +----------------+<-----+-----------------------+
      |anon_vma_chain  |      |                       |
      +----------------+      |                       |
         |                    |                       |
         |                    |                       |
         |    anon_vma_chain  |       anon_vma_chain  |
         |    +---------------|-+     +---------------|-+
         |    |vma          --+ |     |vma          --+ |
         +--->|same_vma         |<--->|same_vma         |
              |anon_vma     --+ |     |anon_vma     --+ |
              +---------------|-+     +---------------|-+
                              |                       |
                              |                       |
                              |                       |
              anon_vma        v       anon_vma        v
              +-----------------+     +-----------------+
              |                 |     |                 |
              +-----------------+     +-----------------+
