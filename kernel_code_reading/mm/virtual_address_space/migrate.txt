1. move_pages, syscall
================================================================================
1.1 kernel_move_pages()
================================================================================
1.1.1 task = find_task_by_vpid()
================================================================================
1.1.2 get_task_struct(stask)
================================================================================
1.1.3 mm = get_task_mm(task)
================================================================================
1.1.4 put_task_struct(task)
================================================================================
1.1.5 do_pages_move, move page
================================================================================
1.1.6 do_pages_stat, get status
================================================================================
1.1.7 mmput(mm)
================================================================================

2. do_pages_stat -> do_pages_stat_array()
================================================================================
2.1 vma = find_vma()
================================================================================
2.2 page = follow_page(, FOLL_DUMP)
================================================================================
2.3 page_to_nid
================================================================================

3. do_pages_move
================================================================================
3.1 add_page_for_migration(pagelist)
================================================================================
3.1.1 vma = find_vma(addr)
================================================================================
3.1.2 page = follow_page(vma, addr)
================================================================================
3.1.3 head = compound_head(page)
================================================================================
3.1.4 isolate_lru_page(head), remove the page from lru list
================================================================================
3.1.5 list_add_tail(&head->lru, pagelist)
================================================================================
3.2 do_move_pages_to_node(pagelist, current_node)
================================================================================
3.2.1 migrate_pages(pagelist, alloc_new_node_page, NULL, node, )
================================================================================
3.2.1.1 list_for_each_entry_safe(page, page2, from, lru)
================================================================================
3.2.1.2 unmap_and_move_huge_page(alloc_new_node_page, NULL, page, ), one page
================================================================================
3.2.1.3 unmap_and_move(alloc_new_node_page, NULL, page, ), one page
================================================================================
3.2.2 putback_movable_pages(pagelist)
================================================================================
3.3 store_status(status, i, current_node, nr), save status to user space
================================================================================


4. unmap_and_move(get_new_page, put_new_page, page, ), handle non-PageHuge
================================================================================
4.1 newpage = get_new_page(page, ), get newpage based on page's node
================================================================================
4.2 __unmap_and_move(page, newpage, force, mode), real work
================================================================================
4.2.0 bool is_lru = !__PageMovable(page);
================================================================================
4.2.1 trylock_page(page) / lock_page(page)
================================================================================
4.2.2 wait_on_page_writeback(page) if PageWriteback(page)
================================================================================
4.2.3 trylock_page(newpage)
================================================================================
4.2.1 try_to_unmap(page, TTU_MIGRATION), set PTE to migration entry
================================================================================
4.2.2 move_to_new_page(newpage, page, mode), move meta data & data to newpage
================================================================================
4.2.2.1 rc = migrate_page(mapping, newpage, page, mode)
================================================================================
4.2.2.2 rc = mapping->a_ops->migratepage(mapping, newpage, page, mode)
================================================================================
4.2.3 remove_migration_ptes(page, newpage), restore PTE with newpage
================================================================================
4.2.4 unlock_page(newpage)
================================================================================
4.2.5 unlock_page(page), notify put_and_wait_on_page_locked()
================================================================================


5. migrate_page(mapping, newpage, page, mode)
================================================================================
5.1 migrate_page_move_mapping(mapping, newpage, page, 0)
================================================================================
5.1.1 expected_count = expected_page_refs(mapping, page) + extra_count;
================================================================================
5.1.2 newpage->index = page->index
================================================================================
5.1.3 newpage->mapping = page->mapping
================================================================================
5.2 migrate_page_copy(), copy content and metadata
================================================================================
5.2.1 copy_huge_page()
================================================================================
5.2.2 copy_highpage()
================================================================================
5.2.3 migrate_page_states()
================================================================================

6. migration_entry_wait(mm, pmd, address)
================================================================================
6.1 ptl = pte_lockptr(mm, pmd)
================================================================================
6.2 ptep = pte_offset_map(pmd, address)
================================================================================
6.3 __migration_entry_wait(mm, ptep, ptl)
================================================================================
6.3.1 spin_lock(ptl)
================================================================================
6.3.2 pte = *ptep
================================================================================
6.3.3 !is_swap_pte(pte)
================================================================================
6.3.4 entry = pte_to_swp_entry(pte)
================================================================================
6.3.5 !is_migration_entry(entry)
================================================================================
6.3.6 page = migration_entry_to_page(entry)
================================================================================
6.3.7 get_page_unless_zero(page)
================================================================================
6.3.8 pte_unmap_unlock(ptep, ptl)
================================================================================
6.3.9 put_and_wait_on_page_locked(page), page locked in __unmap_and_move()
================================================================================
