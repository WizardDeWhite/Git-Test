1. net_tx_action(), working thread for xmit packet
================================================================================
; completion_queue is a list for sk_buff, which is queued in
; dev_kfree_skb_irq() in irq context
1.1 sd = this_cpu_ptr(&softnet_data)
================================================================================
1.2 clist = sd->completion_queue, free the completion_queue
================================================================================
1.3 __kfree_skb()
================================================================================
1.4 __kfree_skb_flush()
================================================================================
1.5 head = sd->output_queue, adjust by __netif_reschedule(q)
================================================================================
1.5 q = head
================================================================================
1.6 qdisc_run(q), process the output_queue
================================================================================
1.6.1 qdisc_run_begin(q)
================================================================================
1.6.2 __qdisc_run(q)
================================================================================
1.6.2.1 qdisc_restart(q, &packets)
================================================================================
1.6.2.2 __netif_schedule(q), queue myself to sd->output_queue again
================================================================================
1.6.3 qdisc_run_end(q)
================================================================================
1.7 xfrm_dev_backlog(ds)
================================================================================

2. qdisc_restart(q, packets)
================================================================================
2.1 skb = dequeue_skb(q, &validate, packets)
================================================================================
2.1.1 skb = q->dequeue(q)
================================================================================
2.1.2 try_bulk_dequeue_skb(q, skb, txq, packets)
================================================================================
2.2 dev = qdisc_dev(q)
================================================================================
2.3 txq = skb_get_tx_queue(dev, skb);
================================================================================
2.4 sch_direct_xmit(skb, q, dev, txq, )
================================================================================
2.4.1 skb = validate_xmit_skb_list(skb, dev, )
================================================================================
2.4.2 skb = dev_hard_start_xmit(skb, dev, txq, )
================================================================================

3. dev_queue_xmit(skb) -> __dev_queue_xmit(skb, NULL), queue a buffer for transmission to netdev
================================================================================
3.1 dev = skb->dev
================================================================================
3.2 skb_reset_mac_header(skb)
================================================================================
3.3 skb_update_prio(skb)
================================================================================
3.4 qdisc_pkt_len_init(skb), calculate qdisc->pkt_len
================================================================================
3.5 skb_dst_drop(skb)
================================================================================
3.5 skb_dst_force(skb)
================================================================================
3.6 txq = netdev_core_pick_tx(dev, skb, sb_dev)
================================================================================
3.6.1 skb_set_queue_mapping(skb, queue_index)
================================================================================
3.6.2 return netdev_get_tx_queue(dev, queue_index)
================================================================================
3.6.2.1 return &dev->_tx[index]
================================================================================
3.7 q = rcu_dereference(txq->qdisc)
================================================================================
3.8 __dev_xmit_skb(skb, q, dev, txq), enqueue and leverage qdisc
================================================================================
3.8.1 q->enqueue(skb, q)
================================================================================
3.9 skb = validate_xmit_skb(skb, dev, &gain)
================================================================================
3.10 skb = dev_hard_start_xmit(skb, dev, txq, &rc), hand over to driver
================================================================================

4. dev_hard_start_xmit(first, dev, txq, ret)
================================================================================
4.1 xmit_one(skb, dev, txq, more)
================================================================================
4.1.1 netdev_start_xmit(skb, dev, txq, more) -> __netdev_start_xmit(ops, skb, dev, more)
================================================================================
4.1.1.1 return ops->ndo_start_xmit(skb, dev), driver takes it
================================================================================

0. Call flow
================================================================================

    dev_queue_xmit()
        txq = netdev_core_pick_tx(dev, skb, sb_dev);
        q = rcu_dereference_bh(txq->qdisc);
        __dev_xmit_skb(skb, q, dev)
            q->enqueue(skb, q, )
            __qdisc_run(q)
                __netif_schedule(q), queue to softnet_data

                |
                v

    net_tx_action()

                |
                v

    dev_hard_start_xmit(skb, dev, txq)

                |
                v

    dev->netdev_ops->ndo_start_xmit(skb, dev), driver handle it

0. Reference
================================================================================
https://segmentfault.com/a/1190000008926093


0.1 Packet xmit through driver
================================================================================

                          |
                          |
                          ↓
                   +----------------+
  +----------------| dev_queue_xmit |
  |                +----------------+
  |                       |
  |                       |
  |                       ↓
  |              +-----------------+
  |              | Traffic Control |
  |              +-----------------+
  | loopback              |
  |   or                  +--------------------------------------------------------------+
  | IP tunnels            ↓                                                              |
  |                       ↓                                                              |
  |            +---------------------+  Failed   +----------------------+         +---------------+
  +----------->| dev_hard_start_xmit |---------->| raise NET_TX_SOFTIRQ |- - - - >| net_tx_action |
               +---------------------+           +----------------------+         +---------------+
                          |
                          +----------------------------------+
                          |                                  |
                          ↓                                  ↓
                  +----------------+              +------------------------+
                  | ndo_start_xmit |              | packet taps(AF_PACKET) |
                  +----------------+              +------------------------+
