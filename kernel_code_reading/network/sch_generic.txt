1. netif_carrier_on(), mark state on, trigger linkwatch event
================================================================================
void netif_carrier_on(struct net_device *dev)
{
	if (test_and_clear_bit(__LINK_STATE_NOCARRIER, &dev->state)) {
		if (dev->reg_state == NETREG_UNINITIALIZED)
			return;
		linkwatch_fire_event(dev);
		if (netif_running(dev))
			__netdev_watchdog_up(dev);
	}
}

2. netif_carrier_off(), mark state off, trigger linkwatch event
================================================================================
void netif_carrier_off(struct net_device *dev)
{
	if (!test_and_set_bit(__LINK_STATE_NOCARRIER, &dev->state)) {
		if (dev->reg_state == NETREG_UNINITIALIZED)
			return;
		linkwatch_fire_event(dev);
	}
}

3. dev_activate(dev), magic!, invoked through netif_carrier_on()
================================================================================
3.1 attach_default_qdiscs(dev), create qdisc multi-queue/non-multi-queue
================================================================================
3.1.1 txq = netdev_get_tx_queue(dev, 0)
================================================================================
3.1.2 qdisc = qdisc_create_dflt(txq, &mq_qdisc_ops, TC_H_ROOT, NULL)
================================================================================
3.1.2.1 sch = qdisc_alloc(dev_queue, &mq_qdisc_ops, )
================================================================================
3.1.2.2 mq_qdisc_ops->init(sch, NULL, )
================================================================================
3.1.2.3 return sch
================================================================================
3.1.3 dev->qdisc = qdisc
================================================================================
3.1.4 qdisc->ops->attach(qdisc)
================================================================================
3.2 transition_one_qdisc(), dev_queue->qdisc = qdisc_sleeping
================================================================================
3.3 dev_watchdog_up(), start the dev->watchdog_timer
================================================================================
; watchdog_timer is init in dev_init_scheduler() during register_netdevice()
3.3.1 dev_watchdog(), check tx_queue periodicly
================================================================================
; the watchdog timer is set in dev_init_scheduler() when register_netdevice().

4. dev_deactivate()
================================================================================
4.1 dev_deactivate_many()
================================================================================
4.1.1 dev_deactivate_queue(), deactive each tx queue
================================================================================
4.1.1.1 qdisc_reset()
================================================================================
4.1.2 dev_watchdog_down(), remove watchdog_timer
================================================================================
4.1.3 synchronize_net()
================================================================================

3. qdisc_create_dflt(), create qdisc to a dev_queue with ops
================================================================================
struct Qdisc *qdisc_create_dflt(struct netdev_queue *dev_queue,
				const struct Qdisc_ops *ops,
				unsigned int parentid)
{
	struct Qdisc *sch;

	if (!try_module_get(ops->owner))
		goto errout;

	sch = qdisc_alloc(dev_queue, ops);
	if (IS_ERR(sch))
		goto errout;
	sch->parent = parentid;

	if (!ops->init || ops->init(sch, NULL) == 0)
		return sch;

	qdisc_destroy(sch);
errout:
	return NULL;
}

3.1 qdisc_alloc()
================================================================================
struct Qdisc *qdisc_alloc(struct netdev_queue *dev_queue,
			  const struct Qdisc_ops *ops)
{
	void *p;
	struct Qdisc *sch;
	unsigned int size = QDISC_ALIGN(sizeof(*sch)) + ops->priv_size;
	int err = -ENOBUFS;
	struct net_device *dev = dev_queue->dev;

	p = kzalloc_node(size, GFP_KERNEL,
			 netdev_queue_numa_node_read(dev_queue));

	if (!p)
		goto errout;
	sch = (struct Qdisc *) QDISC_ALIGN((unsigned long) p);
	/* if we got non aligned memory, ask more and do alignment ourself */
	if (sch != p) {
		kfree(p);
		p = kzalloc_node(size + QDISC_ALIGNTO - 1, GFP_KERNEL,
				 netdev_queue_numa_node_read(dev_queue));
		if (!p)
			goto errout;
		sch = (struct Qdisc *) QDISC_ALIGN((unsigned long) p);
		sch->padded = (char *) sch - (char *) p;
	}
	INIT_LIST_HEAD(&sch->list);
	skb_queue_head_init(&sch->q);

	spin_lock_init(&sch->busylock);
	lockdep_set_class(&sch->busylock,
			  dev->qdisc_tx_busylock ?: &qdisc_tx_busylock);

	sch->ops = ops;
	sch->enqueue = ops->enqueue;
	sch->dequeue = ops->dequeue;
	sch->dev_queue = dev_queue;
	dev_hold(dev);
	atomic_set(&sch->refcnt, 1);

	return sch;
errout:
	return ERR_PTR(err);
}

3.1 ops->init(), pfifo_fast_init
================================================================================
; the default ops

struct Qdisc_ops pfifo_fast_ops __read_mostly = {
	.id		=	"pfifo_fast",
	.priv_size	=	sizeof(struct pfifo_fast_priv),
	.enqueue	=	pfifo_fast_enqueue,
	.dequeue	=	pfifo_fast_dequeue,
	.peek		=	pfifo_fast_peek,
	.init		=	pfifo_fast_init,
	.reset		=	pfifo_fast_reset,
	.dump		=	pfifo_fast_dump,
	.owner		=	THIS_MODULE,
};

static int pfifo_fast_init(struct Qdisc *qdisc, struct nlattr *opt)
{
	int prio;
	struct pfifo_fast_priv *priv = qdisc_priv(qdisc);

	for (prio = 0; prio < PFIFO_FAST_BANDS; prio++)
		skb_queue_head_init(band2list(priv, prio));

	/* Can by-pass the queue discipline */
	qdisc->flags |= TCQ_F_CAN_BYPASS;
	return 0;
}

4. qdisc_destroy()
================================================================================
void qdisc_destroy(struct Qdisc *qdisc)
{
	const struct Qdisc_ops  *ops = qdisc->ops;

	if (qdisc->flags & TCQ_F_BUILTIN ||
	    !atomic_dec_and_test(&qdisc->refcnt))
		return;

#ifdef CONFIG_NET_SCHED
	qdisc_list_del(qdisc);

	qdisc_put_stab(rtnl_dereference(qdisc->stab));
#endif
	gen_kill_estimator(&qdisc->bstats, &qdisc->rate_est);
	if (ops->reset)
		ops->reset(qdisc);
	if (ops->destroy)
		ops->destroy(qdisc);

	module_put(ops->owner);
	dev_put(qdisc_dev(qdisc));

	kfree_skb(qdisc->gso_skb);
	/*
	 * gen_estimator est_timer() might access qdisc->q.lock,
	 * wait a RCU grace period before freeing qdisc.
	 */
	call_rcu(&qdisc->rcu_head, qdisc_rcu_free);
}

4.1 gen_kill_estimator(), remove the gen_estimator from rb tree
================================================================================
void gen_kill_estimator(struct gnet_stats_basic_packed *bstats,
			struct gnet_stats_rate_est64 *rate_est)
{
	struct gen_estimator *e;

	spin_lock_bh(&est_tree_lock);
	while ((e = gen_find_node(bstats, rate_est))) {
		rb_erase(&e->node, &est_root);

		write_lock(&est_lock);
		e->bstats = NULL;
		write_unlock(&est_lock);

		list_del_rcu(&e->list);
		kfree_rcu(e, e_rcu);
	}
	spin_unlock_bh(&est_tree_lock);
}

4.1.1 gen_find_node(), search the est_root rb tree for bstats
================================================================================
struct gen_estimator *gen_find_node(const struct gnet_stats_basic_packed *bstats,
				    const struct gnet_stats_rate_est64 *rate_est)
{
	struct rb_node *p = est_root.rb_node;

	while (p) {
		struct gen_estimator *e;

		e = rb_entry(p, struct gen_estimator, node);

		if (bstats > e->bstats)
			p = p->rb_right;
		else if (bstats < e->bstats || rate_est != e->rate_est)
			p = p->rb_left;
		else
			return e;
	}
	return NULL;
}

4.2 ops->reset(), pfifo_fast_reset
================================================================================

4.3 ops->destroy(), NULL for 
================================================================================

4.4 qdisc_rcu_free(), release the qdisc
================================================================================
static void qdisc_rcu_free(struct rcu_head *head)
{
	struct Qdisc *qdisc = container_of(head, struct Qdisc, rcu_head);

	kfree((char *) qdisc - qdisc->padded);
}

0. data structure
================================================================================

0.1 Qdisc
================================================================================

                        Qdisc
                        +-----------------+
                        |                 |
                        |                 |
                        +-----------------+
                                ^
                                |
                                |
   Qdisc                        |
   +-------------------------+  |
   |__parent                 | -+
   |   (struct Qdisc *)      |           Qdisc                         Qdisc
   +-------------------------+           +-----------------+           +-----------------+
   |next_sched               | --------->|                 | --------->|                 |
   |   (struct Qdisc *)      |           |                 |           |                 |
   +-------------------------+           +-----------------+           +-----------------+
   |refcnt                   |
   |   (atomic_t)            |           Qdisc_ops
   +-------------------------+           +----------------------------+    
   |ops                      | --------->|                            |
   |   (struct Qdisc_ops)    |           |                            |
   +-------------------------+           |                            |
   |enqueue                  |           |                            |
   |                         |           |                            |
   +-------------------------+           |                            |
   |dequeue                  |           |                            |
   |                         |           |                            |
   +-------------------------+           |                            |
   |dev_queue                |           |                            |
   |   (struct netdev_queue*)|           |                            |
   +-------------------------+           |                            |
   |bstats                   |           |                            |
   |(gnet_stats_basic_packed)|           |                            |
   |   bytes                 |           +----------------------------+
   |     (__u64)             |
   |   packets               |
   |     (__u32)             |
   +-------------------------+
   |rate_est                 |
   |(gnet_stats_rate_est64)  |
   |   bps                   |
   |     (__u64)             |
   |   pps                   |
   |     (__u64)             |
   +-------------------------+
   |                         |
   |                         |
   +-------------------------+



0.2 netdev_queue, one queue
================================================================================
    net_device
    +-----------------------+ <----------------------------------+
    |ingress_queue          |                                    |
    | (struct netdev_queue*)|                                    |
    +-----------------------+                                    |
    |_tx[]                  |--+                                 |
    | (struct netdev_queue*)|  |                                 |
    +-----------------------+  |                                 |
    |                       |  |                                 |                                  
    |                       |  |  netdev_queue[0]                |                                  
    |                       |  |  +--------------------------+<--|----------------------------------+
    |                       |  +->|dev                       | --+                                  |
    |                       |     |   (struct net_device*)   |                                      |
    +-----------------------+     +--------------------------+                                      |
    |qdisc                  |\    |qdisc                     |                                      |
    |                       | \   |   (struct Qdisc*)        |         Qdisc                        |
    |                       |  \  +--------------------------+         +-----------------------+    |
    +-----------------------+   +>|qdisc_sleeping            |-------->|dev_queue              |----+
                                  |   (struct Qdisc*)        |         | (struct netdev_queue) |
                                  +--------------------------+         +-----------------------+


a. netdev_queue->qdisc and qdisc_sleeping are both init to &noop_qdisc
   in dev_ingress_queue_create()




0.3 netdev_queue, multi queue
================================================================================
    net_device
    +-----------------------+ <----------------------------------------------------------------------+
    |ingress_queue          |                                                                        |
    | (struct netdev_queue*)|                                                                        |
    +-----------------------+                                                                        |
    |_tx[]                  | -------------------------------------+                                 |
    | (struct netdev_queue*)|       Qdisc                          |                                 |
    +-----------------------+      +-----------------------+       |                                 |
    |qdisc                  | ---->|dev_queue              |---+   |                                 |                                  
    |                       |      |                       |   |   |  netdev_queue[0]                |   
    |                       |      +-----------------------+   |   |  +--------------------------+   |
    |                       |    priv                          +---+->|dev                       | --+
    |                       |      Qdisc[]                     |      |   (struct net_device*)   |    
    +-----------------------+      +-----------------------+   |      +--------------------------+    
    |                       |      |dev_queue              |---+      |qdisc                     |    
    |                       |      |                       |          |   (struct Qdisc*)        |    
    |                       |      +-----------------------+ <----+   +--------------------------+    
    +-----------------------+                                     +---|qdisc_sleeping            |
                                                                      |   (struct Qdisc*)        |    
                                                                      +--------------------------+    
			                                                         ....                 
			           Qdisc[]                            netdev_queue[1]                 
                                   +-----------------------+          +--------------------------+    
                                   |dev_queue              |--------->|                          |
                                   |                       |          |                          |
                                   +-----------------------+ <---+    +--------------------------+
                                                                 |    |qdisc                     |
                                                                 |    | (struct Qdisc *)         |
                                                                 |    +--------------------------+
                                                                 +----|qdisc_sleeping            |
                                                                      | (struct Qdisc *)         |
                                                                      +--------------------------+
