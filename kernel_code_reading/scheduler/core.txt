1. sched_init(), called by start_kernel()
================================================================================
1.1 wait_bit_init()
================================================================================
1.1.1 init_waitqueue_head(bit_wait_table + i), init bit_wait_table[]
================================================================================
1.2 init_rt_bandwidth(&def_rt_bandwidth, global_rt_period(), global_rt_runtime());
================================================================================
1.3 init_dl_bandwidth(&def_dl_bandwidth, global_rt_period(), global_rt_runtime());
================================================================================
1.4 init_defrootdomain()
================================================================================
1.4.1 init_rootdomain(&def_root_domain)
================================================================================
1.4.1.1 init_dl_bw(&def_root_domain.dl_bw)
================================================================================
1.4.1.2 cpudl_init(&def_root_domain.cpudl)
================================================================================
1.4.1.3 cpupri_init(&def_root_domain.cpupri), pri_to_cpu/cpu_to_pri dictionary
================================================================================
1.5 autogroup_init(&init_task)
================================================================================
1.6 for_each_possible_cpu(i)
================================================================================
1.6 init_cfs_rq(&rq->cfs)
================================================================================
1.6 init_rt_rq(&rq->rt)
================================================================================
1.6 init_dl_rq(&rq->dl)
================================================================================
1.7 init_tg_cfs_entry(&root_task_group, &rq->cfs, NULL, i, NULL)
================================================================================
1.7.1 init_cfs_rq_runtime(&rq->cfs)
================================================================================
1.8 rq_attach_root(rq, &def_root_domain)
================================================================================
1.9 hrtick_rq_init(rq)
================================================================================
1.10 set_load_weight(&init_task, false)
================================================================================
1.11 init_idle(current, smp_processor_id())
================================================================================
1.11.1 __sched_fork(0, current)
================================================================================
1.11.2 current->se.exec_start = sched_clock()
================================================================================
1.11.3 __set_task_cpu(current, cpu)
================================================================================
1.11.4 init_idle_preempt_count(current, cpu)
================================================================================
1.11.5 vtime_init_idle(current, cpu)
================================================================================
1.12 idle_thread_set_boot_cpu()
================================================================================
1.13 init_sched_fair_class()
================================================================================
1.13.1 open_softirq(SCHED_SOFTIRQ, run_rebalance_domains);
================================================================================
1.14 init_schedstats()
================================================================================
1.14.1 set_schedstats(__sched_schedstats);
================================================================================
1.15 psi_init()
================================================================================
1.16 init_uclamp()
================================================================================
1.17 scheduler_running = 1
================================================================================

2. scheduler_tick(), timer scheduler
================================================================================
2.1 struct rq *rq = cpu_rq(cpu);
================================================================================
2.2 update_rq_clock(rq)
================================================================================
2.2.1 delta = sched_clock_cpu(cpu_of(rq)) - rq->clock, time in nanoseconds
================================================================================
2.2.2 rq->clock += delta;
================================================================================
2.2.3 update_rq_clock_task(rq, delta)
================================================================================
2.3 curr->sched_class->task_tick(rq, curr, 0);
================================================================================
2.4 calc_global_load_tick(rq)
================================================================================
2.4.1 delta = calc_load_fold_active(rq, 0)
================================================================================
2.4.2 atomic_long_add(delta, &calc_load_tasks);
================================================================================


2. __schedule(preempt), main scheduler function, its comments is good to read
================================================================================
2.1 rq = cpu_rq()
================================================================================
2.2 prev = rq->curr
================================================================================
2.3 local_irq_disable()
================================================================================
2.4 rcu_note_context_switch(preempt)
================================================================================
2.5 rq->clock_update_flags <<= 1
================================================================================
2.6 update_rq_clock(rq)
================================================================================
2.7 next = pick_next_task(rq, prev, &rf), pick up the highest-prio task
================================================================================
2.7.1 for_class_range(class, prev->sched_class, &idle_sched_class)
================================================================================
2.7.2 class->balance(rq, prev, rf)
================================================================================
2.7.3 put_prev_task(rq, prev)
================================================================================
2.7.3.1 prev->sched_class->put_prev_task(rq, prev);
================================================================================
2.7.4 for_each_class(class)
================================================================================
2.7.5 class->pick_next_task(rq)
================================================================================
2.8 clear_tsk_need_resched(prev);
================================================================================
2.9 clear_preempt_need_resched();
================================================================================
2.9.1 raw_cpu_or_4(__preempt_count, PREEMPT_NEED_RESCHED);
================================================================================
2.10 RCU_INIT_POINTER(rq->curr, next)
================================================================================
2.11 rq = context_switch(rq, prev, next, &rf)
================================================================================
2.12 balance_callback(rq)
================================================================================

2.1 pick_next_task()
================================================================================
static inline struct task_struct *
pick_next_task(struct rq *rq, struct task_struct *prev)

2.2 context_switch()
================================================================================
static inline void
context_switch(struct rq *rq, struct task_struct *prev,
	       struct task_struct *next)

2.3 post_schedule()
================================================================================

0. data structure
================================================================================

0.1 task_group
================================================================================

    struct task_group
    +---------------------------------+
    |parent                           |
    |   (struct task_group*)          |
    |siblings                         |
    |children                         |
    |   (struct list_head)            |
    |list                             |  link to task_groups
    |   (struct list_head)            |
    |                                 |
    |cfs_bandwidth                    |
    |   (struct cfs_bandwidth)        |
    |   +-----------------------------+
    |   |period                       |  default 0.1s
    |   |    (ktime_t)                |
    |   |quota                        |  = RUNTIME_INF
    |   |runtime                      |  = 0
    |   |    (u64)                    |
    |   |hierarchical_quota           |
    |   |    (s64)                    |
    |   |idle                         |
    |   |period_active                |
    |   |distribute_running           |
    |   |slack_started                |
    |   |    (u8)                     |
    |   |period_timer                 |  = sched_cfs_period_timer
    |   |slack_timer                  |  = sched_cfs_slack_timer
    |   |    (struct hrtimer)         |
    |   |nr_periods                   |
    |   |nr_throttled                 |
    |   |    (int)                    |
    |   |throttled_time               |
    |   |    (u64)                    |
    |   |throttled_cfs_rq             |
    |   |    (struct list_head)       |
    |   |                             |
    +---+-----------------------------+    0                nr_cpus_ids -1
    |# Fair Group Sched               |    +---+---+     +--+---+
    |se                               |--->|   |   | ... |  |   |
    |   (struct sched_entity **)      |    +---+---+     +--+---+
    |                                 |
    |                                 |    0                nr_cpus_ids -1
    |                                 |    +---+---+     +--+---+
    |cfs_rq                           |--->|   |   | ... |  |   |
    |   (struct cfs_rq **)            |    +---+---+     +--+---+
    |                                 |
    |shares                           |  = ROOT_TASK_GROUP_LOAD = NICE_0_LOAD
    |   (unsigned long)               |
    |                                 |
    +---------------------------------+



0.2 task_groups
================================================================================

    task_groups(list head)
     |
     |
     +->root_task_group --> 

0.3 rq, per cpu runqueue
================================================================================


    struct rq
    +---------------------------------+
    |nr_running                       |
    |nr_numa_running                  |
    |nr_preferred_running             |
    |numa_migrate_on                  |
    |    (unsigned int)               |
    |                                 |
    |nr_load_updates                  |
    |nr_switches                      |  number of pick up a different task
    |    (unsigned long)              |
    |                                 |
    |nr_uninterruptible               |  the sum of all rq matters
    |    (unsigned long)              |
    |                                 |
    |next_balance                     |
    |    (unsigned long)              |
    |prev_mm                          |
    |    (struct mm_struct*)          |
    |                                 |
    |clock_update_flags               |
    |    (unsigned int)               |
    |clock                            |  in nanoseconds
    |clock_task                       |  in general the same as clock
    |clock_pelt                       |  clock_task adjust for idle
    |    (u64)                        |
    |lost_idle_time                   |
    |    (unsigned long)              |
    |nr_iowait                        |
    |    (atomic_t)                   |
    |                                 |
    |calc_load_update                 |  5 second in the future
    |calc_load_active                 |
    |    (unsigned long)              |
    |                                 |
    |                                 |
    |                                 |
    +---------------------------------+  For SMP
    |rd                               |  = def_root_domain
    |    (struct root_domain*)        |
    |sd                               |  = NULL
    |    (struct sched_domain*)       |
    |cpu_capacity                     |  = SCHED_CAPACITY_SCALE
    |cpu_capacity_orig                |  = SCHED_CAPACITY_SCALE
    |balance_callback                 |  = NULL
    |    (struct callback_head*)      |
    |misfit_task_load                 |
    |next_balance                     |  = jiffies
    |    (unsigned long)              |
    |active_balance                   |  = 0
    |push_cpu                         |  = 0
    |    (unsigned int)               |
    |idle_balance                     |
    |    (unsigned char)              |
    |cpu                              |  = current cpu
    |online                           |  = 0
    |    (unsigned int)               |
    |active_balance_work              |
    |    (struct cpu_stop_work)       |
    |idle_stamp                       |  = 0
    |avg_idle                         |  = 2 * sysctl_sched_migration_cost
    |max_idle_balance_cost            |  = sysctl_sched_migration_cost
    |    (u64)                        |
    |cfs_tasks                        |
    |    (struct list_head)           |
    |avg_rt                           |
    |avg_dl                           |
    |    (struct sched_avg)           |
    |                                 |
    |wake_list                        |  lock-less single linked list
    |    (struct llist_head)          |
    |                                 |
    +---------------------------------+  Sched Stats
    |rq_sched_info                    |
    |    (struct sched_info)          |
    |rq_cpu_time                      |
    |yld_count                        |
    |sched_count                      |
    |sched_goidle                     |
    |ttwu_count                       |
    |ttwu_local                       |
    |    (unsigned int)               |
    |                                 |
    +---------------------------------+
    |curr                             |  current task on this rq
    |idle                             |
    |stop                             |
    |    (struct task_struct*)        |
    |                                 |
    |                                 |
    |                                 |
    |                                 |
    |                                 |
    +---------------------------------+
    |cfs                              |
    |    (struct cfs_rq)              |
    |    +----------------------------+
    |    |rq                          |  = the rq who has this cfs
    |    |    (struct rq*)            |
    |    |tg                          |  = &root_task_group
    |    |    (struct task_group*)    |
    |    |                            |
    |    |load                        |
    |    |    (struct load_weight)    |
    |    |nr_running                  |
    |    |h_nr_running                |
    |    |    (unsigned int)          |
    |    |                            |
    |    |curr/next/last/skip         |
    |    |    (struct sched_entity*)  |
    |    |                            |
    |    |avg                         |
    |    |    (struct sched_avg)      |
    |    |                            |
    |    |tg_load_avg_contrib         |
    |    |propagate                   |
    |    |prop_runnable_sum           |
    |    |h_load                      |
    |    |last_h_load_update          |
    |    |    (unsigned long)         |
    |    |h_load_next                 |
    |    |    (struct sched_entity*)  |
    |    |                            |
    |    |on_list                     |
    |    |    (int)                   |
    |    |leaf_cfs_rq_list            |
    |    |    (struct list_head)      |
    |    |                            |
    |    |min_vruntime                |  = (u64)(-(1LL << 20))
    |    |    (u64)                   |
    |    |tasks_timeline              |  = RB_ROOT_CACHED
    |    |    (struct rb_root_cached) |
    |    |                            |
    |    |runtime_enabled             |
    |    |runtime_remaining           |
    |    |throttled_clock             |
    |    |throttled_clock_task        |
    |    |throttled_clock_task_time   |
    |    |throttled                   |
    |    |throttle_count              |
    |    |    (int/s64/u64)           |
    |    |throttled_list              |
    |    |    (struct list_head)      |
    |    |                            |
    |    +----------------------------+
    |rt                               |
    |    (struct rt_rq)               |
    |dl                               |
    |    (struct dl_rq)               |
    |                                 |
    +---------------------------------+  Fair Sched Group
    |leaf_cfs_rq_list                 |
    |    (struct list_head)           |
    |tmp_alone_branch                 |
    |    (struct list_head*)          |
    |                                 |
    +---------------------------------+

0.4 per-cpu cpumask
================================================================================

load_balance_mask
select_idle_mask

0.5 rt_bandwidth
================================================================================

    def_rt_bandwidth
    +---------------------------------+
    |rt_period                        |  = global_rt_period()
    |    (ktime_t)                    |
    |rt_runtime                       |  = global_rt_runtime()
    |    (u64)                        |
    |rt_period_timer                  |  = sched_rt_period_timer
    |    (struct hrtimer)             |
    |rt_period_active                 |
    |    (unsigned int)               |
    |                                 |
    +---------------------------------+

0.6 dl_bandwidth
================================================================================

    def_dl_bandwidth
    +---------------------------------+
    |dl_period                        |  = global_rt_period()
    |dl_runtime                       |  = global_rt_runtime()
    |    (u64)                        |
    |                                 |
    +---------------------------------+

0.7 root_domain
================================================================================

    def_root_domain
    +---------------------------------+
    |refcount                         |  = 1 + number of rq attached
    |rto_count                        |
    |    (atomic_t)                   |
    |rcu                              |
    |    (struct rcu_head)            |
    |                                 |
    |span                             |  cpumask for the rq attached to this policy
    |online                           |
    |    (cpumask_var_t)              |
    |dlo_mask                         |  cpumask for more than one DL/RT task
    |rto_mask                         |
    |    (cpumask_var_t)              |
    |                                 |
    |overload                         |
    |overutilized                     |
    |    (int)                        |
    |                                 |
    |dlo_count                        |
    |    (atomic_t)                   |
    |dl_bw                            |
    |    (struct dl_bw)               |
    |    +----------------------------+
    |    |bw                          |
    |    |total_bw                    |
    |    |   (u64)                    |
    |    +----------------------------+
    |                                 |
    |cpudl                            |
    |    (struct cpudl)               |
    |    +----------------------------+
    |    |size                        |  = 0
    |    |   (int)                    |
    |    |free_cpus                   |
    |    |   (cpumask_var_t)          |
    |    |                            |
    |    |                            |    0                nr_cpus_ids -1
    |    |elements                    |    +---+---+     +--+---+
    |    |   (struct cpudl_item*)     |--->|dl |   |     |  |   |
    |    |                            |    |cpu|   | ... |  |   |
    |    |                            |    |idx|   |     |  |   |  = IDX_INVALID
    |    |                            |    +---+---+     +--+---+
    |    |                            |
    |    +----------------------------+
    |                                 |
    |cpupri                           |  a dictionary cpu <-> pri
    |    (struct cpupri)              |
    |    +----------------------------+
    |    |                            |    0                nr_cpus_ids -1
    |    |cpu_to_pri                  |    +---+---+     +--+---+
    |    |   (int*)                   |--->|   |   |     |  |   |
    |    |                            |    +---+---+     +--+---+
    |    |                            |
    |    |pri_to_cpu[NR_PRIORITIES]   |  NR_PRIORITIES = MAX_RT_PRIO + 2
    |    |   (struct cpupri_vec)      |
    |    |   +------------------------+
    |    |   |count                   |  = 0
    |    |   |   (atomic_t)           |
    |    |   |mask                    |  cpumask which has this priority
    |    |   |   (cpumask_var_t)      |
    |    +---+------------------------+
    |                                 |
    |max_cpu_capacity                 |
    |    (unsigned long)              |
    |pd                               |
    |    (struct perf_domain*)        |
    |                                 |
    +---------------------------------+

0.8 tg -> rq
================================================================================

    task_group
    +------------------------+<--------------------------------------------+
    |                        |    0                        nr_cpus_ids -1  |
    |                        |    +-----------+            +-----------+   |
    |                        |    |rq         |            |rq         |   |
    |                        |    |           |            |           |   |
    |cfs_rq                  |--->|  cfs_rq   |     ...    |  cfs_rq   |   |
    |   (struct cfs_rq **)   |    |           |            |     tg ---|---+
    |                        |    |           |            |           |
    +------------------------+    +-----------+            +-----------+

0.9 root_doman <-> rq
================================================================================

    def_root_domain
    +---------------------------------+<-----------------------+
    |refcount                         |         rq             |
    |    (atomic_t)                   |         +----------+   |
    |                                 |         |rd      --|---+
    |                                 |         |          |
    |                                 |         +----------+
    |                                 |          ^
    |                                 |          |
    |span                             |   +------------------------------+
    |online                           |-->|      x                       |
    |    (cpumask_var_t)              |   +------------------------------+
    +---------------------------------+


0.10 sched_class priority
================================================================================

    sched_class_highest = (&stop_sched_class)

    stop_sched_class
    +----------------+
    |next--+         |
    |      |         |
    +----------------+
           |
           v
    dl_sched_class
    +----------------+
    |next--+         |
    |      |         |
    +----------------+
           |
           v
    rt_sched_class
    +----------------+
    |next--+         |
    |      |         |
    +----------------+
           |
           v
    fair_sched_class
    +----------------+
    |next--+         |
    |      |         |
    +----------------+
           |
           v
    idle_sched_class
    +----------------+
    |next            |
    |                |
    +----------------+
