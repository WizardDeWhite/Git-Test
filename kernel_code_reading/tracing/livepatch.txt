1. klp_enable_patch(klp_patch)
================================================================================
1.1 klp_initialized()
================================================================================
1.2 klp_have_reliable_stack()
================================================================================
1.3 klp_is_patch_compatible()
================================================================================
1.4 klp_init_patch_early(klp_patch)
================================================================================
1.4.1 kobject_init(&klp_patch->kobj, &klp_ktype_patch)
================================================================================
1.4.2 klp_init_object_early(klp_patch, obj), for each klp_patch->objs
================================================================================
1.4.2.1 kobject_init(&obj->kobj, &klp_ktype_object);
================================================================================
1.4.3 klp_for_each_func_static(obj, func), for each klp_object->funcs
================================================================================
1.4.3.1 kobject_init(&func->kobj, &klp_ktype_func);
================================================================================
1.5 klp_init_patch(klp_patch)
================================================================================
1.5.1 kobject_add(&klp_patch->kobj, klp_root_kobj, "%s", patch->mod->name);
================================================================================
1.5.2 klp_init_object(&klp_patch, obj), for each klp_patch->objs
================================================================================
1.5.2.1 klp_find_object_module(obj)
================================================================================
1.5.2.2 klp_init_func(obj, func), for each klp_object->funcs
================================================================================
1.5.2.3 klp_init_object_loaded(klp_patch, obj)       <-- some interesting one
================================================================================
1.5.3 list_add_tail(&klp_patch->list, &klp_patches)
================================================================================
1.6 __klp_enable_patch(klp_patch)
================================================================================
1.6.1 klp_init_transition(klp_patch, KLP_PATCHED)
================================================================================
1.6.1.1 klp_transition_patch = klp_patch
================================================================================
1.6.1.2 klp_target_state = state
================================================================================
1.6.1.3 task->patch_state = initial_state, for each process
================================================================================
1.6.1.3 task->patch_state = initial_state, for each swapper task
================================================================================
1.6.2 klp_pre_patch_callback(obj), for each klp_patch->objs 
================================================================================
1.6.2.1 ret = (*obj->callbacks.pre_patch)(obj);
================================================================================
1.6.3 klp_patch_object(obj), for each klp_patch->objs
================================================================================
1.6.3.1 klp_patch_func(func), for each klp_object->funcs
================================================================================
1.6.3.1.1 ftrace_loc = klp_get_ftrace_location(func->old_func)
================================================================================
1.6.3.1.2 ops->fops.func = klp_ftrace_handler  <-- replace reg.ip
================================================================================
1.6.3.1.3 ftrace_set_filter_ip(&ops->fops, ftrace_loc, 0, 0)
================================================================================
1.6.3.1.4 register_ftrace_function(&ops->fops)
================================================================================
1.6.4 klp_start_transition()
================================================================================
1.6.5 klp_patch->enabled = true
================================================================================
1.6.6 klp_try_complete_transition()
================================================================================

2. ftrace_set_filter_ip(ftrace_ops, ip, remove, reset)
================================================================================
2.1 ftrace_ops_init(ops)
================================================================================
2.2 ftrace_set_addr(ops, ip, remove, reset, 1) -> ftrace_set_hash()
================================================================================
2.2.1 orig_hash = &ops->func_hash->filter_hash|notrace_hash
================================================================================
2.2.2 hash = alloc_ftrace_hash | alloc_and_copy_ftrace_hash
================================================================================
2.2.3 ftrace_match_addr(hash, ip, remove)
================================================================================
2.2.3.1 ftrace_location(ip), binary search on fpage
================================================================================
2.2.3.2 add_hash_entry(hash, ip)
================================================================================
2.2.4 ftrace_hash_move_and_update_ops(ops, orig_hash, hash, enabl)
================================================================================

3. register_ftrace_function(ftrace_ops)
================================================================================
3.1 ftrace_startup(ops, 0)
================================================================================
3.1.1 __register_ftrace_function(ops)
================================================================================
3.1.1.1 add_ftrace_ops(&ftrace_ops_list, ops)
================================================================================

4. retq
================================================================================
4.1 Test code
================================================================================

#include <stdio.h>

int add(int a, int b)
{
        return a + b;
}

int main()
{
        int a = 3;
        a = a + 3;
        add(a, 2);
        return 0;
}

Disassemble code:

(gdb) disassemble main
Dump of assembler code for function main:              
   0x0000000000400501 <+0>:     push   %rbp            
   0x0000000000400502 <+1>:     mov    %rsp,%rbp       
   0x0000000000400505 <+4>:     sub    $0x10,%rsp      
   0x0000000000400509 <+8>:     movl   $0x3,-0x4(%rbp) 
   0x0000000000400510 <+15>:    addl   $0x3,-0x4(%rbp) 
   0x0000000000400514 <+19>:    mov    -0x4(%rbp),%eax 
   0x0000000000400517 <+22>:    mov    $0x2,%esi       
   0x000000000040051c <+27>:    mov    %eax,%edi       
   0x000000000040051e <+29>:    callq  0x4004ed <add>  
   0x0000000000400523 <+34>:    mov    $0x0,%eax       
   0x0000000000400528 <+39>:    leaveq                 
   0x0000000000400529 <+40>:    retq                   
End of assembler dump.                                 
(gdb) disassemble add                                  
Dump of assembler code for function add:               
   0x00000000004004ed <+0>:     push   %rbp            
   0x00000000004004ee <+1>:     mov    %rsp,%rbp       
   0x00000000004004f1 <+4>:     mov    %edi,-0x4(%rbp) 
   0x00000000004004f4 <+7>:     mov    %esi,-0x8(%rbp) 
   0x00000000004004f7 <+10>:    mov    -0x8(%rbp),%eax 
   0x00000000004004fa <+13>:    mov    -0x4(%rbp),%edx 
   0x00000000004004fd <+16>:    add    %edx,%eax       
   0x00000000004004ff <+18>:    pop    %rbp            
=> 0x0000000000400500 <+19>:    retq

4.2 Return address is push on stack after callq
================================================================================
After "callq 0x4004ed", we can see the return address is pushed on to stack.

(gdb) x/4xw $rsp
0x7fffffffe2e8: 0x00400523

Let's see how this value is used in retq. First let's step to the last
instruction of add(), which is retq here. We can see on the top of stack, the
value is 0x00400523.

(gdb) disassemble
Dump of assembler code for function add:
   0x00000000004004ed <+0>:     push   %rbp
   0x00000000004004ee <+1>:     mov    %rsp,%rbp
   0x00000000004004f1 <+4>:     mov    %edi,-0x4(%rbp)
   0x00000000004004f4 <+7>:     mov    %esi,-0x8(%rbp)
   0x00000000004004f7 <+10>:    mov    -0x8(%rbp),%eax
   0x00000000004004fa <+13>:    mov    -0x4(%rbp),%edx
   0x00000000004004fd <+16>:    add    %edx,%eax
   0x00000000004004ff <+18>:    pop    %rbp
=> 0x0000000000400500 <+19>:    retq
End of assembler dump.
(gdb) info registers rsp
rsp            0x7fffffffe2e8   0x7fffffffe2e8
(gdb) x/1xw 0x7fffffffe2e8
0x7fffffffe2e8: 0x00400523
(gdb) stepi
main () at main.c:13
13              return 0;
(gdb) info registers rsp
rsp            0x7fffffffe2f0   0x7fffffffe2f0
(gdb) info registers rip
rip            0x400523 0x400523 <main+34>
(gdb) disassemble
Dump of assembler code for function main:
   0x0000000000400501 <+0>:     push   %rbp
   0x0000000000400502 <+1>:     mov    %rsp,%rbp
   0x0000000000400505 <+4>:     sub    $0x10,%rsp
   0x0000000000400509 <+8>:     movl   $0x3,-0x4(%rbp)
   0x0000000000400510 <+15>:    addl   $0x3,-0x4(%rbp)
   0x0000000000400514 <+19>:    mov    -0x4(%rbp),%eax
   0x0000000000400517 <+22>:    mov    $0x2,%esi
   0x000000000040051c <+27>:    mov    %eax,%edi
   0x000000000040051e <+29>:    callq  0x4004ed <add>
=> 0x0000000000400523 <+34>:    mov    $0x0,%eax
   0x0000000000400528 <+39>:    leaveq
   0x0000000000400529 <+40>:    retq
End of assembler dump.

After retq, rsp is moved up and rip points to 0x400523. From the disassemble,
the program continues after "callq".

The process shows call/req would put/get return address on stack.

4.3 Change Return Address on stack
================================================================================

This is natural to think about manipulate the return path by change the
content on stack.

After "callq 0x4004ed", we can see the content on $rsp is 0x00400523, which
is the return address. Now let's secretly adjust the return address on stack:

(gdb) disassemble
Dump of assembler code for function add:
   0x00000000004004ed <+0>:     push   %rbp
   0x00000000004004ee <+1>:     mov    %rsp,%rbp
   0x00000000004004f1 <+4>:     mov    %edi,-0x4(%rbp)
   0x00000000004004f4 <+7>:     mov    %esi,-0x8(%rbp)
   0x00000000004004f7 <+10>:    mov    -0x8(%rbp),%eax
   0x00000000004004fa <+13>:    mov    -0x4(%rbp),%edx
   0x00000000004004fd <+16>:    add    %edx,%eax
   0x00000000004004ff <+18>:    pop    %rbp
=> 0x0000000000400500 <+19>:    retq
End of assembler dump.
(gdb) info registers rsp
rsp            0x7fffffffe2e8   0x7fffffffe2e8
(gdb) x/1xw 0x7fffffffe2e8
0x7fffffffe2e8: 0x00400523
(gdb) set *((int *) 0x7fffffffe2e8) = 0x00400528
(gdb) x/1xw 0x7fffffffe2e8
0x7fffffffe2e8: 0x00400528
(gdb) stepi
main () at main.c:14
14      }
(gdb) info registers rip
rip            0x400528 0x400528 <main+39>
(gdb) disassemble
Dump of assembler code for function main:
   0x0000000000400501 <+0>:     push   %rbp
   0x0000000000400502 <+1>:     mov    %rsp,%rbp
   0x0000000000400505 <+4>:     sub    $0x10,%rsp
   0x0000000000400509 <+8>:     movl   $0x3,-0x4(%rbp)
   0x0000000000400510 <+15>:    addl   $0x3,-0x4(%rbp)
   0x0000000000400514 <+19>:    mov    -0x4(%rbp),%eax
   0x0000000000400517 <+22>:    mov    $0x2,%esi
   0x000000000040051c <+27>:    mov    %eax,%edi
   0x000000000040051e <+29>:    callq  0x4004ed <add>
   0x0000000000400523 <+34>:    mov    $0x0,%eax
=> 0x0000000000400528 <+39>:    leaveq
   0x0000000000400529 <+40>:    retq
End of assembler dump.

Now, return from add(), we execute leaveq(0x00400528) directly instead of
handle return value.

0. data struct
================================================================================

0.1 klp_patch
================================================================================

 klp_patches
 | 
 |  klp_patch
 |  +------------------------------+
 +->|list                          |
    |obj_list                      |
    |    (struct list_head)        |
    |kobj                          |   "/sys/kernel/livepatch/"
    |    (struct kobject)          |
    |                              |
    |mod                           |
    |    (struct module*)          |
    |states                        |
    |    (struct klp_state*)       |    klp_object          klp_object
    |objs                          |    +--------------+    +--------------+
    |    (struct klp_object*)      |--->|funcs         |--->|funcs         |
    |                              |    | |            |    | |            |
    |                              |    +--------------+    +--------------+
    +------------------------------+      |                   |
                                          |  klp_func         |  klp_func
                                          +->+---------+      +->+---------+
                                          |  |old_name |      |  |old_name |
                                          |  |new_func |      |  |new_func |
                                          |  +---------+      |  +---------+
                                          |                   |
                                          |  klp_func         |  klp_func
                                          +->+---------+      +->+---------+
                                          |  |old_name |      |  |old_name |
                                          |  |new_func |      |  |new_func |
                                          |  +---------+      |  +---------+
                                          |                   |
                                          |  klp_func         |  klp_func
                                          +->+---------+      +->+---------+
                                             |old_name |         |old_name |
                                             |new_func |         |new_func |
                                             +---------+         +---------+

0.2 klp_object
================================================================================

    klp_object
    +------------------------------+
    |kobj                          |
    |    (struct kobject)          |
    |node                          |
    |func_list                     |
    |    (struct list_head)        |
    |                              |
    |                              |
    |name                          |
    |     (char *)                 |
    |callbacks                     |
    |     (struct klp_callbacks)   |
    |funcs                         |
    |     (struct klp_func*)       |
    |                              |
    |                              |
    +------------------------------+


0.3 klp_func
================================================================================

 *   patched=0 transition=0: unpatched
 *   patched=0 transition=1: unpatched, temporary starting state
 *   patched=1 transition=1: patched, may be visible to some tasks
 *   patched=1 transition=0: patched, visible to all tasks

    klp_func
    +------------------------------+
    |kobj                          |
    |    (struct kobject)          |
    |node                          |
    |stack_node                    |
    |    (struct list_head)        |
    |                              |
    |                              |
    |old_name                      |
    |    (char *)                  |
    |old_func                      |
    |new_func                      |
    |    (void *)                  |
    |                              |
    |patched                       |
    |transition                    |
    |    (bool)                    |
    +------------------------------+

0.4 klp_ops
================================================================================
each klp_func would have one klp_ops

klp_ops(global list)
 |
 |  klp_object
 |  +------------------------------+
 +->|node                          |
    |func_stack                    |
    |    (struct list_head)        |
    |fops                          |
    |    (struct ftrace_ops)       |
    |                              |
    +------------------------------+



