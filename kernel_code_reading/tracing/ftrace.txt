1. compile
================================================================================

make kernel/sched/core.s

schedule_idle:
1:      call    __fentry__
        .section __mcount_loc, "a",@progbits

cat kernel/sched/.core.o.cmd

gcc -pg -mrecord-mcount -mfentry

2. __fentry__, at build & bootup time
================================================================================
SYM_FUNC_START(__fentry__)
	retq
SYM_FUNC_END(__fentry__)

3. another magic for recordmcount
================================================================================

Start from make rule:

# Usage: $(call if_changed_rule,foo)
# Will check if $(cmd_foo) or any of the prerequisites changed,
# and if so will execute $(rule_foo).
if_changed_rule = $(if $(newer-prereqs)$(cmd-check),$(rule_$(1)),@:)

# Built-in and composite module parts
$(obj)/%.o: $(src)/%.c $(recordmcount_source) $(objtool_dep) FORCE
	$(call cmd,force_checksrc)
	$(call if_changed_rule,cc_o_c)

So rule_cc_o_c will execute too

define rule_cc_o_c
	$(call cmd_and_fixdep,cc_o_c)
	...
	$(call cmd,record_mcount)
endef

From the above rule, we can see, cmd_record_mcount is invoked after object is
created.

Finally, I found this commit:

https://lore.kernel.org/lkml/patch-2.thread-aa7b8d.git-de935bace15a.your-ad-here.call-01533557518-ext-9465@work.hours/

# gcc 5 supports generating the mcount tables directly

So there is a mcount table for each object. As we can see the
  .section __mcount_loc
in the output assembly file.

4. link
================================================================================

All the address calling __fentry__ is recorded in this section.

/*
 * The ftrace call sites are logged to a section whose name depends on the
 * compiler option used. A given kernel image will only use one, AKA
 * FTRACE_CALLSITE_SECTION. We capture all of them here to avoid header
 * dependencies for FTRACE_CALLSITE_SECTION's definition.
 *
 * Need to also make ftrace_stub_graph point to ftrace_stub
 * so that the same stub location may have different protocols
 * and not mess up with C verifiers.
 */
#define MCOUNT_REC()	. = ALIGN(8);				\
			__start_mcount_loc = .;			\
			KEEP(*(__mcount_loc))			\
			KEEP(*(__patchable_function_entries))	\
			__stop_mcount_loc = .;			\
			ftrace_stub_graph = ftrace_stub;

5. set to nop at runtime
================================================================================
ftrace_init
    ftrace_process_locs(NULL, __start_mcount_loc, __stop_mcount_loc)
        sort()
        ftrace_update_code()
            ftrace_nop_initialize()
                ftrace_init_nop()
                    ftrace_make_nop

ftrace_make_nop
    old = ftrace_call_replace
        text_gen_insn(CALL_INSN_OPCODE, (void *)ip, (void *)addr);
    new = ftrace_nop_replace
    ftrace_modify_code_direct(ip, old, new)
        ftrace_verify_code(ip, old)
        text_poke_early(ip, new, MCOUNT_INSN_SIZE)

6. update nop via set_ftrace_filter
================================================================================
6.1 ftrace_filter_write, update hash
================================================================================

6.2 ftrace_regex_release, update nop code
================================================================================
6.2.1 iter = file->private_data, get ftrace_iterator
================================================================================
6.2.2 orig_hash = &iter->ops->func_hash->filter_hash, get orig_hash from ops
================================================================================
6.2.3 ftrace_hash_move_and_update_ops(iter->ops, orig_hash, iter->hash, filter_hash)
================================================================================
6.2.3.1 ftrace_hash_move(orig_hash, hash), link iter->hash to iter->ops->func_hash->filter_hash
================================================================================
6.2.3.2 ftrace_ops_update_code(iter->ops, old_hash_ops) -> ftrace_replace_code()
================================================================================
ftrace_ops_update_code
    ftrace_run_modify_code
        ftrace_run_update_code(FTRACE_UPDATE_CALLS)
            ftrace_arch_code_modify_prepare
                mutex_lock(&text_mutex);
                ftrace_poke_late = 1;
            arch_ftrace_update_code(FTRACE_UPDATE_CALLS) -> ftrace_modify_all_code
                ftrace_update_ftrace_func, update ftrace_call|ftrace_reg_call to ftrace_trace_function, which is updated in update_ftrace_function ?
                ftrace_replace_code()
            ftrace_arch_code_modify_post_process
                text_poke_finish();
                ftrace_poke_late = 0;
                mutex_unlock(&text_mutex);

6.2.4 free_ftrace_hash(iter->hash), release the hash in ftrace_iterator
================================================================================



7. init_function_trace()
================================================================================
7.1 init_func_cmd_traceon()
================================================================================
7.1.1 register_ftrace_command(&ftrace_traceoff_cmd)
================================================================================
7.1.2 register_ftrace_command(&ftrace_traceon_cmd)
================================================================================
7.1.3 register_ftrace_command(&ftrace_stacktrace_cmd)
================================================================================
7.1.4 register_ftrace_command(&ftrace_dump_cmd)
================================================================================
7.1.5 register_ftrace_command(&ftrace_cpudump_cmd)
================================================================================
7.2 register_tracer(&function_trace)
================================================================================

8. ftrace_replace_code()
================================================================================
8.1 ftrace_test_record(rec,), check dyn_ftrace.flags
================================================================================
see 0.3.1 for detail of dyn_ftrace.flags
8.1.1 ftrace_check_record(rec, enable, false)
================================================================================
8.2 old = ftrace_call_replace(rec->ip, ftrace_get_addr_curr(rec))
================================================================================
8.2.1 ftrace_get_addr_curr(rec), return current rec's function, e.g. ftrace_caller
================================================================================
8.2.1.1 return ops->trampoline;
================================================================================
8.2.1.2 return (unsigned long)FTRACE_REGS_ADDR; -> ftrace_regs_caller
================================================================================
8.2.1.3 return (unsigned long)FTRACE_ADDR; -> ftrace_caller
================================================================================
8.2.2 text_gen_insn(CALL_INSN_OPCODE, rec->ip, ftrace_caller)
================================================================================
8.2.2.1 it "generate" an call instruction from rec->ip to ftrace_caller
================================================================================
8.3 ftrace_verify_code(rec->ip, old)
================================================================================
8.4 new = ftrace_call_replace(rec->ip, ftrace_get_addr_new(rec))
================================================================================
8.4.1 ftrace_get_addr_new(rec)
================================================================================
8.5 text_poke_queue(rec->ip, new, MCOUNT_INSN_SIZE, NULL)
================================================================================
8.5.1 text_poke_early(rec->ip, new, MCOUNT_INSN_SIZE), on sys_boot
================================================================================
8.5.2 text_poke_loc_init()
================================================================================
8.5.3 text_poke_flush(rec->ip)
================================================================================
8.6 ftrace_update_record(rec), update dyn_ftrace.flags
================================================================================
8.6.1 ftrace_check_record(rec, enable, true)
================================================================================
8.7 text_poke_finish() -> text_poke_flush()
================================================================================
8.7.1 text_poke_bp_batch(tp_vec, tp_vec_nr), update instruction on live kernel
================================================================================
8.7.1.1 text_poke(), the secret of modify kernel exec region
================================================================================

9. update_ftrace_function, update ftrace_trace_function pointer
================================================================================
tracing_set_tracer, write to "current_tracer"
    tracer_init(struct tracer *t, struct trace_array *tr)
        t->init(tr) -> e.g. function_trace_init
            func = function_trace_call
            ftrace_init_array_ops(tr, func)
                tr->ops->func = func;
                tr->ops->private = tr;
            tracing_start_function_trace(tr)
                register_ftrace_function(tr->ops), e.g. global_trace 
                    ftrace_startup(ops, 0);
                        __register_ftrace_function(ops);
                            ops->saved_func = ops->func
                            update_ftrace_function
                                func = ftrace_ops_list_func;
                                ftrace_trace_function = func;

0. Data struct
================================================================================

0.1 Author's slide
================================================================================
https://blog.linuxplumbersconf.org/2014/ocw/system/presentations/1773/original/ftrace-kernel-hooks-2014.pdf

0.2 available_filter_functions
================================================================================

   inode
   +--------------+
   |i_fop         |  = ftrace_avail_fops
   |i_private     |  = NULL
   +--------------+

   struct file
   +--------------+     struct seq_file
   |.private_data |---->+-------------+     
   |              |     |.op          |  = show_ftrace_seq_ops
   +--------------+     |             |
                        |             |    struct ftrace_iterator
                        |.private     |--->+------------+
                        |             |    |.pg         |  = ftrace_pages_start
                        +-------------+    |            |
                                           |.ops        |  = global_ops
                                           |            |
                                           +------------+

0.3 set_ftrace_filter
================================================================================

   inode
   +--------------+
   |i_fop         |  = ftrace_filter_fops {.write = ftrace_filter_write}
   |i_private     |  = e.g. global_ops
   +--------------+


   struct file
   +--------------+    struct ftrace_iterator
   |.private_data |--->+------------+
   |              |    |.pg         |  = ftrace_pages_start
   +--------------+    |            |
                       |.ops        |  = global_ops
                       | ftrace_ops |
                       |            |
                       |            |  ftrace_func_entry
                       |.hash       |  (may copied from ftrace_ops->func_hash->[notrace_hash|filter_hash])
                       |            |  +----------+----------+----------+----------+
                       | ftrace_hash|  |          |          |          |          |
                       |            |  +----------+----------+----------+----------+
                       |            |
                       +------------+

ftrace_filter_write will add ftrace_func_entry to ftrace_iterator.hash.

ftrace_regex_release will update the nop code


Two possible path to create this file:

	tracer_init_tracefs
            init_tracer_tracefs(&global_trace, )
                ftrace_create_function_files(tr, parent);
		    ftrace_create_filter_files(&tr->ops, )
	    ftrace_init_tracefs_toplevel
		ftrace_init_dyn_tracefs
		    ftrace_create_filter_files(&global_ops, )
            create_trace_instances(d_tracer);
		instance_mkdir
		    trace_array_create

        trace_array_create(name)
            init_tracer_tracefs(tr, )
                ftrace_create_function_files(tr, parent);
		    ftrace_create_filter_files(&tr->ops, )

Add a dump_stack() in ftrace_create_filter_files(), the result shows:

[    0.736039]  dump_stack+0x66/0x90
[    0.736039]  ftrace_create_filter_files+0x38/0x78
[    0.736039]  ftrace_init_tracefs_toplevel+0x69/0x17e
[    0.736039]  tracer_init_tracefs+0x8c/0x1fc
[    0.736039]  ? register_tracer+0x1e7/0x1e7
[    0.736039]  do_one_initcall+0x46/0x200
[    0.736039]  kernel_init_freeable+0x1e2/0x261


0.4 current_tracer
================================================================================

   inode
   +--------------+
   |i_fop         |  = set_tracer_fops
   |i_private     |  = &global_trace (struct trace_array)
   +--------------+


   struct file
   +--------------+    &global_trace
   |.private_data |--->+-----------------+
   |              |    |                 |
   +--------------+    |                 |
                       |                 |
                       |                 |
                       |                 |
                       +-----------------+
