1. init call flow
================================================================================

start_kernel
    cgroup_init_early
    cgroup_init

2. cgroup_init_early
================================================================================
2.1 ctx.root = &cgrp_dfl_root
================================================================================
2.2 init_cgroup_root(&ctx)
================================================================================
2.2.1 root = ctx->root
================================================================================
2.2.2 cgrp = &root->cgrp
================================================================================
2.2.3 init_cgroup_housekeeping(cgrp_dfl_root.cgrp), init a cgroup
================================================================================
2.2.3.1 INIT_LIST_HEAD cgrp->self.sibling|children
================================================================================
2.2.3.2 for_each_subsys(ss, ssid)
================================================================================
2.2.3.3 INIT_LIST_HEAD(&cgrp->e_csets[ssid])
================================================================================
2.3 cgrp_dfl_root.cgrp.self.flags |= CSS_NO_REF
================================================================================
2.4 init_task.cgroups = &init_css_set;
================================================================================
2.5 for_each_subsys(ss, i), assign id/name to each subsys, but only init early ones
================================================================================
2.6 ss->id = i
================================================================================
2.7 ss->name = cgroup_subsys_name[i]
================================================================================
2.8 ss->legacy_name = cgroup_subsys_name[i]
================================================================================
2.9 cgroup_init_subsys(ss, true), if ss->early_init, do init if should init early
================================================================================

3. cgroup_init
================================================================================
3.1 cgroup_init_cftypes(NULL, cgroup_base_files), assign kf_ops
================================================================================
3.2 cgroup_init_cftypes(NULL, cgroup1_base_files), files in /sys/fs/cgroup/xxx/
================================================================================
3.3 cgroup_rstat_boot()
================================================================================
3.3.1 cgroup_rstat_init(&cgrp_dfl_root.cgrp)
================================================================================
3.3.1.1 cgrp_dfl_root.cgrp.rstat_cpu = alloc_percpu(), or &cgrp_dfl_root_rstat_cpu
================================================================================
3.3.1.2 rstatc->updated_children = cgrp
================================================================================
3.4 rcu_sync_enter_start(&cgroup_threadgroup_rwsem.rss)
================================================================================
3.5 get_user_ns(init_cgroup_ns.user_ns)
================================================================================
3.6 hash_add(css_set_table, &init_css_set.hlist, css_set_hash(init_css_set.subsys))
================================================================================
3.7 cgroup_setup_root(&cgrp_dfl_root, 0), setup cgrp_dfl_root
================================================================================
3.7.1 percpu_ref_init(&root_cgrp->self.refcnt, css_release, 0, GFP_KERNEL);
================================================================================
3.7.2 allocate_cgrp_cset_links(2 * css_set_count, &tmp_links)
================================================================================
3.7.2.1 kzalloc(sizeof(struct cgrp_cset_link)), allocate list of cgrp_cset_link
================================================================================
3.7.3 cgroup_init_root_id(&cgrp_dfl_root)
================================================================================
3.7.3.1 id = idr_alloc_cyclic(&cgroup_hierarchy_idr, )
================================================================================
3.7.3.2 cgrp_dfl_root->hierarchy_id = id
================================================================================
3.7.4 cgrp_dfl_root.kf_root = kernfs_create_root(cgroup_kf_syscall_ops, root->cgrp)
================================================================================
3.7.5 root_cgrp->ancestor_ids[0] = cgroup_id(root_cgrp);
================================================================================
3.7.6 css_populate_dir(&root_cgrp->self), create default files in a cgroup directory
================================================================================
3.7.7 rebind_subsystems(&cgrp_dfl_root, 0)
================================================================================
3.7.7.1 kernfs_activate(root_cgrp->kn)
================================================================================
3.7.8 list_add(&cgrp_dfl_root->root_list, &cgroup_roots)
================================================================================
3.7.9 link_css_set(&tmp_links, cset, root_cgrp), link root cgrp to all css_set
================================================================================
3.7.9.1 list_move_tail(&link->cset_link, &cgrp->cset_links) 
================================================================================
3.7.9.2 list_add_tail(&link->cgrp_link, &cset->cgrp_links) 
================================================================================
3.7.10 cgroup_update_populated(root_cgrp, true)
================================================================================
3.8 cgroup_init_subsys(ss, false)
================================================================================
3.8.1 idr_init(&ss->css_idr)
================================================================================
3.8.2 css = ss->css_alloc(cgroup_css(&cgrp_dfl_root.cgrp, ss))
================================================================================
3.8.3 init_and_link_css(css, ss, &cgrp_dfl_root.cgrp)
================================================================================
3.8.4 css->id = cgroup_idr_alloc(&css->css_idr, css, )
================================================================================
3.8.5 online_css(css)
================================================================================
3.8.5.1 ss->css_online(css)
================================================================================
3.8.5.2 css->flags |= CSS_ONLINE;
================================================================================
3.8.5.3 rcu_assign_pointer(css->cgroup->subsys[ss->id], css);
================================================================================
3.9 list_add_tail(&init_css_set.e_cset_node[ssid], &cgrp_dfl_root.cgrp.e_csets[ssid])
================================================================================
3.10 cgrp_dfl_root.subsys_mask |= 1 << ss->id, mark online
================================================================================
3.11 cgroup_add_cftypes(ss, ss->dfl_cftypes)
================================================================================
3.11 cgroup_add_dfl_cftypes(ss, ss->dfl_cftypes)
================================================================================
3.11.1 cgroup_init_cftypes(ss, cfts), setup cft->kf_ops
================================================================================
3.11.2 cgroup_apply_cftypes(cfts, true)
================================================================================
3.11.2.1 cgroup_addrm_files(css, cgrp, cfts, )
================================================================================
3.11.2.2 kernfs_activate(root->kn)
================================================================================
3.11 cgroup_add_legacy_cftypes(ss, ss->legacy_cftypes)
================================================================================
3.12 ss->bind(init_css_set.subsys[ssid]), if necessary
================================================================================
3.13 css_populate_dir(init_css_set.subsys[ssid]), add ss->cfts for each subsys
================================================================================
3.14 sysfs_create_mount_point(fs_kobj, "cgroup"), /sys/fs/cgroup
================================================================================
3.15 register_filesystem(&cgroup_fs_type)
================================================================================
3.16 register_filesystem(&cgroup2_fs_type)
================================================================================
3.17 proc_create_single("cgroups", , proc_cgroupstats_show), /proc/cgroups
================================================================================
3.18 register_filesystem(&cpuset_fs_type)
================================================================================

4. cgroup_create()
================================================================================
4.1 cgrp = kzalloc()
================================================================================
4.2 percpu_ref_init(&cgrp->self.refcnt, css_release, 0, GFP_KERNEL);
================================================================================
4.3 cgroup_rstat_init(cgrp);
================================================================================
4.4 kn = kernfs_create_dir(parent->kn, name, mode, cgrp)
================================================================================
4.5 init_cgroup_housekeeping(cgrp)
================================================================================
4.6 cgrp->ancestor_ids[tcgrp->level] = cgrpu_id(tcgrp), for tcgrp = cgroup_parent(cgrp)
================================================================================
4.7 list_add_tail_rcu(&cgrp->self.sibling, &cgroup_parent(cgrp)->self.children);
================================================================================
4.8 cgroup_propagate_control(cgrp)
================================================================================
4.8.1 dsct->subtree_control &= cgroup_control(dsct)
================================================================================
4.8.2 dsct->subtree_ss_mask = cgroup_calc_subtree_ss_mask(dsct->subtree_control, cgroup_ss_mask(dsct));
================================================================================

5. css_create(cgrp, ss)
================================================================================
5.1 parent = cgroup_parent(cgrp)
================================================================================
5.2 parent_css = cgroup_css(parent, ss)
================================================================================
5.3 css = ss->css_alloc(parent_css)
================================================================================
5.4 init_and_link_css(css, ss, cgrp)
================================================================================
5.4.1 memset(css, 0, sizeof(*css))
================================================================================
5.5 percpu_ref_init(&css->refcnt, css_release, 0, GFP_KERNEL)
================================================================================
5.6 css->id = cgroup_idr_alloc(&ss->css_idr, )
================================================================================
5.7 list_add_tail_rcu(&css->sibling, &parent_css->children)
================================================================================
5.8 online_css(css)
================================================================================
5.8.1 css->ss->css_online(css)
================================================================================
5.8.2 css->flags |= CSS_ONLINE
================================================================================
5.8.3 css->cgroup->subsys[ss->id] = css
================================================================================

6. css_populate_dir(struct cgroup_subsys_state *css), create subsys file in cgroup dir
================================================================================
Depends on css type, css->ss, the cfts are:

  * css.ss == NULL: cfts = cgroup_base_files/cgroup1_base_files
  * css.ss != NULL: cfts = css->ss-cfts

There are three places css_populate_dir() be called, and could be classified
into two category by the css type:

  * cgrp->self(css.ss == NULL):      cgroup_setup_root() / cgroup_mkdir()
  * cgropu_subsys[](css.ss == NULL): cgroup_init() / cgroup_apply_control_enable()

6.1 cgroup_addrm_files(css, cgrp, cfts, true)
================================================================================
6.1.1 cgroup_add_file(css, cgrp, cft)
================================================================================
6.1.1.1 kn = __kernfs_create_file(cgrp->kn, )
================================================================================

7. rebind_subsystems(dst_root, ss_mask)
================================================================================
7.1 dcgrp = &dst_root->cgrp
================================================================================
7.2 src_root = ss->root
================================================================================
7.3 scgrp = &src_root->cgrp
================================================================================
7.4 css = cgroup_css(scgrp, ss)
================================================================================
7.5 src_root->subsys_mask &= ~(1 << ssid)
================================================================================
7.6 cgroup_apply_control(scgrp)
================================================================================
7.6.1 cgroup_propagate_control(cgrp), refresh control mask
================================================================================
7.6.2 cgroup_apply_control_enable(cgrp), enable/show css
================================================================================
7.6.2.1 css_create()
================================================================================
7.6.2.2 css_populate_dir(css), removed by css_clear_dir()
================================================================================
7.6.3 cgroup_update_dfl_csses(cgrp)
================================================================================
7.7 cgroup_finalize_control(scgrp, 0)
================================================================================
7.7.1 cgroup_apply_control_disable(cgrp), kill or hide css
================================================================================
7.7.1.1 kill_css(css), counterpart of css_create() 
================================================================================
7.8 RCU_INIT_POINTER(scgrp->subsys[ssid], NULL);
================================================================================
7.9 rcu_assign_pointer(dcgrp->subsys[ssid], css);
================================================================================
7.10 ss->root = dst_root
================================================================================
7.11 css->cgroup = dcgrp
================================================================================
7.11 list_move_tail(&cset->e_cset_node[ss->id], &dcgrp->e_csets[ss->id]);
================================================================================
7.12 dst_root->subsys_mask |= 1 << ssid
================================================================================
7.13 dcgrp->subtree_control |= 1 << ssid
================================================================================
7.14 cgroup_apply_control(dcgrp)
================================================================================

4. interfaces
================================================================================

4.0 cgroup1_get_tree(fc), called on mount -t cgroup -o cpu none /sys/fs/cgroup/cpu
================================================================================
4.0.1 ctx = cgroup_fc2context(fc)
================================================================================
4.0.2 cgroup_lock_and_drain_offline(&cgrp_dfl_root.cgrp)
================================================================================
4.0.3 cgroup1_root_to_use(fc), find or create cgroup_root
================================================================================
4.0.3.1 check_cgroupfs_options(fc), find desired ss
================================================================================
4.0.3.2 root = kzalloc()
================================================================================
4.0.3.3 ctx->root = root
================================================================================
4.0.3.4 init_cgroup_root(ctx)
================================================================================
4.0.3.5 cgroup_setup_root(root, ctx->subsys_mask)
================================================================================
4.0.3.5.1 rebind_subsystems(root, ss_mask)
================================================================================
4.0.4 cgroup_do_get_tree(fc)
================================================================================
4.0.4.1 kernfs_get_tree(fc)
================================================================================
4.0.4.1.1 sb = sget_fc(fc, kernfs_test_super, kernfs_set_supter)
================================================================================
4.0.4.1.2 fc->root = dget(sb->s_root)
================================================================================

4.0 cgroup_mkdir(parent_kn, name, mode), a new cgroup
================================================================================
4.0.1 parent = cgroup_kn_lock_live(parent_kn)
================================================================================
4.0.2 cgrp = cgroup_create(parent, name, mode)
================================================================================
4.0.2.1 cgrp = kzalloc()
================================================================================
4.0.2.2 kn = kernfs_create_dir()
================================================================================
4.0.2.3 cgrp->kn = kn
================================================================================
4.0.2.4 list_add_tail_rcu(&cgrp->self.sibling, &cgroup_parent(cgrp)->self.children);
================================================================================
4.0.2.5 cgroup_propagate_control(cgrp)
================================================================================
4.0.3 cgroup_kn_set_ugid(cgrp->kn)
================================================================================
4.0.3 css_populate_dir(&cgrp->self), populate core interface
================================================================================
4.0.4 cgroup_apply_control_enable(cgrp)
================================================================================
4.0.4.1 css = css_create(cgrp, ss), for each subsys
================================================================================

4.1 cgroup.procs, __cgroup1_procs_write()
================================================================================
4.1.1 cgrp = cgroup_kn_lock_live(of->kn, false), get and lock cgrp
================================================================================
4.1.2 task = cgroup_procs_write_start(buf, threadgroup, )
================================================================================
4.1.2.1 kstrtoint(strstrip(buf), 0, &pid)
================================================================================
4.1.2.2 tsk = find_task_by_vpid(pid)
================================================================================
4.1.2.3 get_task_struct(tsk)
================================================================================
4.1.3 cgroup_attach_task(cgrp, task, threadgroup), attach task to a cgroup
================================================================================
4.1.3.1 cgroup_migrate_add_src(task_css_set(task), cgrp, &mgctx)
================================================================================
4.1.3.1.1 src_cgrp = cset_cgroup_from_root(src_cset, dst_cgrp->root)
================================================================================
4.1.3.2 cgroup_migrate_prepare_dst()
================================================================================
4.1.3.2.1 dst_cset = find_css_set(src_cset, src_cset->mg_dst_cgrp), create new css_set
================================================================================
4.1.3.3 cgroup_migrate(leader, threadgroup, )
================================================================================
4.1.3.4 cgroup_migrate_finish(&mgctx)
================================================================================
4.1.4 cgroup_procs_write_finish(task, locked)
================================================================================
4.1.4.1 put_task_struct(task)
================================================================================
4.1.4.2 ss->post_attach()
================================================================================

4.1 cgroup.controllers
================================================================================

4.1.1 cgroup_controllers_show
================================================================================

4.2 cgroup.subtree_control
================================================================================

4.2.1 cgroup_subtree_control_write
================================================================================
4.2.1.1 cgroup_apply_control(cgrp)
================================================================================
4.2.1.1.1 cgroup_propagate_control(cgrp)
================================================================================
4.2.1.1.2 cgroup_apply_control_enable(cgrp)
================================================================================
4.2.1.2 cgroup_finalize_control(cgrp)
================================================================================

0. data struct
================================================================================

0.0 global variables
================================================================================

cgrp_dfl_root      (struct cgroup_root) dummy root
cgrp_dfl_root.cgrp (struct cgroup)

cgrp_dfl_implicit_ss_mask
cgrp_dfl_inhibit_ss_mask
cgrp_dfl_threaded_ss_mask

cgroup_mutex
css_set_lock

0.1 cgroup id/name/category

0.1.1 cgroup_subsys_id, each cgroup would have its own id
================================================================================

#define SUBSYS(_x) _x ## _cgrp_id,
enum cgroup_subsys_id {
#include <linux/cgroup_subsys.h>
	CGROUP_SUBSYS_COUNT,
};


enum cgroup_subsys_id {
	cpuset_cgrp_id,
	cpu_cgrp_id,
	cpuacct_cgrp_id,
	io_cgrp_id,
	memory_cgrp_id,
	devices_cgrp_id,
	freezer_cgrp_id,
	net_cls_cgrp_id,
	perf_event_cgrp_id,
	net_prio_cgrp_id,
	hugetlb_cgrp_id,
	pids_cgrp_id,
	rdma_cgrp_id,
	debug_cgrp_id,
	CGROUP_SUBSYS_COUNT,
};

0.1.2 cgroup_subsys_name
================================================================================
#define SUBSYS(_x) [_x ## _cgrp_id] = #_x,
static const char *cgroup_subsys_name[] = {
#include <linux/cgroup_subsys.h>
};


static const char *cgroup_subsys_name[] = {
	[cpuset_cgrp_id]       =      "cpuset",
	[cpu_cgrp_id]          =      "cpu",
	[cpuacct_cgrp_id]      =      "cpuacct",
	[io_cgrp_id]           =      "io",
	[memory_cgrp_id]       =      "memory",
	[devices_cgrp_id]      =      "devices",
	[freezer_cgrp_id]      =      "freezer",
	[net_cls_cgrp_id]      =      "net_cls",
	[perf_event_cgrp_id]   =      "perf_event",
	[net_prio_cgrp_id]     =      "net_prio",
	[hugetlb_cgrp_id]      =      "hugetlb",
	[pids_cgrp_id]         =      "pids",
	[rdma_cgrp_id]         =      "rdma",
	[debug_cgrp_id]        =      "debug",
};

0.1.3 cgroup_subsys[], an array of cgroup subsystem
================================================================================

#define SUBSYS(_x) [_x ## _cgrp_id] = &_x ## _cgrp_subsys,
struct cgroup_subsys *cgroup_subsys[] = {
#include <linux/cgroup_subsys.h>
};

Will be expanded to:

struct cgroup_subsys *cgroup_subsys[] = {

	SUBSYS(cpuset)
	SUBSYS(cpu)
	SUBSYS(cpuacct)
	SUBSYS(io)
	SUBSYS(memory)
	SUBSYS(devices)
	SUBSYS(freezer)
	SUBSYS(net_cls)
	SUBSYS(perf_event)
	SUBSYS(net_prio)
	SUBSYS(hugetlb)
	SUBSYS(pids)
	SUBSYS(rdma)
	SUBSYS(debug)

};

struct cgroup_subsys *cgroup_subsys[] = {

	[cpuset_cgrp_id]       =      cpuset_cgrp_subsys,
	[cpu_cgrp_id]          =      cpu_cgrp_subsys,
	[cpuacct_cgrp_id]      =      cpuacct_cgrp_subsys,
	[io_cgrp_id]           =      io_cgrp_subsys,
	[memory_cgrp_id]       =      memory_cgrp_subsys,
	[devices_cgrp_id]      =      devices_cgrp_subsys,
	[freezer_cgrp_id]      =      freezer_cgrp_subsys,
	[net_cls_cgrp_id]      =      net_cls_cgrp_subsys,
	[perf_event_cgrp_id]   =      perf_event_cgrp_subsys,
	[net_prio_cgrp_id]     =      net_prio_cgrp_subsys,
	[hugetlb_cgrp_id]      =      hugetlb_cgrp_subsys,
	[pids_cgrp_id]         =      pids_cgrp_subsys,
	[rdma_cgrp_id]         =      rdma_cgrp_subsys,
	[debug_cgrp_id]        =      debug_cgrp_subsys,

};

0.1.4 static_key, checked for cgroup_subsys_enabled()
================================================================================
Enable and disabled by static_branch_enable/static_branch_disable.

/* array of static_keys for cgroup_subsys_enabled() and cgroup_subsys_on_dfl() */
#define SUBSYS(_x)								\
	DEFINE_STATIC_KEY_TRUE(_x ## _cgrp_subsys_enabled_key);			\
	DEFINE_STATIC_KEY_TRUE(_x ## _cgrp_subsys_on_dfl_key);			\
	EXPORT_SYMBOL_GPL(_x ## _cgrp_subsys_enabled_key);			\
	EXPORT_SYMBOL_GPL(_x ## _cgrp_subsys_on_dfl_key);
#include <linux/cgroup_subsys.h>
#undef SUBSYS

#define SUBSYS(_x) [_x ## _cgrp_id] = &_x ## _cgrp_subsys_enabled_key,
static struct static_key_true *cgroup_subsys_enabled_key[] = {
#include <linux/cgroup_subsys.h>
};
#undef SUBSYS

#define SUBSYS(_x) [_x ## _cgrp_id] = &_x ## _cgrp_subsys_on_dfl_key,
static struct static_key_true *cgroup_subsys_on_dfl_key[] = {
#include <linux/cgroup_subsys.h>
};
#undef SUBSYS


#define SUBSYS(_x)								\
	extern struct static_key_true _x ## _cgrp_subsys_enabled_key;		\
	extern struct static_key_true _x ## _cgrp_subsys_on_dfl_key;
#include <linux/cgroup_subsys.h>
#undef SUBSYS

Will be expanded to two array:

struct cgroup_subsys *cgroup_subsys_enabled_key[] = {

	[cpuset_cgrp_id]       =      cpuset_cgrp_subsys_enabled_key,
	[cpu_cgrp_id]          =      cpu_cgrp_subsys_enabled_key,
	[cpuacct_cgrp_id]      =      cpuacct_cgrp_subsys_enabled_key,
	[io_cgrp_id]           =      io_cgrp_subsys_enabled_key,
	[memory_cgrp_id]       =      memory_cgrp_subsys_enabled_key,
	[devices_cgrp_id]      =      devices_cgrp_subsys_enabled_key,
	[freezer_cgrp_id]      =      freezer_cgrp_subsys_enabled_key,
	[net_cls_cgrp_id]      =      net_cls_cgrp_subsys_enabled_key,
	[perf_event_cgrp_id]   =      perf_event_cgrp_subsys_enabled_key,
	[net_prio_cgrp_id]     =      net_prio_cgrp_subsys_enabled_key,
	[hugetlb_cgrp_id]      =      hugetlb_cgrp_subsys_enabled_key,
	[pids_cgrp_id]         =      pids_cgrp_subsys_enabled_key,
	[rdma_cgrp_id]         =      rdma_cgrp_subsys_enabled_key,
	[debug_cgrp_id]        =      debug_cgrp_subsys_enabled_key,

};

struct cgroup_subsys *cgroup_subsys_on_dfl_key[] = {

	[cpuset_cgrp_id]       =      cpuset_cgrp_subsys_on_dfl_key,
	[cpu_cgrp_id]          =      cpu_cgrp_subsys_on_dfl_key,
	[cpuacct_cgrp_id]      =      cpuacct_cgrp_subsys_on_dfl_key,
	[io_cgrp_id]           =      io_cgrp_subsys_on_dfl_key,
	[memory_cgrp_id]       =      memory_cgrp_subsys_on_dfl_key,
	[devices_cgrp_id]      =      devices_cgrp_subsys_on_dfl_key,
	[freezer_cgrp_id]      =      freezer_cgrp_subsys_on_dfl_key,
	[net_cls_cgrp_id]      =      net_cls_cgrp_subsys_on_dfl_key,
	[perf_event_cgrp_id]   =      perf_event_cgrp_subsys_on_dfl_key,
	[net_prio_cgrp_id]     =      net_prio_cgrp_subsys_on_dfl_key,
	[hugetlb_cgrp_id]      =      hugetlb_cgrp_subsys_on_dfl_key,
	[pids_cgrp_id]         =      pids_cgrp_subsys_on_dfl_key,
	[rdma_cgrp_id]         =      rdma_cgrp_subsys_on_dfl_key,
	[debug_cgrp_id]        =      debug_cgrp_subsys_on_dfl_key,

};

0.2 cgroup filesystem
================================================================================

0.2.1 cgroup_fs_type / cgroup2_fs_type
================================================================================

    cgroup_fs_type
    +-------------------------------+
    |name                           |  = "cgroup"
    |init_fs_context                |  = cgroup_init_fs_context
    |parameters                     |  = cgroup1_fs_parameters
    |kill_sb                        |  = cgroup_kill_sb
    |fs_flags                       |  = FS_USERNS_MOUNT
    |                               |
    +-------------------------------+

    cgroup2_fs_type
    +-------------------------------+
    |name                           |  = "cgroup2"
    |init_fs_context                |  = cgroup_init_fs_context
    |parameters                     |  = cgroup2_fs_parameters
    |kill_sb                        |  = cgroup_kill_sb
    |fs_flags                       |  = FS_USERNS_MOUNT
    |                               |
    +-------------------------------+


    +-----------------------+
    |get_tree               |
    |                       |
    |                       |
    +-----------------------+

0.2.2 fs_context / cgroup_fs_context / fs_context_operations
================================================================================

cgroup_fs_context_ops is created and setup by cgroup_init_fs_context().
Other things are setup by vfs_get_tree(), cgroup1_get_tree().

    fs_context
    +-------------------------------+
    |ops                            |  = cgroup_fs_context_ops / cgroup1_fs_context_ops
    |(struct fs_context_operations*)|    +-----------------------+
    |                               |    |get_tree               |  = cgroup_get_tree / cgroup1_get_tree
    |                               |    |parse_param            |  = cgroup1_parse_param / cgroup2_parse_param
    |                               |    |                       |
    |                               |    +-----------------------+
    |                               |
    |                               |    struct kernfs_super_info
    |s_fs_info                   ---|--->+--------------------------+
    |    (void*)                    |    |root                      |  = kfc->root
    |                               |    |ns                        |  = kfc->ns_tag
    |                               |    |                          |
    |                               |    +--------------------------+
    |                               |
    |                               |
    |root                           |
    |    (struct dentry*)           |
    |                               |
    |                               |         cgroup_fs_context
    |private                        |         +-------------------------------+                    
    |    (void *)                ---|-------->|kfc                            |  kernfs superblock
    +-------------------------------+         |    (struct kernfs_fs_context) |
                                              |    +--------------------------+
                                              |    |magic                     |  = CGROUP_SUPER_MAGIC / CGROUP2_SUPER_MAGIC
                                              |    |    (unsigned long)       |
                                              |    |                          |
                                              |    |root                   ---|-----+
                                              |    |    (struct kernfs_root*) |     |
                                              |    |                          |     |
                                              |    +--------------------------+     |
                                              |                               |     |
                                              |root                           |     |
                                              |    (struct cgroup_root*)      |     |
                                              |    +--------------------------+     |
                                              |    |kf_root                   |<----+
                                              |    |    (struct kernfs_root*) |
                                              |    +--------------------------+
                                              |                               |
                                              |ns                             |
                                              |    (struct cgroup_namespace*) |
                                              |    +--------------------------+
                                              |    |ns                        |
                                              |    |  (struct ns_common)      |
                                              |    |user_ns                   |
                                              |    |  (struct user_namespace*)|
                                              |    |ucounts                   |
                                              |    |  (struct ucounts*)       |
                                              |    |root_cset                 |
                                              |    |  (struct css_set*)       |
                                              |    +--------------------------+
                                              |                               |
                                              |flags                          |
                                              |                               |
                                      v1 bits +-------------------------------+
                                              |                               |
                                              |none/all_ss                    |
                                              |    (bool)                     |
                                              |subsys_mask                    |
                                              |    (u16)                      |
                                              +-------------------------------+
    
    

0.3 cgroup_root / cgroup / kernfs_root / cftype
================================================================================

cgroup_init
    cgroup_setup_root

For cgroup-v1, each directory under /sys/fs/cgroup/ is a cgroup_root.
The call trace is:

[    2.009597]  cgroup_setup_root+0x4d/0x2a7
[    2.010063]  cgroup1_get_tree+0x21c/0x3c0
[    2.010528]  vfs_get_tree+0x20/0xb0
[    2.010935]  path_mount+0x425/0x990
[    2.011343]  do_mount+0x70/0x90
[    2.011708]  __x64_sys_mount+0xbf/0xe0
[    2.012141]  do_syscall_64+0x3a/0x80
[    2.012585]  entry_SYSCALL_64_after_hwframe+0x44/0xae

cgroup_roots(struct list_head)
  |
  |       cgroup_root(cgrp_dfl_root)
  |       +-------------------------------+<----+
  +------>|root_lists                     |     |
          |    (struct list_head)         |     |
          |name[]                         |     |
          |    (char)                     |     |
          |hierarchy_id                   |     |
          |    (int)                      |     |
          |                               |     |
          |cgrp                           |     |
          |    (struct cgroup)            |     |
          |    +--------------------------+<----|--------------------------+
          |    |root                   ---|-----+                          |
          |    |   (struct cgroup_root*)  |                                |
          |    |                          |                                |
          |    |rstat_cpu                 |  = &cgrp_dfl_root_rstat_cpu    |
          |    |(struct cgroup_rstat_cpu*)|                                |
          |    |                          |                                |
          |    |kn                        |  = kf_root->kn                 |
          |    |    (struct kernfs_node *)|-----+                          |
          |    |  +-----------------------+     |                          |
          |    |  |                       |     |                          |
          |    +--+-----------------------+     |                          |
          |kf_root                        |     |                          |
          |    (struct kernfs_root*)      |     |                          |
          |    +--------------------------+     |                          |
          |    |kn                        |     |                          |
          |    |  (struct kernfs_node*)   |     |                          |
          |    |  +-----------------------+<----+                          |
          |    |  |priv                   |--------------------------------+
          |    |  |  (void *)             |  = cgrp_dfl_root.cgrp 
          |    |  |cgroup_base_files      |
          |    |  |cgroup1_base_files     |
          |    |  |     "cgroup.procs"    |  = cgroup_kf_ops
          |    |  |     "cgroup.threads"  |  = cgroup_kf_ops
          |    |  |                       |
          |    +--+-----------------------+
          |    |syscall_ops               |  = cgroup_kf_syscall_ops     
          |    |  (struct kernfs_syscall*)|
          |    |  +-----------------------+
          |    |  |mkdir                  |  = cgroup_mkdir
          |    |  |rmdir                  |  = cgroup_rmdir
          |    |  |show_path              |  = cgroup_show_path
          |    |  |show_options           |  = cgroup_show_options
          |    |  +-----------------------+
          |    +--------------------------+
          |                               |
          |cgrp_ancestor_id_storage       |  = cgroup_id() = cgrp->kn->id = kf_root->kn->id
          |    (u64)                      |
          |                               |
          |subsys_mask                    |  bitmask of subsys attached
          |    (unsigned int)             |  set in cgroup_init() for cgrp_dfl_root
          |                               |      in rebind_subsystems() for others
          |                               |
          |nr_cgrps                       |
          |    (atomic_t)                 |
          |root_list                      |
          |    (struct list_head)         |
          |                               |
          +-------------------------------+

0.3.1 cftype, cgroup_base_files/cgroup1_base_files
================================================================================
/*
 * struct cftype: handler definitions for cgroup control files
 *
 * When reading/writing to a file:
 *	- the cgroup to use is file->f_path.dentry->d_parent->d_fsdata
 *	- the 'cftype' of the file is file->f_path.dentry->d_fsdata
 */

initialized by cgroup_init_cftypes(), and set cft->kf_ops to cgroup_kf_ops or
cgroup_kf_single_ops, which will be set to kernfs_node->attr.ops.
populated by css_populate_dir()

    cftype
    +-------------------------------+
    |name[MAX_CFTYPE_NAME]          |
    |    (char)                     |
    |ss                             |  = NULL for core interface
    |    (struct cgroup_subsys*)    |    non-NULL for subsys
    |node                           |
    |    (struct list_head)         |
    |kf_ops                         |  = cgroup_kf_ops | cgroup_kf_single_ops
    |    (struct kernfs_ops*)       |
    |                               |
    |open                           |
    |release                        |
    |read|write_u64                 |
    |read|write_s64                 |
    |write                          |
    |poll                           |
    |                               |
    |seq_show                       |
    |seq_start|stop|next            |
    |                               |
    +-------------------------------+

0.3.1.1 cgroup_kf_ops
================================================================================

    kernfs_ops
    +-------------------------------+
    |open                           |  = cgroup_file_open
    |release                        |  = cgroup_file_release
    |write                          |  = cgroup_file_write
    |poll                           |  = cgroup_file_poll
    |                               |
    |seq_start                      |  = cgroup_seqfile_start
    |seq_stop                       |  = cgroup_seqfile_stop
    |seq_next                       |  = cgroup_seqfile_next
    |seq_show                       |  = cgroup_seqfile_show
    |                               |
    +-------------------------------+

0.3.2 cgroup_root.kf_root.kn / root_cgroup.kn / cftype
================================================================================

cgrp = of->kn->parent->priv;
cft  = of->kn->priv;

created/connected by css_populate_dir()

  cgroup_root
  +---------------------------+<-------------------------------------+
  |kf_root                    |                                      |
  |    (struct kernfs_root*)  |                                      |
  |    +----------------------+                                      |
  |    |kn                 ---|-----+                                |
  |    | (struct kernfs_node*)|     |                                |
  +----+----------------------+     +-->kernfs_node                  |
                                    |   +------------------------+<--|-----------------+
                                    |   |parent               ---|---+                 |
  cgropu_root.cgrp                  |   |   (struct kernfs_root*)|                     |
  +---------------------------+     |   |priv                    |  = struct cgroup *  |
  |kn                      ---|-----+   |   (void *)             |                     |
  |    (struct kernfs_node*)  |         +------------------------+                     |
  +---------------------------+                                                        |
                                                                                       |
                                                                                       |
                                        kernfs_node                                    |
                                        +------------------------+                     |
                                        |parent               ---|---------------------+
                                        |   (struct kernfs_root*)|                     |
                                        |priv                    |  = struct cftype *  |
                                        |   (void *)             |                     |
                                        |attr.ops                |  = cft->kf_ops      |
                                        |   (struct kernfs_ops *)|                     |
                                        +------------------------+                     |
                                                                                       |
                                                                                       |
                                        kernfs_node                                    |
                                        +------------------------+                     |
                                        |parent               ---|---------------------+
                                        |   (struct kernfs_root*)|
                                        |priv                    |  = struct cftype *
                                        |   (void *)             |
                                        |attr.ops                |  = cft->kf_ops
                                        |   (struct kernfs_ops *)|
                                        +------------------------+


0.4 cgroup / cgroup_subsys_state / cgroup_subsys
================================================================================

0.4.1 cgroup
================================================================================

    cgroup (cgrp_dfl_root.cgrp)
    +--------------------------------------+<------------+
    |root                                  |             |
    |    (struct cgroup_root*)             |             |
    |dom_cgrp                           ---|-------------+ if !threaded
    |old_dom_cgrp                          |             |
    |    (struct cgroup*)                  |             |
    |                                      |             |
    |rstat_cpu                             |             |
    |    (struct cgroup_rstat_cpu* _percpu)|             |
    |    +---------------------------------+             |
    |    |updated_children              ---|-------------+
    |    |updated_next                     |             |
    |    |    (struct cgroup*)             |             |
    |    |                                 |             |
    |    |bsync                            |             |
    |    |                                 |             |
    |    |bstat                            |             |
    |    |last_bstat                       |             |
    |    |     (struct cgroup_base_stat)   |             |
    |    |     +---------------------------+             |
    |    |     |cputime                    |             |
    |    |     |    (struct task_cputime)  |             |
    |    |     |    +----------------------+             |
    |    |     |    |stime                 |             |
    |    |     |    |utime                 |             |
    |    |     |    |    (u64)             |             |
    |    |     |    |sum_exec_runtime      |             |
    |    |     |    |    (unsigned long)   |             |
    |    |     +----+----------------------+             |
    |    |                                 |             |
    |    +---------------------------------+             |
    |rstat_css_list                        |             |
    |    (struct list_head)                |             |
    |                                      |             |
    |self                                  |             |
    |    (struct cgroup_subsys_state)      |             |
    |    +---------------------------------+             |
    |    |cgroup                        ---|-------------+
    |    |    (struct cgroup*)             |
    |    |ss                               |  = NULL
    |    |    (struct cgroup_subsys*)      |
    |    |id                               |  subsys unique id
    |    |    (int)                        |
    |    |refcnt                           |
    |    |    (struct percpu_ref)          |
    |    |    +----------------------------+
    |    |    |release                     |  = css_release
    |    |    |                            |
    |    |    |                            |
    |    |    +----------------------------+
    |    |                                 |
    |    |parent                           |
    |    |    (struct cgroup_subsys_state*)|
    |    |                                 |
    |    |sibling                          |
    |    |children                         |
    |    |    (struct list_head)           |
    |    |                                 |
    |    +---------------------------------+
    |                                      |
    |                                      |  allocated by cgroup_subsys->css_alloc()
    |subsys[CGROUP_SUBSYS_COUNT]           |  and set by online_css()
    |    (struct cgroup_subsys_state*)     |
    |    +---------------------------------+
    |    |parent                           |  = cgroup_css(cgroup_parent(cgrp), ss)
    |    |    (struct cgroup_subsys_state*)|
    |    |cgroup                           |  = this cgrp
    |    |    (struct cgroup*)             |
    |    |ss                               |  = cgroup_subsys[i]
    |    |    (struct cgroup_subsys*)      |
    |    |                                 |
    |    +---------------------------------+
    |                                      |
    |subtree_control                       |  = parent->subtree_control or root->subsys_mask
    |subtree_ss_mask                       |    cgroup_propagate_control()
    |    (u16)                             |
    |                                      |
    |                                      |
    |level                                 |
    |max_depth                             |  = INT_MAX
    |                                      |
    |max_descendants                       |  = INT_MAX
    |nr_descendants                        |
    |nr_dying_descendants                  |
    |    (int)                             |
    |                                      |
    |ancestor_ids[]                        |
    |    (u64)                             |
    |                                      |
    |kn                                    |  = cgrp_dfl_root->kf_root->kn
    |    (struct kernfs_node *)            |    or a child
    |                                      |
    |flags                                 |  CGRP_NOTIFY_ON_RELEASE | CGRP_CPUSET_CLONE_CHILDREN
    |    (unsigned long)                   |  CGRP_FREEZE | CGRP_FROZEN
    |                                      |
    |                                      |
    |                                      |  Above are fields connecting cgroup hierarchy
    +======================================+
    |                                      |  Below are fields connecting tasks
    |                                      |
    |                                      |
    |                                      |    cgrp_cset_link    cgrp_cset_link
    |                                      |    +--------------+     +--------------+
    |cset_links                         ---|--->|cset_link    -| --->|cset_link     |
    |    (struct list_head)                |    |              |     |              |
    |                                      |    |cset      --+ |     |cset     --+  |
    |                                      |    +--------------+     +--------------+
    |                                      |                 |                   |
    |                                      |    init_css_set v       css_set     v
    |                                      |    +--------------+     +--------------+
    |                                      |    |              |     |              |
    |                                      |    |              |     |              |
    |                                      |    +--------------+     +--------------+
    |                                      |
    |                                      |    init_css_set          css_set
    |e_csets[CGROUP_SUBSYS_COUNT]          |    +---------------+     +---------------+
    |e_csets[0]                         ---|--->|e_cset_node[0] |---->|e_cset_node[0] |
    |e_csets[1]                         ---|--->|e_cset_node[1] |---->|e_cset_node[1] |
    |e_csets[2]                         ---|--->|e_cset_node[2] |---->|e_cset_node[2] |
    |    (struct list_head)                |    |               |     |               |
    |                                      |    +---------------+     +---------------+
    |                                      |
    |                                      |
    |procs_file                            |  cgroup.procs
    |events_file                           |  cgroup.events
    |    (struct cgroup_file)              |
    |                                      |
    |pidlists                              |
    |    (struct list_head)                |
    |pidlist_mutex                         |
    |    (struct mutex)                    |
    |                                      |
    |release_agent_work                    |  = cgroup1_release_agent
    |    (struct work_struct)              |
    |                                      |
    |nr_populated_csets                    |
    |nr_populated_domain_children          |
    |nr_populated_threaded_children        |
    |nr_threaded_children                  |
    |    (struct int)                      |
    |                                      |
    |                                      |
    +--------------------------------------+

0.4.2 cgroup_subsys_state
================================================================================
There are two kinds of cgroup_subsys_state

  * css.ss == NULL: this is a cgrp->self
  * css.ss != NULL: this is a cgrp->subsys[]

    struct cgroup_subsys_state
    +--------------------------------------+
    |cgroup                                |             
    |    (struct cgroup*)                  |
    |ss                                    | = NULL or cgroup_subsys[]
    |    (struct cgroup_subsys*)           |
    |id                                    | subsys unique id
    |    (int)                             |
    |refcnt                                |
    |    (struct percpu_ref)               |
    |    +---------------------------------+
    |    |release                          | = css_release
    |    |                                 |
    |    |                                 |
    |    +---------------------------------+
    |                                      |
    |parent                                |
    |    (struct cgroup_subsys_state*)     |
    |                                      |
    |sibling                               |
    |children                              |
    |rstat_css_node                        |
    |    (struct list_head)                |
    |                                      |
    +--------------------------------------+

0.4.3 cgroup_subsys
================================================================================


    cgroup_subsys
    +-------------------------------+<----------------------------------------+
    |name                           |                                         |
    |legacy_name                    |                                         |
    |    (char *)                   |                                         |
    |id                             |                                         |
    |    (int)                      |                                         |
    |css_idr                        |                                         |
    |    (struct idr)               |                                         |
    |                               |                                         |
    |root                           |  = &cgrp_dfl_root                       |
    |    (struct cgroup_root*)      |    init in cgroup_init_subsys()         |
    |                               |    rebind in rebind_subsystems()        |
    |                               |                                         |
    |                               |                                         |
    |dfl_cftypes                    |  be populated by css_populate_dir()     |
    |legacy_cftypes                 |                                         |
    |    (struct cftype*)           |                                         |
    |                               |    dfl_cftypes       legacy_cftypes     |
    |                               |    +------------+    +------------+     |
    |cfts                        ---|--->|node     ---|--->|node        |     |
    |    (struct list_head)         |    |ss          |    |ss       ---|-----+
    |                               |    |kf_ops      |    |kf_ops      |
    |                               |    +------------+    +------------+    
    |depends_on                     |
    |    (unsigned int)             |
    |                               |
    +-------------------------------+  Methods
    |                               |
    |css_alloc                      |
    |css_online/offline             |
    |css_released                   |
    |css_free                       |
    |css_reset                      |
    |css_rstat_flush                |
    |css_extra_stat_show            |
    |                               |
    |can_attach                     |
    |cancel_attach                  |
    |attach                         |
    |post_attach                    |
    |can_fork                       |
    |cancel_fork                    |
    |fork                           |
    |exit                           |
    |release                        |
    |bind                           |
    +-------------------------------+

0.4.4 cgroup/cgroup_subsys_state/cgroup_subsys
================================================================================

    cgroup
    +--------------------------------------+<--------------------------+
    |                                      |                           |
    |subsys[CGROUP_SUBSYS_COUNT]           |                           |
    |    (struct cgroup_subsys_state*)     |                           |
    |    [0]  +----------------------------+                           |
    |         |cgroup                      |---------------------------+
    |         |   (struct cgroup*)         |                           |
    |         |ss                          |  = cgroup_subsys[0]       |
    |         |   (struct cgroup_subsys*)  |                           |
    |    [1]  +----------------------------+                           |
    |         |cgroup                      |---------------------------+
    |         |   (struct cgroup*)         |                           |
    |         |ss                          |  = cgroup_subsys[1]       |
    |         |   (struct cgroup_subsys*)  |                           |
    |    [2]  +----------------------------+                           |
    |         |                            |                           |
    |         .                            .                           |
    |         .                            .                           |
    |         |                            |                           |
    |    [15] +----------------------------+                           |
    |         |cgroup                      |---------------------------+
    |         |   (struct cgroup*)         |
    |         |ss                          |  = cgroup_subsys[15]
    |         |   (struct cgroup_subsys*)  |
    |         |                            |
    +---------+----------------------------+

0.4.5 cgroup hierarchy -> cgroup.self
================================================================================

linked by cgroup_create()
iterated by css_for_each_descendant_[pre|post]

                     cgroup
                     +--------------------------------------+
                     |self                              ^   |
                     |    (struct cgroup_subsys_state)  |   |
                     |    +---------------------------------+
                     |    |cgroup                    ---+   |
                     |    |    (struct cgroup*)             |
                     |    |ss                               |
                     |    |    (struct cgroup_subsys*)      |  = NULL
                     |    |parent                           |
                     |    |    (struct cgroup_subsys_state*)|
                     |    |                                 |
                     |    |children                ||       |
                     |    |    (struct list_head)  ||       |
                     +----+---------------------------------+ <--------------------------------------+
                                              ^    ||                                                |
       	                                      |    ||                                                |
                                              |    ||                                                |
                                              |    ||                                                |
                                              |    ||                                                |
    cgroup                                    |    ||      cgroup                                    |
    +--------------------------------------+  |    ||      +--------------------------------------+  |
    |self                              ^   |  |    ||      |self                              ^   |  |
    |    (struct cgroup_subsys_state)  |   |  |    ||      |    (struct cgroup_subsys_state)  |   |  |
    |    +---------------------------------+  |    ||      |    +---------------------------------+  |
    |    |cgroup                    ---+   |  |    ||      |    |cgroup                    ---+   |  |
    |    |    (struct cgroup*)             |  |    ||      |    |    (struct cgroup*)             |  |
    |    |                                 |  |    ||      |    |                                 |  |
    |    |parent                        ---|--+    ||      |    |parent                        ---|--+
    |    |    (struct cgroup_subsys_state*)|       ||      |    |    (struct cgroup_subsys_state*)|
    |    |                                 |       ||      |    |                                 |
    |    |sibling                      ====|=======++======|====|sibling                          |
    |    |    (struct list_head)           |               |    |    (struct list_head)           |
    +----+---------------------------------+               +----+---------------------------------+

0.4.6 cgroup hierarchy -> cgroup.subsys[]
================================================================================

linked by css_create()

                     cgroup
                     +--------------------------------------+
                     |subsys[id]                        ^   |
                     |    (struct cgroup_subsys_state*) |   |
                     |    +---------------------------------+
                     |    |cgroup                    ---+   |
                     |    |    (struct cgroup*)             |
                     |    |ss                               |
                     |    |    (struct cgroup_subsys*)      |  = non-NULL
                     |    |                                 |
                     |    |parent                           |
                     |    |    (struct cgroup_subsys_state*)|
                     |    |                                 |
                     |    |children                ||       |
                     |    |    (struct list_head)  ||       |
                     +----+---------------------------------+ <--------------------------------------+
                                              ^    ||                                                |
       	                                      |    ||                                                |
                                              |    ||                                                |
                                              |    ||                                                |
                                              |    ||                                                |
    cgroup                                    |    ||      cgroup                                    |
    +--------------------------------------+  |    ||      +--------------------------------------+  |
    |subsys[id]                        ^   |  |    ||      |subsys[id]                        ^   |  |
    |    (struct cgroup_subsys_state*) |   |  |    ||      |    (struct cgroup_subsys_state*) |   |  |
    |    +---------------------------------+  |    ||      |    +---------------------------------+  |
    |    |cgroup                    ---+   |  |    ||      |    |cgroup                    ---+   |  |
    |    |    (struct cgroup*)             |  |    ||      |    |    (struct cgroup*)             |  |
    |    |                                 |  |    ||      |    |                                 |  |
    |    |parent                        ---|--+    ||      |    |parent                        ---|--+
    |    |    (struct cgroup_subsys_state*)|       ||      |    |    (struct cgroup_subsys_state*)|
    |    |                                 |       ||      |    |                                 |
    |    |sibling                      ====|=======++======|====|sibling                          |
    |    |    (struct list_head)           |               |    |    (struct list_head)           |
    +----+---------------------------------+               +----+---------------------------------+


0.7 css_set, holding pointers to a set of cgroup_subsys_state
================================================================================

0.7.1 css_set/css_set_table
================================================================================

   css_set_table              css_set
   +---------------+          +-------------------------------+
   |               |     +--->|hlist                          |
   |               |     |    |    (struct hlist_node)        |
   +---------------+     |    |                               |
   |css_set_hash() |-----+    |refcount                       |
   |               |          |    (refcount_t)               |
   +---------------+          |dom_cset                       |
   |               |          |    (struct css_set*)          |
   |               |          |dfl_cgrp                       |
   +---------------+          |    (struct cgroup*)           |
                              |                               |
                              |subsys[CGROUP_SUBSYS_COUNT]    |
                              |  (struct cgroup_subsys_state*)|
                              |  +----------------------------+
                              |  |ss                          |
                              |  |    (struct cgroup_subsys*) |
                              |  +----------------------------+
                              |                               |
                              |e_cset_node[CGROUP_SUBSYS_COUN]|
                              |  (struct list_head)           |
                              |                               |
                              |tasks                          |
                              |mg_tasks                       |
                              |dying_tasks                    |
                              |    (struct list_head)         |
                              |                               |
                              |task_iters                     |
                              |    (struct list_head)         |
                              |                               |
                              |cgrp_links                     |
                              |    (struct list_head)         |
                              |                               |
                              |mg_preload_node                |
                              |mg_node                        |
                              |    (struct list_head)         |
                              |                               |
                              |mg_src_cgrp                    |
                              |mg_dst_cgrp                    |
                              |    (struct cgroup*)           |
                              |mg_dst_cset                    |
                              |    (struct css_set*)          |
                              |                               |
                              +-------------------------------+

0.7.2 css_set/task, used by init and its children by default
================================================================================

    init_task(struct task_struct)
    +-------------------------------+
    |cgroups                        |  = &init_css_set(struct css_set)
    |    (struct css_set)           |    +-------------------------+
    +-------------------------------+    |subsys[]                 |  = assigned in cgroup_init_subsys()
                                         |                         |    the same as cgrp_dfl_root.cgrp.subsys[]
                                         |                         |
                                         |                         |
                                         +-------------------------+

0.7.3 init_css_set/cgrp_dfl_root.cgrp
================================================================================

0.8 cgrp_cset_link
================================================================================

    cgrp_cset_link
    +-------------------------------+
    |cgrp                           |
    |    (struct cgroup*)           |
    |cset                           |
    |    (struct css_set*)          |
    |                               |
    |cset_link                      |
    |cgrp_link                      |
    |    (struct list_head)         |
    +-------------------------------+

0.8.1 cgrp_cset_link connects css_set / cgroup
================================================================================
linked by link_css_set()

 css_set
 +--------------------+------------+-----------------------------+
 |cgrp_links          |            |                             |
 +--------------------+            |                             |
    |                              |                             |
    |                              |                             |
    |      cgrp_cset_link          |     cgrp_cset_link          |
    |      +--------------------+  |     +--------------------+  |
    |      |cset            ----|--+     |cset             ---|--+
    +----->|cgrp_link           |------->|cgrp_link           |
           |cgrp  ---+          |        |cgrp  ---+          |
           +--------------------+        +--------------------+
                     |                             |
           cgroup    v                   cgroup    v
           +--------------------+        +--------------------+
           |                    |        |                    |
           +--------------------+        +--------------------+


 cgroup
 +--------------------+------------+-----------------------------+
 |cset_links          |            |                             |
 +--------------------+            |                             |
    |                              |                             |
    |                              |                             |
    |      cgrp_cset_link          |     cgrp_cset_link          |
    |      +--------------------+  |     +--------------------+  |
    |      |cgrp            ----|--+     |cgrp             ---|--+
    +----->|cset_link           |------->|cset_link           |
           |cset  ---+          |        |cset  ---+          |
           +--------------------+        +--------------------+
                     |                             |
           css_set   v                   css_set   v
           +--------------------+        +--------------------+
           |                    |        |                    |
           +--------------------+        +--------------------+

