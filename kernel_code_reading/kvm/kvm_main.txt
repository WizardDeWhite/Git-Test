1. kvm_init()
================================================================================
int kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
		  struct module *module)
{
	int r;
	int cpu;

	r = kvm_arch_init(opaque);
	if (r)
		goto out_fail;

	/*
	 * kvm_arch_init makes sure there's at most one caller
	 * for architectures that support multiple implementations,
	 * like intel and amd on x86.
	 * kvm_arch_init must be called before kvm_irqfd_init to avoid creating
	 * conflicts in case kvm is already setup for another implementation.
	 */
	r = kvm_irqfd_init();
	if (r)
		goto out_irqfd;

	if (!zalloc_cpumask_var(&cpus_hardware_enabled, GFP_KERNEL)) {
		r = -ENOMEM;
		goto out_free_0;
	}

	r = kvm_arch_hardware_setup();
	if (r < 0)
		goto out_free_0a;

	for_each_online_cpu(cpu) {
		smp_call_function_single(cpu,
				kvm_arch_check_processor_compat,
				&r, 1);
		if (r < 0)
			goto out_free_1;
	}

	r = register_cpu_notifier(&kvm_cpu_notifier);
	if (r)
		goto out_free_2;
	register_reboot_notifier(&kvm_reboot_notifier);

	/* A kmem cache lets us meet the alignment requirements of fx_save. */
	if (!vcpu_align)
		vcpu_align = __alignof__(struct kvm_vcpu);
	kvm_vcpu_cache = kmem_cache_create("kvm_vcpu", vcpu_size, vcpu_align,
					   0, NULL);
	if (!kvm_vcpu_cache) {
		r = -ENOMEM;
		goto out_free_3;
	}

	r = kvm_async_pf_init();
	if (r)
		goto out_free;

	kvm_chardev_ops.owner = module;
	kvm_vm_fops.owner = module;
	kvm_vcpu_fops.owner = module;

	r = misc_register(&kvm_dev);
	if (r) {
		pr_err("kvm: misc device register failed\n");
		goto out_unreg;
	}

	register_syscore_ops(&kvm_syscore_ops);

	kvm_preempt_ops.sched_in = kvm_sched_in;
	kvm_preempt_ops.sched_out = kvm_sched_out;

	r = kvm_init_debug();
	if (r) {
		pr_err("kvm: create debugfs files failed\n");
		goto out_undebugfs;
	}

	r = kvm_vfio_ops_init();
	WARN_ON(r);

	return 0;

out_undebugfs:
	unregister_syscore_ops(&kvm_syscore_ops);
	misc_deregister(&kvm_dev);
out_unreg:
	kvm_async_pf_deinit();
out_free:
	kmem_cache_destroy(kvm_vcpu_cache);
out_free_3:
	unregister_reboot_notifier(&kvm_reboot_notifier);
	unregister_cpu_notifier(&kvm_cpu_notifier);
out_free_2:
out_free_1:
	kvm_arch_hardware_unsetup();
out_free_0a:
	free_cpumask_var(cpus_hardware_enabled);
out_free_0:
	kvm_irqfd_exit();
out_irqfd:
	kvm_arch_exit();
out_fail:
	return r;
}

1.1 kvm_arch_init()
================================================================================

1.1.1 alloc_percpu(kvm_shared_msrs)
================================================================================

1.1.2 kvm_mmu_module_init()
================================================================================

1.1.3 kvm_set_mmio_spte_mask()
================================================================================

1.1.4 kvm_mmu_set_mask_ptes()
================================================================================

1.1.5 kvm_timer_init()
================================================================================

1.1.6 perf_register_guest_info_callbacks()
================================================================================

1.1.7 kvm_lapic_init()
================================================================================

1.2 kvm_irqfd_init()
================================================================================

1.3 kvm_arch_hardware_setup()
================================================================================

1.3.1 kvm_x86_ops->hardware_setup()
================================================================================

vmx_bitmap
vmcs_config

1.3.2 kvm_init_msr_list()
================================================================================

initialize those fields

u32 msrs_to_save[], emulated_msrs[], msr_based_features[];

1.4 smp_call_function_single()
================================================================================

1.5 cpuhp_setup_state_nocalls()
================================================================================

1.6 register_reboot_notifier()
================================================================================

1.7 kvm_vcpu_cache = kmem_cache_create("kvm_vspu")
================================================================================

1.8 kvm_async_pf_init()
================================================================================

1.9 misc_register(&kvm_dev)
================================================================================
static struct miscdevice kvm_dev = {
	KVM_MINOR,
	"kvm",
	&kvm_chardev_ops,
};

static struct file_operations kvm_chardev_ops = {
	.unlocked_ioctl = kvm_dev_ioctl,
	.llseek		= noop_llseek,
	KVM_COMPAT(kvm_dev_ioctl),
};

1.9.1 kvm_chardev_ope
================================================================================

1.10 register_syscore_ops(&kvm_syscore_ops)
================================================================================

1.11 kvm_vfio_ops_init()
================================================================================

2. kvm_create_vm()
================================================================================
3. kvm_destroy_vm()
================================================================================
3.1 kvm_uevent_notify_change()
================================================================================
3.2 kvm_destroy_vm_debugfs()
================================================================================
3.3 kvm_arch_sync_events()
================================================================================
3.4 kvm_free_irq_routing()
================================================================================
3.5 kvm_io_bus_destroy()
================================================================================
3.6 kvm_coalesced_mmio_free()
================================================================================
3.7 kvm_arch_destroy_vm()
================================================================================
3.7.1 kvm_x86_ops->vm_destroy()
================================================================================
3.7.2 kvm_pic_destroy()
================================================================================
3.7.3 kvm_ioapic_destroy()
================================================================================
3.7.4 kvm_free_vcpus()
================================================================================
3.7.5 kvfree()
================================================================================
3.7.6 kvm_mmu_uninit_vm()
================================================================================
3.7.7 kvm_page_track_cleanup()
================================================================================
3.7.8 kvm_hv_destroy_vm()
================================================================================
3.8 kvm_destroy_devices()
================================================================================
3.9 kvm_free_memslots()
================================================================================
3.10 kvm_arch_free_vm()
================================================================================
3.11 preempt_notifier_dec()
================================================================================
3.12 hardware_disable_all()
================================================================================
3.13 mmdrop(kvm->mm)
================================================================================
3.13.1 __mmdrop(mm)
================================================================================

0. data structure
================================================================================

0.1 related global variables
================================================================================

struct kvm_x86_ops *kvm_x86_ops;
struct workqueue_struct *irqfd_cleanup_wq;
cpumask_var_t cpus_hardware_enabled;

static unsigned long *vmx_bitmap[VMREAD, VMWRITE];

static struct vmcs_config vmcs_config;

unsigned num_msrs_to_save, num_emulated_msrs, num_msr_based_features;
u32 msrs_to_save[], emulated_msrs[], msr_based_features[];
struct kvm_shared_msrs_global shared_msrs_global;
struct kvm_shared_msrs __percpu *shared_msrs;

0.2 list of virtual machines, vm_list, kvm_lock
================================================================================

All virtual machine is linked on vm_list by kvm->vm_list

    vm_list
    +-------------+
    | |           |
    +-------------+
      |
      |
      |   kvm               kvm               kvm            
      |   +-------------+   +-------------+   +-------------+
      +-->|vm_list      |-->|vm_list      |-->|vm_list      |
          |             |   |             |   |             |
          +-------------+   +-------------+   +-------------+

0.3 kvm
================================================================================

    kvm
    +----------------------------------------------+
    |mm                                            |
    |    (struct mm_struct*)                       |
    |online_vcpus                                  |
    |    (atomic_t)                                |
    |created_vcpus                                 |
    |    (int)                                     |
    |vcpus[KVM_MAX_VCPUS]                          |
    |    (struct kvm_vcpu*)                        |
    |memslots[]                                    |
    |    (struct kvm_memslots*)                    |
    |    +-----------------------------------------+
    |    |generation                               |
    |    |    (u64)                                |
    |    |used_slots                               |
    |    |    (int)                                |
    |    |lru_slot                                 |
    |    |    (atomic_t)                           |
    |    |id_to_index[509+3]                       |
    |    |    (short)                              |
    |    |memslots[509+3]                          |
    |    |    (struct kvm_memory_slot)             |
    |    |    +------------------------------------+
    |    |    |base_gfn                            |
    |    |    |npages                              |
    |    |    |dirty_bitmap                        |
    |    |    |userspace_addr                      |
    |    |    |arch                                |
    |    |    |flags                               |
    |    |    |id                                  |
    |    |    |                                    |
    |    +----+------------------------------------+
    |                                              |
    |                                              |
    |                                              |
    +----------------------------------------------+

