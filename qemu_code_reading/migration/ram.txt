1. savevm_ram_handlers
================================================================================
static SaveVMHandlers savevm_ram_handlers = {
    .save_setup = ram_save_setup,
    .save_live_iterate = ram_save_iterate,
    .save_live_complete_postcopy = ram_save_complete,
    .save_live_complete_precopy = ram_save_complete,
    .has_postcopy = ram_has_postcopy,
    .save_live_pending = ram_save_pending,
    .load_state = ram_load,
    .save_cleanup = ram_save_cleanup,
    .load_setup = ram_load_setup,
    .load_cleanup = ram_load_cleanup,
    .resume_prepare = ram_resume_prepare,
};

2. save_setup/load_setup
================================================================================

2.1 ram_save_setup
================================================================================
2.1.1 compress_threads_save_setup
================================================================================
2.1.2 migration_in_colo_state
================================================================================
2.1.3 ram_init_all
================================================================================
2.1.3.1 ram_state_init, create RAMState
================================================================================
2.1.3.2 xbzrle_init
================================================================================
2.1.3.3 ram_init_bitmaps
================================================================================
2.1.3.3.1 ram_list_init_bitmaps, create RAMBlock->bmap and all set to 1
================================================================================
2.1.3.3.2 memory_global_dirty_log_start
================================================================================
2.1.3.3.2.1 MEMORY_LISTENER_CALL_GLOBAL(log_global_start, Forward);
================================================================================
2.1.3.3.2.2 memory_region_transaction_commit(), Refresh DIRTY_MEMORY_MIGRATION bit
================================================================================
2.1.3.3.2.2.1 MEMORY_LISTENER_UPDATE_REGION(frnew, as, Forward, log_start, );
================================================================================
2.1.3.3.2.2.2 MEMORY_LISTENER_UPDATE_REGION(frnew, as, Forward, log_stop, );
================================================================================
2.1.3.3.3 migration_bitmap_sync_precopy
================================================================================
2.1.4 qemu_put_be64(f, ram_bytes_total_common(true) | RAM_SAVE_FLAG_MEM_SIZE);
================================================================================
2.1.5 qemu_put_byte(f, strlen(block->idstr));
================================================================================
2.1.6 qemu_put_buffer(f, (uint8_t *)block->idstr, strlen(block->idstr));
================================================================================
2.1.7 qemu_put_be64(f, block->used_length);
================================================================================
2.1.8 ram_control_before_iterate(f, RAM_CONTROL_SETUP);
================================================================================
2.1.8.1 f->hooks->before_ram_iterate
================================================================================
2.1.9 ram_control_after_iterate(f, RAM_CONTROL_SETUP);
================================================================================
2.1.9.1 f->hooks->after_ram_iterate
================================================================================
2.1.10 multifd_send_sync_main();
================================================================================
2.1.11 qemu_put_be64(f, RAM_SAVE_FLAG_EOS);
================================================================================
2.1.12 qemu_fflush(f);
================================================================================

3. ram_save_pending
================================================================================
3.1 migration_bitmap_sync_precopy, if remaining_size < max_size
================================================================================

3. ram_save_iterate
================================================================================
3.1 ram_find_and_save_block
================================================================================
3.2 multifd_send_sync_main
================================================================================

4. ram_save_complete
================================================================================
4.1 migration_bitmap_sync_precopy
================================================================================
4.2 ram_find_and_save_block
================================================================================
4.3 flush_compressed_data
================================================================================
4.4 multifd_send_sync_main
================================================================================

3. migration_bitmap_sync_precopy
================================================================================
3.1 migration_bitmap_sync, sync from ram_list.dirty_memory to RAMBlock->bmap
================================================================================
3.1.1 memory_global_dirty_log_sync
================================================================================
3.1.1.1 memory_region_sync_dirty_bitmap(NULL);
================================================================================
3.1.1.1.1 listener->log_sync(listener, &mrs)
================================================================================
3.1.2 migration_bitmap_sync_range; called on each RAMBlock
================================================================================
3.1.2.1 cpu_physical_memory_sync_dirty_bitmap
================================================================================
3.1.3 ram_bytes_remaining(); = ram_state->migration_dirty_pages
================================================================================
3.1.4 migrate_auto_converge()
================================================================================
3.1.5 blk_mig_bulk_active()
================================================================================
3.1.6 mig_throttle_guest_down()
================================================================================
3.1.7 migration_update_rates()
================================================================================

4. ram_find_and_save_block
================================================================================
4.1 pss.block = rs->last_seen_block
================================================================================
4.2 pss.page = rs->last_page
================================================================================
4.3 found = get_queued_page(rs, &pss)
================================================================================
4.3.1 block = unqueue_page(rs, &offset)
================================================================================
4.4 found = find_dirty_block(rs, &pss, &again)
================================================================================
4.4.1 pss->page = migration_bitmap_find_dirty(rs, pss->block, pss->page)
================================================================================
4.5 pages = ram_save_host_page(rs, &pss, last_stage)
================================================================================
4.5.1 migration_bitmap_clear_dirty; clear the bit in RAMBlock->bmap
================================================================================
4.5.2 ram_save_target_page, main function sync page
================================================================================
4.5.2.1 control_save_page
================================================================================
4.5.2.2 save_compress_page
================================================================================
4.5.2.2.1 flush_compressed_data
================================================================================
4.5.2.2.2 compress_page_with_multi_thread
================================================================================
4.5.2.3 save_zero_page
================================================================================
4.5.2.4 ram_save_multifd_page
================================================================================
4.5.2.5 ram_save_page
================================================================================
4.6 rs->last_seen_block = pss.block 
================================================================================
4.7 rs->last_page = pss.page
================================================================================

5. ram_load_setup
================================================================================
5.1 compress_threads_load_setup
================================================================================
5.2 xbzrle_load_setup
================================================================================
5.3 ramblock_recv_map_init; create RAMBlock->receivedmap
================================================================================

6. ram_load
================================================================================

7. send <-> receive
================================================================================


                 source                                destination
       
            +------------------------+             +-------------------------+
            |                        |             |                         |
  SETUP     | ram_save_setup         |             |  ram_load_setup         |
            |                        |             |                         |
            +------------------------+             +-------------------------+
       
            sync dirty bit to                      Setup RAMBlock->receivedmap
	    RAMBlock->bmap
       
       
            +------------------------+             +-------------------------+
            |                        |             |                         |
  ITER      | ram_save_pending       |             |  ram_load               |
            | ram_save_iterate       |             |                         |
            |                        |             |                         |
            +------------------------+             +-------------------------+
       
            sync dirty bit                         Receive page
	    and send page
       
       
            +------------------------+             +-------------------------+
            |                        |             |                         |
  COMP      | ram_save_pending       |             |  ram_load               |
            | ram_save_complete      |             |                         |
            |                        |             |                         |
            +------------------------+             +-------------------------+
       
            sync dirty bit                         Receive page
	    and send page
       


4. dirty bitmap, ram_list.dirty_memory RAMBlock->bmap
================================================================================
RAMBlock->bmap is created in ram_list_init_bitmaps and set all to 1
ram_list.dirty_memory is created in dirty_memory_extend and set all to 1

memory_region_get_dirty()
    cpu_physical_memory_get_dirty
memory_region_set_dirty()
    cpu_physical_memory_set_dirty_range
cpu_physical_memory_clear_dirty_range

;sync from kvm dirty log to qemu's
kvm_get_dirty_pages_log_range
    cpu_physical_memory_set_dirty_lebitmap()

;sync from ram_list.dirty_memory to RAMBlock->bmap
cpu_physical_memory_sync_dirty_bitmap

0. data structure
================================================================================

0.1 RAMState
================================================================================

    RAMState
    +--------------------------------------+
    |f                                     | = s->to_dst_file
    |    (QEMUFile *)                      |
    |last_seen_block                       | last RAMBlock we sent
    |last_sent_block                       |
    |last_req_rb                           |
    |    (RAMBlock *)                      |
    |last_page                             | last page we sent
    |    (ram_addr_t)                      |
    |last_version                          |
    |    (uint32_t)                        |
    |ram_bulk_stage                        | init to true, means in the first round
    |fpo_enabled                           |
    |    (bool)                            |
    |dirty_rate_high_cnt                   |
    |bytes_xfer_prev                       |
    |num_dirty_pages_period                | = real dirty pages
    |xbzrle_cache_miss_prev                |
    |    (uint64_t)                        |
    |time_last_bitmap_sync                 |
    |    (uint64_t)                        |
    |compress_thread_busy_prev             |
    |compressed_size_prev                  |
    |compress_pages_prev                   |
    |    (uint64_t)                        |
    |target_page_count_prev                |
    |target_page_count                     |
    |migration_dirty_pages                 | = ram_bytes_total() >> TARGET_PAGE_BITS
    |    (uint64_t)                        |
    |                                      |
    |                                      |
    |                                      |
    |src_page_requests                     |
    |    (list of RAMSrcPageRequest)       |
    +--------------------------------------+

0.1 MigrationStats
================================================================================

    MigrationStats
    +--------------------------------------+
    |transferred                           |
    |remaining                             |  = ram_bytes_remaining()
    |                                      |    = ram_state->migration_dirty_pages
    |total;                                |
    |duplicate;                            |
    |skipped;                              |
    |normal;                               |
    |normal_bytes;                         |
    |pages_per_second;                     |
    |dirty_pages_rate;                     |  = num_dirty_pages_period / time
    |mbps;                                 |
    |dirty_sync_count;                     |
    |postcopy_requests;                    |
    |page_size;                            |
    |multifd_bytes;                        |
    +--------------------------------------+

0.1 MigrationState / MigrationIncomingState
================================================================================

    MigrationState
    +--------------------------------------+
    |parent_obj                            |
    |   (DeviceState)                      |
    |parameters                            |
    |   (MigrationParameters)              |
    |enabled_capabilities                  |
    |   [MIGRATION_CAPABILITY__MAX]        |
    |threshold_size                        |  the final stage happens
    |    (int64_t)                         |
    |state                                 |
    |   (int)                              |
    |                                      |
    |vm_was_running                        |
    |migration_thread_running              |
    |start_postcopy                        |
    |postcopy_after_devices                |
    |block_inactive                        |
    |must_remove_block_options             |
    |store_global_state                    |
    |send_configuration                    |
    |send_section_footer                   |
    |decompress_error_check                |
    |   (bool)                             |
    |to_dst_file                           |
    |from_dst_file                         |
    |   (QEMUFile*)                        |
    |                                      |
    |setup_time                            |
    |start_time                            |
    |total_time                            |
    |downtime_start                        |
    |downtime                              |
    |expected_downtime                     |
    |iteration_start_time                  |
    |    (int64_t)                         |
    |                                      |
    |iteration_initial_bytes/pages         |
    |    (uint64_t)                        |
    |bytes_xfer                            |
    |    (size_t)                          |
    |mbs                                   |
    |    (double)                          |
    +--------------------------------------+

    MigrationIncomingState
    +--------------------------------------+
    |state                                 |
    |   (int)                              |
    |                                      |
    |from_src_file                         |
    |to_src_file                           |
    |   (QEMUFile*)                        |
    |                                      |
    |have_listen_thread                    |
    |have_colo_incoming_thread             |
    |have_fault_thread                     |
    |fault_thread_quit                     |
    |   (bool)                             |
    |                                      |
    |largest_page_size                     |
    |                                      |
    |postcopy_tmp_page                     |
    |postcopy_tmp_zero_page                |
    |                                      |
    |                                      |
    +--------------------------------------+

0.2 XBZRLE
================================================================================
; XOR Based Zero Run Length Encoding
; https://github.com/qemu/qemu/blob/master/docs/xbzrle.txt
; https://en.wikipedia.org/wiki/LEB128

    XBZRLE
    +--------------------------+
    |encoded_buf               | -> TARGET_PAGE_SIZE buf
    |decoded_buf               |
    |current_buf               | -> TARGET_PAGE_SIZE buf
    |zero_target_page          | -> TARGET_PAGE_SIZE buf
    |    (uint8_t*)            |
    |cache                     |
    |    (PageCache*)          |
    |    +---------------------+
    |    |page_size            | = TARGET_PAGE_SIZE
    |    |max_num_items        | = s->parameters.xbzrle_cache_size/page_size
    |    |                     |   must be power of 2
    |    |num_items            | = 0
    |    |page_cache           | [max_num_items]
    |    |    (CacheItem*)     |
    |    |    +----------------+
    |    |    |it_addr         | = -1
    |    |    |it_age          | = 0
    |    |    |   (uint64_t)   |
    |    |    |it_data         | = NULL
    |    |    |   (uint8_t*)   |
    |    |    |                |
    +----+----+----------------+

0.3 ram_list/RAMBlock
================================================================================

    ram_list(RAMList)
    +-------------------------------+
    |version                        | increase 1 on each RAMBlock
    |                               |
    |                               |
    |dirty_memory[DIRTY_MEMORY_NUM] | = VGA|CODE|MIGRATION
    |    (struct DirtyMemoryBlocks) |
    |    +--------------------------+
    |    |rcu                       |
    |    |                          |
    |    |blocks[]                  | dirty_memory_extend()
    |    |   (unsigned long*)       | each block cover DIRTY_MEMORY_BLOCK_SIZE pages
    |    |                          |
    |    +--------------------------+
    |                               |
    |                               |
    +-------------------------------+

    
    RAMBlock                     
    +---------------------------+
    |next                       |
    |    QLIST_ENTRY(RAMBlock)  |
    +---------------------------+
    |used_length                |
    |offset                     | is BITS_PER_LONG << TARGET_PAGE_BITS aligned
    |max_length                 | is HOST_PAGE_ALIGN
    |    (ram_addr_t)           |
    +---------------------------+
    |fd                         |
    |    (int)                  |
    +---------------------------+
    |host                       |
    |    (uint8_t *)            |
    +---------------------------+
    |mr                         |
    |    (struct MemoryRegion *)|
    +---------------------------+
    |bmap                       |  dirty bitmap
    |unsentmap                  |  unsent bitmap only in postcopy
    |receivedmap                |  receive bitmap only in postcopy
    |    (unsigned long*)       |
    +---------------------------+


    ram_list.dirty_memory[]
    +----------------------+---------------+--------------+----------------+
    |                      |               |              |                |
    +----------------------+---------------+--------------+----------------+
    ^                      ^               ^              ^
    |                      |               |              |
    RAMBlock.bmap                          RAMBlock.bmap
    +----------------------+               +--------------+
    |                      |               |              |
    +----------------------+               +--------------+

0.4 multifd
================================================================================
0.4.1 multifd_send_state
================================================================================
; multifd_save_setup

    multifd_send_state
    +-------------------------------+
    |count                          |  number of created threads
    |    (int)                      |  = migrate_multifd_channels()
    |packet_num                     |  global
    |    (uint64_t)                 |
    |sem_sync                       |
    |channels_ready                 |
    |    (QemuSemaphore)            |
    |                               |
    |pages                          |
    |    (MultiFDPages_t*)          |
    |                               |
    |params                         |  [migrate_multifd_channels()]  each channel has one MultiFDSendParams
    |    (MultiFDSendParams*)       |
    |                               |      MultiFDSendParams           MultiFDSendParams           MultiFDSendParams  
    +-------------------------------+      +-------------------+       +-------------------+       +-------------------+
                                           |page               |       |page               |       |page               |
                                           | (MultiFDPages_t)  |       | (MultiFDPages_t)  |       | (MultiFDPages_t)  |
                                           |packet             |       |packet             |       |packet             |
                                           | (MultiFDPacket_t) |       | (MultiFDPacket_t) |       | (MultiFDPacket_t) |
                                           |                   |       |                   |       |                   |
                                           |                   |       |                   |       |                   |
                                           +-------------------+       +-------------------+       +-------------------+




    +-------------------------------+
    |params                         |  [migrate_multifd_channels()]
    |    (MultiFDSendParams*)       |  each channel has one MultiFDSendParams
    |    +--------------------------+
    |    |c                         |  channel
    |    |   (QIOChannel*)          |
    |    |id                        |  channel number
    |    |   (uint8_t)              |
    |    |thread                    |  channel thread id
    |    |   (QemuThread)           |
    |    +--------------------------+
    |    |sem_sync                  |  sync main thread and channels
    |    |sem                       |
    |    |mutex                     |
    |    |running/quit              |
    |    |pending_job               |  thread has work to do
    |    |   (int)                  |
    |    +--------------------------+
    |    |packet_num                |  global packets, copied from multifd_send_state
    |    +--------------------------+
    |    |num_packets               |  packets through this channel
    |    |num_pages                 |
    |    |                          |
    |    |                          |
    |    +--------------------------+
    |    |pages                     |
    |    |   (MultiFDPages_t*)      |
    |    |   +----------------------+
    |    |   |packet_num            |  global
    |    |   |   (uint64_t)         |
    |    |   |block                 |
    |    |   |   (RAMBlock*)        |
    |    |   |allocated             |  = page_count = MULTIFD_PACKET_SIZE / TARGET_PAGE_SIZE
    |    |   |used                  |
    |    |   |   (uint32_t)         |
    |    |   |offset                |  [allocated]
    |    |   |   (ram_addr_t)       |
    |    |   |iov                   |  [allocated]
    |    |   |   (struct iovec*)    |
    |    |   |   +------------------+
    |    |   |   |iov_base          |  = block->host + offset
    |    |   |   |iov_len           |  = TARGET_PAGE_SIZE
    |    |   |   +------------------+
    |    |   |                      |
    |    |   +----------------------+
    |    |                          |
    |    |flags                     |
    |    |next_packet_size          |  = used * qemu_target_page_size()
    |    |   (uint32_t)             |
    |    |packet_len                |  = sizeof(MultiFDPacket_t) +
    |    |   (uint32_t)             |    page_count * sizeof(ram_addr_t)
    |    |packet                    |
    |    |   (MultiFDPacket_t*)     |
    |    |   +----------------------+
    |    |   |magic                 |  = MULTIFD_MAGIC
    |    |   |version               |  = MULTIFD_VERSION
    |    |   |flags                 |  = params->flags
    |    |   |                      |
    |    |   |pages_alloc           |  = page_count
    |    |   |pages_used            |  = pages->used
    |    |   |next_packet_size      |  = params->next_packet_size
    |    |   |packet_num            |  = params->packet_num
    |    |   |                      |
    |    |   |offset[]              |  [page_count]
    |    |   |    (ram_addr_t)      |
    |    |   +----------------------+
    |    |                          |
    |    +--------------------------+
    |                               |
    +-------------------------------+

0.4.2 multifd_recv_state
================================================================================
; multifd_load_setup()

    multifd_recv_state
    +-------------------------------+
    |count                          |  number of created threads
    |    (int)                      |  = migrate_multifd_channels()
    |packet_num                     |  global
    |    (uint64_t)                 |
    |sem_sync                       |
    |    (QemuSemaphore)            |
    |                               |
    |params                         |  [migrate_multifd_channels()]  each channel has one MultiFDRecvParams
    |    (MultiFDRecvParams*)       |
    |                               |      MultiFDRecvParams           MultiFDRecvParams           MultiFDRecvParams  
    +-------------------------------+      +-------------------+       +-------------------+       +-------------------+
                                           |page               |       |page               |       |page               |
                                           | (MultiFDPages_t)  |       | (MultiFDPages_t)  |       | (MultiFDPages_t)  |
                                           |packet             |       |packet             |       |packet             |
                                           | (MultiFDPacket_t) |       | (MultiFDPacket_t) |       | (MultiFDPacket_t) |
                                           |                   |       |                   |       |                   |
                                           |                   |       |                   |       |                   |
                                           +-------------------+       +-------------------+       +-------------------+


