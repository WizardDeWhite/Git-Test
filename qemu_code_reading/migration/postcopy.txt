1. usage
================================================================================
migrate_set_capability postcopy-ram on # both source and destination
migrate_set_capability postcopy-blocktime on # both source and destination
migrate -d tcp:0:4444
migrate_start_postcopy   # after first round of sync

2. migrate_set_capability postcopy-ram
================================================================================
hmp_migrate_set_capability
        s->enabled_capabilities[MIGRATION_CAPABILITY_POSTCOPY_RAM] = true

2.1 migrate_postcopy_ram() will return true
================================================================================
; this is one place to check the difference of code flow
; for example
;     do ping, open return path
;     build unsentmap

2.2 migrate_postcopy() will return true
================================================================================
return migrate_postcopy_ram() || migrate_dirty_bitmaps();

3. migration_thread
================================================================================
3.1 qemu_savevm_send_postcopy_advise(), send MIG_CMD_POSTCOPY_ADVISE
================================================================================
; done before setup
3.1.1 qemu_savevm_command_send(f, MIG_CMD_POSTCOPY_ADVISE, 16, (uint8_t *)tmp);
================================================================================
; with postcopy ram
3.1.1 qemu_savevm_command_send(f, MIG_CMD_POSTCOPY_ADVISE, 0, NULL);
================================================================================
; other
3.2 qemu_savevm_state_setup(s->to_dst_file);
================================================================================

3. migrate_start_postcopy
================================================================================
hmp_migrate_start_postcopy
   qmp_migrate_start_postcopy
       atomic_set(&s->start_postcopy, true);

4. postcopy_start(), a little similar with migration_completion()
================================================================================
4.1 migrate_set_state(MIGRATION_STATUS_ACTIVE, MIGRATION_STATUS_POSTCOPY_ACTIVE)
================================================================================


4.2 qemu_mutex_lock_iothread();
================================================================================
4.3 qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, NULL);
================================================================================
4.4 global_state_store();
================================================================================
4.5 vm_stop_force_state(RUN_STATE_FINISH_MIGRATE);
================================================================================
4.6 migration_maybe_pause(ms, &cur_state, MIGRATION_STATUS_POSTCOPY_ACTIVE);
================================================================================
4.7 bdrv_inactivate_all();
================================================================================
4.8 qemu_savevm_state_complete_precopy(ms->to_dst_file, true, false);
================================================================================

4.9 ram_postcopy_send_discard_bitmap()
================================================================================
4.9.1 migration_bitmap_sync(), should be the last sync
================================================================================
4.9.2 postcopy_chunk_hostpages(), Deal with TPS != HPS
================================================================================
4.9.2.1 postcopy_chunk_hostpages_pass(ms, true, block, pds);
================================================================================
4.9.2.2 postcopy_chunk_hostpages_pass(ms, false, block, pds);
================================================================================
4.9.3 postcopy_each_ram_send_discard(), tell destination to discard page
================================================================================
4.9.2.1 postcopy_discard_send_init()
================================================================================
4.9.2.2 postcopy_send_discard_bm_ram()
================================================================================
4.9.2.2.1 postcopy_discard_send_range()
================================================================================
4.9.2.2.1.1 qemu_savevm_send_postcopy_ram_discard(); tell destination to discard
================================================================================
4.9.2.3 postcopy_discard_send_finish()
================================================================================
4.9.2.3.1.1 qemu_savevm_send_postcopy_ram_discard()
================================================================================


4.10 qemu_savevm_send_postcopy_listen(fb); let destination in Listen State
================================================================================
4.10.1 qemu_savevm_command_send(f, MIG_CMD_POSTCOPY_LISTEN), destination will start postcopy_ram_listen_thread
================================================================================

4.11 qemu_savevm_state_complete_precopy(fb, false, false);
================================================================================
4.12 qemu_savevm_send_postcopy_run(fb);
================================================================================
4.12.1 qemu_savevm_command_send(f, MIG_CMD_POSTCOPY_RUN, 0, NULL);
================================================================================
4.13 qemu_savevm_send_packaged(ms->to_dst_file, bioc->data, bioc->usage), MIG_CMD_PACKAGED
================================================================================
4.14 ms->postcopy_after_devices = true;    device state migration done
================================================================================


4.15 ms->downtime =  qemu_clock_get_ms(QEMU_CLOCK_REALTIME) - time_at_stop;
================================================================================
4.16 qemu_mutex_unlock_iothread();
================================================================================


4.17 ram_postcopy_migrated_memory_release(ms), release mem.
================================================================================
; is this necessary on source?

5. call flow
================================================================================
     postcopy_start(), a little similar with migration_completion()
         migrate_set_state(MIGRATION_STATUS_ACTIVE, MIGRATION_STATUS_POSTCOPY_ACTIVE)
         qemu_mutex_lock_iothread();
         qemu_system_wakeup_request(QEMU_WAKEUP_REASON_OTHER, NULL);
         global_state_store();
         vm_stop_force_state(RUN_STATE_FINISH_MIGRATE);
         migration_maybe_pause(ms, &cur_state, MIGRATION_STATUS_POSTCOPY_ACTIVE);
         bdrv_inactivate_all();
         qemu_savevm_state_complete_precopy(ms->to_dst_file, true, false);
         ram_postcopy_send_discard_bitmap()
             migration_bitmap_sync(), should be the last sync
             postcopy_chunk_hostpages(), Deal with TPS != HPS
                postcopy_chunk_hostpages_pass(ms, true, block, pds);
                postcopy_chunk_hostpages_pass(ms, false, block, pds);
             postcopy_each_ram_send_discard(), tell destination to discard page
                postcopy_discard_send_init()
                postcopy_send_discard_bm_ram()
                postcopy_discard_send_finish()
          qemu_savevm_send_postcopy_listen(fb); let destination in Listen State
             qemu_savevm_command_send(f, MIG_CMD_POSTCOPY_LISTEN), destination will start postcopy_ram_listen_thread
          qemu_savevm_state_complete_precopy(fb, false, false);
          qemu_savevm_send_postcopy_run(fb);
             qemu_savevm_command_send(f, MIG_CMD_POSTCOPY_RUN, 0, NULL);
          qemu_savevm_send_packaged(ms->to_dst_file, bioc->data, bioc->usage), MIG_CMD_PACKAGED
          qemu_mutex_unlock_iothread();
          ram_postcopy_migrated_memory_release(ms), release mem.

5. loadvm_postcopy_handle_listen
================================================================================

           Source                                       Destination


   migration_thread                                 qemu_loadvm_state_main
                                                        loadvm_process_command
       ADVISE                                               loadvm_postcopy_handle_advise
                                                                check userfaultfd
                                                                check page size match

                 |                                                 |
                 |                                                 |
                 v                                                 v

       migration_iteration_run
           qemu_savevm_state_iterate()
               or
           postcopy_start
               ram_postcopy_send_discard_bitmap
                   DISCARD                                  loadvm_postcopy_ram_handle_discard
                                                                NOHUGEPAGE
                                                                clear receivedmap
                                                                unmap

                 |                                                 |
                 |                                                 |
                 v                                                 v

               qemu_savevm_send_postcopy_listen(fb)
                   LISTEN                                   loadvm_postcopy_handle_listen
                                                                setup userfaultfd
                                                                    postcopy_ram_fault_thread
                                                                    ram_block_enable_notify
                                                                postcopy_ram_listen_thread
                                                                    qemu_loadvm_state_main

                 |                                                 |
                 |                                                 |
                 v                                                 v

               qemu_savevm_send_packaged(fb)
                   PACKAGED                                 loadvm_handle_cmd_packaged
                                                                qemu_loadvm_state_main
                                                                    loadvm_process_command

                 |                                                 |
                 |                                                 |
                 v                                                 v

               qemu_savevm_send_postcopy_run(fb)
                    RUN                                                 loadvm_postcopy_handle_run
                                                                            loadvm_postcopy_handle_run_bh
                                                                                vm_start
                                                                            return LOADVM_QUIT



0. incoming_postcopy_state
================================================================================
postcopy_state_get/postcopy_state_set

   incoming_postcopy_state(PostcopyState)
   +---------------------------+
   |POSTCOPY_INCOMING_NONE     |
   |POSTCOPY_INCOMING_ADVISE   | ----------------+
   |POSTCOPY_INCOMING_DISCARD  |                 |
   |POSTCOPY_INCOMING_LISTENING| --+             +-- advise
   |                           |   +-- running   |
   |POSTCOPY_INCOMING_RUNNING  | --+-------------+
   |POSTCOPY_INCOMING_END      |
   +---------------------------+


                 NONE

                  |
                  |                 MIG_CMD_POSTCOPY_ADVISE
                  |

               ADVISE

                  |  \
                  |    \            MIG_CMD_POSTCOPY_RAM_DISCARD
                  |      \
                  |  DISCARD
                  |      /
                  |    /            MIG_CMD_POSTCOPY_LISTEN
                  |  /

               LISTEN

                  |
                  |                 MIG_CMD_POSTCOPY_RUN
                  |

               RUNNING

                  |
                  |
                  |

	         END


