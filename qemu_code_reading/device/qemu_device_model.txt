1. type_register_internal(), register a type
================================================================================
static TypeImpl *type_register_internal(const TypeInfo *info)
{
    TypeImpl *ti;
    ti = type_new(info);

    type_table_add(ti);
    return ti;
}

1.1 type_new(), create TypeImpl
================================================================================

1.2 type_table_add(), connect TypeImpl and TypeInfo
================================================================================

2. object_initialize(), create obj with typename
================================================================================
void object_initialize(void *data, size_t size, const char *typename)
{
    TypeImpl *type = type_get_by_name(typename);

    object_initialize_with_type(data, size, type);
}

2.1 type_get_by_name()
================================================================================

2.2 object_initialize_with_type()
================================================================================

2.2.1 type_initialize(), init class
================================================================================

ti->class_init()

2.2.2 object_init_with_type(), init object
================================================================================

ti->instance_init()

1. DEVICE <--> CLASS, cast between Class levels
================================================================================
#define OBJECT_CLASS(class) \
    ((ObjectClass *)(class))
#define OBJECT_CLASS_CHECK(class, obj, name) \
    ((class *)object_class_dynamic_cast_assert(OBJECT_CLASS(obj), (name)))
#define DEVICE_CLASS(klass) OBJECT_CLASS_CHECK(DeviceClass, (klass), TYPE_DEVICE)

DeviceClass *dc = DEVICE_CLASS(klass);
   OBJECT_CLASS_CHECK(DeviceClass, kclass, "device")
   (DeviceClass*)object_class_dynamic_cast_assert((ObjectClass *)kclass, "device")
   {
	   ObjectClass *ret = object_class_dynamic_cast(kclass, typename);
           if (!ret) {
               fprintf(stderr, "Object %p is not an instance of type %s\n",
                       class, typename);
               abort();
           }

           return ret;
   }

object_class_dynamic_cast() will return none-NULL if kclass is a child or itself.
so this means the DEVICE_CLASS() tries to get the TypeImpl named "device";
and means the klass is a child of it or itself, this function will return
klass itself.
which is defined in qdev.c
static TypeInfo device_type_info = {
    .name = TYPE_DEVICE,
    .parent = TYPE_OBJECT,
    .instance_size = sizeof(DeviceState),
    .instance_init = device_initfn,
    .instance_finalize = device_finalize,
    .abstract = true,
    .class_size = sizeof(DeviceClass),
};


So this is a class hierarchy
       +------------------+
       |     TypeImpl     |
       |                  |
       |  +---------------+                           +----------------------+
       |  |               |                           |                      |
       |  |ObjectClass    | <-------------------------|    Object            |
       |  |  class_init   |                           |                      |
       +--+---------------+                           +---------+------------+
                 |                                              |
                 |                                              |
                 |                                              |
                 |                                              |
                 v                                              v
       +------------------+                           +---------+------------+
       |                  |                           |                      |
       |   DeviceClass    |  ----------------------   |   DeviceState        |
       |     class_init   |                           |      instance_init   |
       |     realize      |  device_realize(default)  |                      |
       +---------+--------+  could be overwrite by    +---------+------------+
                 |           child class, pci_qdev_realize      |
                 |                                              |
                 |                                              |
                 v                                              v
       +---------+--------+                           +---------+------------+
       |                  |                           |                      |
       |   PCIDeviceClass |  ----------------------   |   PCIDevice          |
       |     class_init   |                           |      instance_init   |
       +------------------+                           +---------+------------+
                                                                |
                                                                |
                                                                |
                                                                v
                                                      +----------------------+
                                                      |                      |
                                                      |   OHCIPCIState       |
                                                      |      instance_init   |
                                                      +----------------------+

For Class, type_initialize() is used to do initialization.

type_initialize(TypeImpl *ti)
	type_initialize(ti->parent)
	ti->class_init()

For Object, there are two stage initialization:
a. object_init_with_type() is used for first stage
b. device_set_realized() is used for second stage

object_init_with_type(Object *obj, TypeImpl *ti)
	object_init_with_type(obj, ti->parent)
	ti->instance_init(obj)

device_set_realized(Object *obj, bool value, Error **err)
	DeviceClass *dc = DEVICE_GET_CLASS(dev)
	dc->realize()

2. Device <--> Bus
================================================================================

                    +------------------+
                    |   ObjectClass    |
                    |                  |
                    +------------------+
                        /           \
                      /                 \
		    /                      \
                 v                             v
       +------------------+          +---------+------------+
       |                  |          |                      |
       |   DeviceClass    |          |   BusClass           |
       |                  |          |                      |
       +---------+--------+          +---------+------------+
                 |                             |
                 |                             |
                 |                             |
                 v                             v
       +---------+--------+          +---------+------------+
       |                  |          |                      |
       |   PCIDeviceClass |          |   PCIBusClass        |
       |                  |          |                      |
       +------------------+          +---------+------------+

3. TypeImpl <--  TypeInfo 
================================================================================
TypeImpl *type_register(const TypeInfo *info)

        type_table(GHashTable)  ; this is a hash table with name as the key
       +-----------------------+
       |                       |
       +-----------------------+
                |
                v
       +------------------+                   +--------------------+
       |TypeImpl*         | <--- type_new()   | TypeInfo           |
       |    TYPE_PC_DIMM  |                   |     TYPE_PC_DIMM   |
       +------------------+                   +--------------------+
                |
                v
       +------------------+                   +--------------------+
       |TypeImpl*         | <--- type_new()   | TypeInfo           |
       |    TYPE_MACHINE  |                   |     TYPE_MACHINE   |
       +------------------+                   +--------------------+


3.1 init_type_list[MODULE_INIT_MAX]
================================================================================

typedef enum {
    MODULE_INIT_BLOCK,
    MODULE_INIT_OPTS,
    MODULE_INIT_QOM,
    MODULE_INIT_TRACE,
    MODULE_INIT_MAX
} module_init_type;


   init_type_list[MODULE_INIT_MAX]
   +-----------------------------+
   |MODULE_INIT_BLOCK            |
   |                             |
   |                             |
   +-----------------------------+
   |MODULE_INIT_OPTS             |
   |                             |
   |                             |
   +-----------------------------+      +-----------------------+     +-----------------------+
   |MODULE_INIT_QOM              | ---->|                       |---->|                       |
   |                             |      |e1000_register_types   |     |pc_dimm_register_types |
   |                             |      |   --> type_register() |     |   --> type_register() |
   +-----------------------------+      +-----------------------+     +-----------------------+
   |MODULE_INIT_TRACE            |
   |                             |
   |                             |
   +-----------------------------+


4. traverse the qdev tree? 
================================================================================
if (qemu_opts_foreach(qemu_find_opts("device"), device_help_func, NULL, 0) != 0)
device_help_func

5. TypeImpl <-> ObjectClass
================================================================================

   TypeImpl                               ObjectClass
   +----------------------+               +----------------------+
   |class                 |<------------->|type                  |
   |     (ObjectClass*)   |               |     (TypeImpl *)     |
   +----------------------+               +----------------------+

6. e1000 init
================================================================================

       +--------------------------+                           +----------------------+
       |                          |                           |                      |
       |   ObjectClass            | <-------------------------|    Object            |
       |     class_init           |                           |    instance_init     |
       |                          |                           |(object_instance_init)|
       +--------------------------+                           +----------------------+
                 |                                                      |
                 |                                                      |
                 |                                                      |
                 |                                                      |
                 v                                                      v
       +--------------------------+                           +----------------------+
       |                          |                           |                      |
       |   DeviceClass            |  <---------------------   |   DeviceState        |
       |     class_init           |                           |      instance_init   |
       |     (device_class_init)  |                           |      (device_initfn) |
       |                          |                           |                      |
       |     realize              |  overwrite by child class |                      |
       |     unrealize            |                           |                      |
       +--------------------------+                           +----------------------+
                 |                                                      |
                 |                                                      |
                 |                                                      |
                 v                                                      v
       +--------------------------+                           +----------------------+
       |                          |                           |                      |
       |   PCIDeviceClass         |  <---------------------   |   PCIDevice          |
       |     class_init           |                           |      instance_init   |
       |   (pci_device_class_init)|                           |      (NULL)          |
       |     realize              |                           |                      |
       |     (pci_qdev_realize)   |  call PCIDevice->realize  |                      |
       |     unrealize            |                           |                      |
       |     (pci_qdev_unrealize) |                           |                      |
       +--------------------------+                           +----------------------+
                 |                                                      |
                 |                                                      |
                 |                                                      |
                 v                                                      v
       +--------------------------+                           +----------------------+
       |                          |                           |                      |
       |   E1000BaseClass         |  <--------------------    |   E1000State         |
       |     class_init           |                           |      instance_init   |
       |     (e1000_class_init)   |                           | (e1000_instance_init)|
       |     realize              |                           |                      |
       |     (pci_e1000_realize)  |                           |                      |
       |     unrealize            |                           |                      |
       |                          |                           |                      |
       +--------------------------+                           +----------------------+

