1. define the qemu options
===============================================================

1.1 qemu-options.def
===============================================================
DEF("kernel", HAS_ARG, QEMU_OPTION_kernel, \
"-kernel bzImage use 'bzImage' as kernel image\n", QEMU_ARCH_ALL)

This definition is interpretered in three different situations. 
Look at file *qemu-options-wrapper.h*.
* generate enum
* generate help
* generate option

1.1.1 qemu_options[], an options list generated from qemu-options.def
===============================================================
static const QEMUOption qemu_options[] = {
    { "h", 0, QEMU_OPTION_h, QEMU_ARCH_ALL },
#define QEMU_OPTIONS_GENERATE_OPTIONS
#include "qemu-options-wrapper.h"
    { NULL },
};

1.2 QemuOptList
===============================================================
Each option is defined in QemuOptList structure.

struct QemuOptsList {
    const char *name;
    const char *implied_opt_name;
    bool merge_lists;  /* Merge multiple uses of option into a single list? */
    QTAILQ_HEAD(, QemuOpts) head;
    QemuOptDesc desc[];
};

The field desc is used to describe the sub-command in this option.

1.2.2 one example of QemuOptList
===============================================================
QemuOptsList qemu_device_opts = {
    .name = "device",
    .implied_opt_name = "driver",
    .head = QTAILQ_HEAD_INITIALIZER(qemu_device_opts.head),
    .desc = {
        /*
         * no elements => accept any
         * sanity checking will happen later
         * when setting device properties
         */
        { /* end of list */ }
    },
};

2. Register the options, mostly called in main()
===============================================================

2.1 qemu_add_opts(), register the opt list to vm_config_groups
===============================================================
void qemu_add_opts(QemuOptsList *list)
{
    int entries, i;

    entries = ARRAY_SIZE(vm_config_groups);
    entries--; /* keep list NULL terminated */
    for (i = 0; i < entries; i++) {
        if (vm_config_groups[i] == NULL) {
            vm_config_groups[i] = list;
            return;
        }
    }
    fprintf(stderr, "ran out of space in vm_config_groups");
    abort();
}

3. parse options
===============================================================

3.1 lookup_opt(), search the qemu_options return with the same name
===============================================================
static const QEMUOption *lookup_opt(int argc, char **argv,
                                    const char **poptarg, int *poptind)
{
    const QEMUOption *popt;
    int optind = *poptind;
    char *r = argv[optind];
    const char *optarg;

    loc_set_cmdline(argv, optind, 1);
    optind++;
    /* Treat --foo the same as -foo.  */
    if (r[1] == '-')
        r++;
    popt = qemu_options;
    for(;;) {
        if (!popt->name) {
            error_report("invalid option");
            exit(1);
        }
        if (!strcmp(popt->name, r + 1))
            break;
        popt++;
    }
    if (popt->flags & HAS_ARG) {
        if (optind >= argc) {
            error_report("requires an argument");
            exit(1);
        }
        optarg = argv[optind++];
        loc_set_cmdline(argv, optind - 2, 2);
    } else {
        optarg = NULL;
    }

    *poptarg = optarg;
    *poptind = optind;

    return popt;
}

3.2 do proper action based on the option type
===============================================================
such as QEMU_OPTION_net, QEMU_OPTION_kernel

0. data structure
===============================================================

0.1 vm configure groups
===============================================================
This array includes driver/device/net options


static QemuOptsList *vm_config_groups[48];
    +------------------------+
    |name                    |
    |implied_opt_name        |
    |   (char *)             |
    +------------------------+
    |head                    |
    | QTAILQ_HEAD(, QemuOpts)|
    +------------------------+
    |desc[]                  |
    |   (QemuOptDesc)        |
    +------------------------+
    |                        |
    |                        |
    +------------------------+
