Basic Questions:
1. how pci subsystem enumerate the pci bus at bootup?
   acpi_pci_root_add() will get the root bridge bus number
   and downstream bus range.
   then it will call pci_acpi_scan_root() to enumerate the bridge.

   pci_acpi_scan_root() will get the resourses from the acpi namespace 
   and then do a depth first search.

2. how to reassign bus number ? when bios not work fine
   First pass the kernel command line parameter, pci=assign-busses
   This will enable the pcibios_assign_all_busses() which enable pci_fixup_parent_subordinate_busnr().
   The pci_fixup_parent_subordinate_busnr() is used to fix the subordinate number in pass 1 of 
   pci_scan_bridge().

   pci_fixup_parent_subordinate_busnr() will both overwrite the pci_bus->subordinate and 
   write the config space of the bridge.

  
   how to reassign bus resource ? when bios not work fine
   On x86, get_current_resources() is called to get resouces from ACPI namespace.
   And register the resource in the linux kernel.

   In the kernel initializatioin process, pcibios_assign_resources() is call which than call
   pci_assign_unassigned_resources().

3. Why it need to scan the bridge twice?
   There are two passed for the pci_scan_bridge().

   pass 0 are for those works fine with the BIOS/Firmware.
   BIOS/Firmware take care of the bus/resource assignment.

   pass 1 are for those couldn't work fine with BIOS/Firmware.
   kernel will assign bus number for them.

4. How the pci_dev structure used by the driver?

5. How to maintain the bus and dev hierarchy? 
   all bus link to a list or form a tree?
   all pci_dev linkd to a list or form a tree, how could driver traverse them?

6. How can I print the bus hierarchy in user space?
   lspci?

7. one resouce with its parent equals to null means?
   this resource is not registered in the system?

8. pci_dev->subordinate != null
   means this pci_dev is a bridge

9. why pci_try_num in pci_assign_unassigned_resources()
   is max_depth + 1;

PCIe Questions:
1. How PCIe device support 256 functions per device.
   And how linux code enumerate it in code? pci_scan_child_bus()
	
   What is ARI and Routing ID?

2. What is the pci_bus structure when ARI device is there



             +-----------+-------------------+------------------+
             |           |Upstream Port      |                  | pci_dev.subordinate = Bus#1?
             |           +--------+----------+                  |
             |                    |                             |
             |                    |                             |
             |                    |   Bus#1                     |
             |      --------------+--------------------         |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |                                                  |
             |     +------+                  +--------+         |
             |     |      |                  |DownStream|         |
             +-----+--+---+------------------+---+----+---------+
                      |                          |
                      |                          |
                +-----+-------+           +------+--------+
                |ARI Device 1 |           | ARI Device 2  |
                |             |           |               |
                +-------------+           +---------------+

Since ARI Device could have 256 Functions, then after enumerate Device1, how could it 
enumerate Device2?
Will introduce another bus below Upstream Port?




                                                                
SRIOV Questions:                                                
1. For SRIOV, how to get the VF and how this VF is used by guest? or host?

2. what is VF stride

3. The same as the #2 in PCIe question, 
   How to represent the device if VF is enabled for a SRIOV device.
   How could many pci_bus related to this pci_dev?

4. Does VF has its own configuration space?
   Yes, and the meaning of some bits is not the same as PCIe.

5. The BAR size in the SRIOV Extended Capabilities is the total
   size of all NumVFs VF?

6. All the memory resource needed by VFs is reflected in the PF BAR?

Some issue want to identify:

1. pci_bus->number and pci_bus->secondary redundant?
   in pci_alloc_child_bus

2. pci_bus->resource redundant?
   in pci_alloc_child_bus
