1. general call flow
================================================================================

start_kernel
    cgroup_init
        cgroup_init_subsys(&memory_cgrp_subsys, false)
            memory_cgrp_subsys.root = &cgrp_dfl_root;
            css = memory_cgrp_subsys.css_alloc(cgroup_css(&cgrp_dfl_root.cgrp, &memory_cgrp_subsys))
              => mem_cgroup_css_alloc(NULL)
            init_and_link_css(css, memory_cgrp_subsys, &cgrp_dfl_root.cgrp)
            init_css_set.subsys[] = css
            online_css(css)
                memory_cgrp_subsys.css_online(css)
                  => mem_cgroup_css_online(css)
                css->cgroup->subsys[] = css
                  => cgrp_dfl_root.cgrp.subsys[] = css
        memory_cgrp_subsys.bind(init_css_set.subsys[])
          => mem_cgroup_bind(css)
        css_populate_dir(init_css_set.subsys[])

    ...

    do_initcalls
        mem_cgroup_swap_init
            cgroup_add_dfl_cftypes(&memory_cgrp_subsys, swap_files)
            cgroup_add_legacy_cftypes(&memory_cgrp_subsys, memsw_files)
	mem_cgroup_init

2. mem_cgroup_swap_init
================================================================================
2.1 cgroup_add_dfl_cftypes(&memory_cgrp_subsys, swap_files), link cftype to cgroup_subsys->cfts
================================================================================
2.1.1 cgroup_add_cftypes(&memory_cgrp_subsys, swap_files), register swap_files to memory_cgrp_subsys
================================================================================
2.2 cgroup_add_legacy_cftypes(&memory_cgrp_subsys, memsw_files)
================================================================================

3. mem_cgroup_init
================================================================================
3.1 cpuhp_setup_state_nocalls(CPUHP_MM_MEMCQ_DEAD, "mm/memctrl:dead", NULL, memcg_hotplug_cpu_dead);
================================================================================
3.2 INIT_WORK(&per_cpu_ptr(&memcg_stock, cpu)->work, drain_local_stock);
================================================================================
3.3 rtpn = kzalloc_node()
================================================================================
3.4 soft_limit_tree.rb_tree_per_node[node] = rtpn
================================================================================

4. mem_cgroup_css_alloc()
================================================================================
4.1 memcg = mem_cgroup_alloc()
================================================================================
4.1.1 memcg = kzalloc()
================================================================================
4.1.2 memcg->id.id = idr_alloc()
================================================================================
4.1.3 memcg->vmstats_local = alloc_percpu_gfp()
================================================================================
4.1.4 alloc_mem_cgroup_per_node_info(memcg, node)
================================================================================
4.1.4.1 pn = kzalloc_node()
================================================================================
4.1.4.2 pn->lruvec_stat_local = alloc_percpu_gfp(struct lruvec_stat, );
================================================================================
4.1.4.3 pn->lruvec_stat_cpu = alloc_percpu_gfp(struct lruvec_stat, );
================================================================================
4.1.4.4 lruvec_init(&pn->lruvec)
================================================================================
4.1.4.5 memcg->nodeinfo[node] = pn;
================================================================================
4.1.5 memcg_wb_domain_init(memcg, GFP_KERNEL)
================================================================================
4.1.6 INIT_WORK(&memcg->high_work, high_work_func);
================================================================================
4.1.7 vmpressure_init(&memcg->vmpressure);
================================================================================
4.1.7.1 INIT_WORK(&vmpr->work, vmpressure_work_fn);
================================================================================
4.2 page_counter_set_high(&memcg->memory, PAGE_COUNTER_MAX)
================================================================================
4.3 page_counter_set_high(&memcg->swap, PAGE_COUNTER_MAX)
================================================================================
4.4 page_counter_init(&memcg->memory, NULL);
================================================================================
4.5 page_counter_init(&memcg->swap, NULL);
================================================================================
4.6 page_counter_init(&memcg->memsw, NULL);
================================================================================
4.7 page_counter_init(&memcg->kmem, NULL);
================================================================================
4.8 page_counter_init(&memcg->tcpmem, NULL);
================================================================================
4.8.1 counter->max = PAGE_COUNTER_MAX;
================================================================================
4.8.2 counter->parent = parent;
================================================================================
4.9 memcg_online_kmem(memcg)
================================================================================
4.10 return &memcg->css
================================================================================

5. mem_cgroup_css_online()
================================================================================
5.1 memcg_alloc_shrinker_maps(memcg), except root_mem_cgroup
================================================================================
5.1.1 allocate memcg->nodeinfo[]->shrinker_map
================================================================================

6. mem_cgroup_bind()
================================================================================

7. Interfaces
================================================================================

7.1 current -> memory_current_read()
================================================================================
7.1.1 return (u64)page_counter_read(&memcg->memory) * PAGE_SIZE;
================================================================================

7.2 stat -> memory_stat_show
================================================================================
7.2.1 memcg_page_state(memcg, NR_ANON_MAPPED)
================================================================================
7.2.1.1 x = atomic_long_read(&memcg->vmstats[idx]);
================================================================================

8. Helpers
================================================================================

8.1 __mod_memcg_state(), adjust memcg->vmstats[] to root
================================================================================

memcg->vmstats
       ^
       |
memcg->vmstats_local
       ^
       |
memcg->vmstats_percpu

8.2 __mod_memcg_lruvec_state(), adjust pn->lruvec_stat[]
================================================================================
8.2.1 __mod_memcg_state(memcg, idx, val)
================================================================================
8.2.2 __this_cpu_add(pn->lruvec_stat_local->count[idx], val)
================================================================================

pn->lruvec_stat
       ^
       |
pn->lruvec_stat_cpu
       ^
       |
pn->lruvec_stat_local

8.3 __mod_lruvec_state(lruvec, idx, val),
================================================================================
8.3.1 __mod_node_page_state(lruvec_pgdat(lruvec), idx, val);
================================================================================
8.3.2 __mod_memcg_lruvec_state(lruvec, idx, val);
================================================================================

8.4 __mod_lruvec_slab_state(),
================================================================================

8.5 __count_memcg_events(), adjust memcg->vmevents[]
================================================================================

8.6 mem_cgroup_from_task()
================================================================================
8.6.1 return mem_cgroup_from_css(task_css(p, memory_cgrp_id));
================================================================================

8.7 get_mem_cgroup_from_mm()
================================================================================
8.7.1 memcg = mem_cgroup_from_task(rcu_dereference(mm->owner));
================================================================================
8.7.2 css_tryget(&memcg->css)
================================================================================

8.8 get_mem_cgroup_from_page()
================================================================================
8.8.1 return page->mem_cgroup
================================================================================

8.9 get_mem_cgroup_from_current()
================================================================================

8.10. mem_cgroup_iter(), iterate memcg hierarchy
================================================================================
8.10.1 css = css_next_descendant_pre()
================================================================================

8.11 mem_cgroup_scan_tasks(memcg, fn)
================================================================================
8.11.1 for_each_mem_cgroup_tree()
================================================================================
8.11.2 css_task_iter_start()
================================================================================
8.11.2.1 it->ss = css->ss, memory_cgrp_subsys
================================================================================
8.11.2.2 it->flags = flags, CSS_TASK_ITER_PROCS
================================================================================
8.11.2.3 css_task_iter_advance(it)
================================================================================
8.11.3 css_task_iter_next()
================================================================================
8.11.4 css_task_iter_end()
================================================================================

9. soft_limit_tree manipulation
================================================================================

9.1 __mem_cgroup_insert_exceeded
================================================================================

9.3 mem_cgroup_update_tree
================================================================================

11. mem_cgroup_charge(page, mm, gfp), charge a newly allocated page to cgroup
================================================================================
11.1 nr_pages = thp_nr_pages(page)
================================================================================
11.2 memcg = get_mem_cgroup_from_mm(mm)
================================================================================
11.3 try_charge(memcg, gfp, nr_pages)
================================================================================
11.4 css_get(&memcg->css)
================================================================================
11.5 commit_charge(page, memcg)
================================================================================
11.5.1 page->mem_cgroup = memcg
================================================================================
11.6 mem_cgroup_charge_statistics(memcg, page, nr_pages)
================================================================================
11.7 memcg_check_events(memcg, page)
================================================================================
11.8 css_put(&memcg->css)
================================================================================

12. try_charge(memcg, gfp, nr_pages)
================================================================================
12.1 return if mem_cgroup_is_root(memcg)
================================================================================
12.2 consume_stock(memcg, nr_pages)
================================================================================
12.3 do_memsw_account() page_counter_try_charge(&memcg->memsw, )
================================================================================
12.4 page_counter_try_charge(&memcg->memory, ), true: charged; false: hit limit
================================================================================
12.4.1 new = atomic_long_add_return(nr_pages, &c->usage)
================================================================================
12.4.2 propagate_protected_usage(c, new)
================================================================================
12.5 mem_over_limit = mem_cgroup_from_counter(counter, )
================================================================================
12.6 task_in_memcg_oom(current)
================================================================================
12.6.1 return p->memcg_in_oom
================================================================================
12.7 memcg_memory_event(mem_over_limit, MEMCG_MAX)
================================================================================
12.7.1 atomic_long_inc(&memcg->memory_events_local[event]);
================================================================================
12.7.2 cgroup_file_notify(&memcg->events_local_file);
================================================================================
12.8 psi_memstall_enter(&pflags)
================================================================================
12.9 nr_reclaimed = try_to_free_mem_cgroup_pages()
================================================================================
12.9.1 zonelist = node_zonelist(numa_node_id(), sc.gfp_mask)
================================================================================
12.9.2 do_try_to_free_pages(zonelist, &sc)
================================================================================
12.10 psi_memstall_leave(&pflags)
================================================================================
12.11 oom_status = mem_cgroup_oom(mem_over_limit, )
================================================================================
12.11.1 memcg_memory_event(memcg, MEMCG_OOM)
================================================================================
12.11.2 mem_cgroup_mark_under_oom(memcg)
================================================================================
12.11.2.1 memcg->under_oom++
================================================================================
12.11.3 locked = mem_cgroup_oom_trylock(memcg)
================================================================================
12.11.3.1 memcg->oom_lock = true
================================================================================
12.11.4 mem_cgroup_oom_notify(memcg);
================================================================================
12.11.4.1 mem_cgroup_oom_notify_cb(iter);
================================================================================
12.11.5 mem_cgroup_unmark_under_oom(memcg)
================================================================================
12.11.5.1 memcg->under_oom--
================================================================================
12.11.6 mem_cgroup_out_of_memory(memcg, mask, order)
================================================================================
12.11.6.1 out_of_memory(&oc), kill the "best" process when we run out of memory
================================================================================

13. memcg_write_event_control, write to cgroup.event_control
================================================================================
13.1 efd = simple_strtoul(buf, &endp, 10)
================================================================================
13.2 cfd = simple_strtoul(buf, &endp, 10)
================================================================================
13.3 event = kzalloc()
================================================================================
13.4 event->memcg = memcg
================================================================================
13.5 event->register_event/unregister_event = 
================================================================================
13.6 cfile_css = css_tryget_online_from_dir(cfile, &memory_cgrp_subsys)
================================================================================
13.6.1 kn = kernfs_node_from_dentry(dentry);
================================================================================
13.6.2 cgrp = rcu_dereference(*(void __rcu __force **)&kn->priv);
================================================================================
13.6.3 css = cgroup_css(cgrp, ss);
================================================================================
13.6.4 css_tryget_online(css)
================================================================================
13.7 event->register_event(memcg, event->eventfd, buf)
================================================================================
13.8 vfs_poll(efile.file, &event->pt)
================================================================================
13.9 list_add(&event->list, &memcg->event_list)
================================================================================

0. data struct
================================================================================

0.1 memcg_stock_pcp
================================================================================

    memcg_stock_pcp
    +--------------------------------+  
    |cached                          |
    |    (struct mem_cgroup *)       |
    |nr_pages                        |
    |    (unsigned int)              |
    |work                            |  = drain_local_stock
    |    (struct work_struct)        |
    |flags                           |
    |    (unsigned long)             |
    |                                |
    |cached_objcg                    |
    |    (struct obj_cgroup *)       |
    |nr_bytes                        |
    |    (unsigned int)              |
    +--------------------------------+  

0.2 mem_cgroup
================================================================================

    mem_cgroup
    +-------------------------------------+  
    |css                                  |
    |    (struct cgroup_subsys_state)     |
    |id                                   |
    |    (struct mem_cgroup_id)           |
    |    +--------------------------------+
    |    |id                              |
    |    |    (int)                       |
    |    |ref                             |
    |    |    (refcount_t)                |
    |    +--------------------------------+
    |                                     |
    |memory                               |
    |swap                                 |
    |memsw                                |
    |kmem                                 |
    |tcpmem                               |
    |    (struct page_counter)            |
    |    +--------------------------------+
    |    |parent                          |
    |    |    (struct page_counter*)      |
    |    |usage                           |
    |    |    (atomic_long_t)             |
    |    |min/low/high/max                |
    |    |    (unsigned long)             |
    |    |                                |
    |    |emin/elow                       |
    |    |    (unsigned long)             |
    |    |min_usage/low_usage             |
    |    |    (atomic_long_t)             |
    |    |children_min_usage/low_usage    |
    |    |    (atomic_long_t)             |
    |    +--------------------------------+
    |                                     |
    |high_work                            |  = high_work_func
    |soft_limit                           |  = PAGE_COUNTER_MAX
    |    (unsigned long)                  |
    |                                     |
    |under_oom                            |  mem_cgroup_eventfd_list   mem_cgroup_eventfd_list 
    |    (int)                            |  +-------------------+     +-------------------+
    |oom_notify                        ---|->|list               |---->|list               |
    |    (struct list_head)               |  |eventfd            |     |eventfd            |
    |                                     |  +-------------------+     +-------------------+
    |                                     |
    |vmpressure                           |
    |    (struct vmpressure)              |
    |    +--------------------------------+
    |    |scanned/tree_scanned            |
    |    |reclaimed/tree_reclaimed        |
    |    |   (unsigned long)              |
    |    |events_lock                     |  vmpressure_event       vmpressure_event
    |    |   (struct mutex)               |  +-------------------+  +-------------------+
    |    |events                       ---|->|node               |->|node               |
    |    |   (struct list_head)           |  |efd                |  |efd                |
    |    |                                |  |                   |  |                   |
    |    |                                |  +-------------------+  +-------------------+
    |    |                                |
    |    |work                            |  = vmpressure_work_fn
    |    |   (struct work_struct)         |
    |    +--------------------------------+
    |                                     |
    |thresholds/memsw_thresholds          |
    |    (struct mem_cgroup_thresholds)   |
    |    +--------------------------------+
    |    |primary/spare                   |
    |    |struct mem_cgroup_threshold_ary*|
    |    |   +----------------------------+  +-------------+-------------+-------------+
    |    |   |entries[]                   |  |eventfd      |eventfd      |eventfd      |
    |    |   | struct mem_cgroup_threshold|  |threshold    |threshold    |threshold    |
    |    |   |                            |  +-------------+-------------+-------------+
    |    |   |                            |                 ^             ^
    |    |   |                            |                 |             |
    |    |   |current_threshold        ---|-----------------+             |
    |    |   |size                     ---|-------------------------------+
    |    |   |  (int)                     |
    |    +---+----------------------------+
    |                                     |
    |                                     |  mem_cgroup_event    mem_cgroup_event
    |event_list                           |  +----------------+  +----------------+
    |    (struct list_head)             --|->|list            |->|list            |
    |event_list_lock                      |  |memcg           |  |memcg           |
    |    (spinlock_t)                     |  +----------------+  +----------------+
    |                                     |
    |memory_events/memory_events_local[]  |  = MEMCG_NR_MEMORY_EVENTS
    |    (atomic_long_t)                  |
    |    +--------------------------------+
    |    |LOW|HIGH|MAX                    |
    |    |OOM|OOM_KILL                    |
    |    |SWAP_HIGH|MAX|FAIL              |
    |    +--------------------------------+
    |                                     |
    |vmstats_local/vmstats_percpu         |
    |    (struct memcg_vmstats_percpu *)  |
    |    +--------------------------------+
    |    |stat[MEMCG_NR_STAT]             |
    |    |    (long)                      |
    |    |                                |
    |    +--------------------------------+
    |vmstats[MEMCG_NR_STAT]               |
    |    (atomic_long_t)                  |
    |    +--------------------------------+
    |    |MEMCG_SWAP                      |  = NR_VM_NODE_STAT_ITEMS
    |    |MEMCG_SOCK                      |
    |    |MEMCG_PERCPU_B                  |
    |    |                                |
    |    +--------------------------------+
    |vmevents[NR_VM_EVENT_ITEMS]          |
    |    (atomic_long_t)                  |
    |    +--------------------------------+
    |    |PGPGIN | PGPGOUT                |
    |    |                                |
    |    +--------------------------------+
    |                                     |
    |nodeinfo[]                           |
    |    (struct mem_cgroup_per_node*)    |
    |    +--------------------------------+
    |    |memcg                           |  = to this mem_cgroup
    |    |   (struct mem_cgroup*)         |
    |    |lru_zone_size[MAX_NR_ZONES][]   |
    |    |   (unsigned long)              |
    |    |lruvec                          |
    |    |   (struct lruvec)              |
    |    |   +----------------------------+
    |    |   |lists[NR_LRU_LISTS]         |
    |    |   |   (struct list_head)       |
    |    |   |                            |
    |    |   |pgdat                       |
    |    |   |   (struct pglist_data*)    |
    |    |   +----------------------------+
    |    |lruvec_stat[NR_VM_NODE_STAT_...]|
    |    |   (atomic_long_t)              |
    |    |lruvec_stat_local               |
    |    |lruvec_stat_cpu                 |
    |    |   (struct lruvec_stat*)        |
    |    |   +----------------------------+
    |    |   |count[NR_VM_NODE_STAT_ITEMS]|
    |    |   |   (long)                   |
    |    |   +----------------------------+
    |    |                                |
    |    |shrinker_map                    |
    |    |   (struct memcg_shrinker_map*) |
    |    |   +----------------------------+
    |    |   |rcu                         |
    |    |   |    (struct rcu_head)       |
    |    |   |map[memcg_shrinker_map_size]|
    |    |   |    (unsigned long)         |
    |    |   |                            |
    |    |   +----------------------------+
    |    |                                |
    |    |iter                            |
    |    |(struct mem_cgroup_reclaim_iter)|
    |    |   +----------------------------+
    |    |   |position                    |
    |    |   |    (struct mem_cgroup*)    |
    |    |   |generation                  |
    |    |   |    (unsigned int)          |
    |    |   +----------------------------+
    |    |                                |
    |    |tree_node                       |
    |    |   (struct rb_node)             |
    |    |on_tree                         |
    |    |   (bool)                       |
    |    |usage_in_excess                 |
    |    |   (unsigned long)              |
    +----+--------------------------------+  

0.2.1 root_mem_cgroup
================================================================================

there is a root mem_cgroup

0.2.2 mem_cgroup/page_counter hierarchy
================================================================================

linked by page_counter_init()

                     mem_cgroup
                     +--------------------------------------+
  cgroup.subsys[] =  |css                                   |
                     |    (struct cgroup_subsys_state)      |
                     |    +---------------------------------+
                     |    |cgroup                           |
                     |    |    (struct cgroup*)             |
                     |    |ss                               |
                     |    |    (struct cgroup_subsys*)      |  = memory_cgrp_subsys
                     |    |                                 |
                     |    |parent                           |
                     |    |    (struct cgroup_subsys_state*)|
                     |    |                                 |
                     |    |children                ||       |
                     |    |    (struct list_head)  ||       |
                     |    +---------------------------------+ <--------------------------------------+
                     |                             ||       |                                        |
                     |memory                <---+  ||       |                                        |
       	             |    (struct page_counter) |  ||       |                                        |
       	             |                          |  ||       |                                        |
                     +--------------------------------------+                                        |
                                                |  ||                                                |
                                                |  ||                                                |
    mem_cgroup                                  |  ||      mem_cgroup                                |
    +--------------------------------------+    |  ||      +--------------------------------------+  |
    |memory                                |    |  ||      |memory                                |  |
    |    (struct page_counter)             |    |  ||      |    (struct page_counter)             |  |
    |    +---------------------------------+    |  ||      |    +---------------------------------+  |
    |    |parent                           |----+--||------|----|parent                           |  |
    |    +---------------------------------+       ||      |    +---------------------------------+  |
    |                                      |       ||      |                                      |  |
    |css                                   |       ||      |css                                   |  |
    |    (struct cgroup_subsys_state)      |       ||      |    (struct cgroup_subsys_state)      |  |
    |    +---------------------------------+       ||      |    +---------------------------------+  |
    |    |cgroup                           |       ||      |    |cgroup                           |  |
    |    |    (struct cgroup*)             |       ||      |    |    (struct cgroup*)             |  |
    |    |                                 |       ||      |    |                                 |  |
    |    |parent                        ---|-------||------|--->|parent                        ---|--+
    |    |    (struct cgroup_subsys_state*)|       ||      |    |    (struct cgroup_subsys_state*)|
    |    |                                 |       ||      |    |                                 |
    |    |sibling                      ====|=======++======|====|sibling                          |
    |    |    (struct list_head)           |               |    |    (struct list_head)           |
    +----+---------------------------------+               +----+---------------------------------+



0.3 mem_cgroup_event
================================================================================

    mem_cgroup_event
    +-------------------------------------+  
    |memcg                                |
    |    (struct mem_cgroup*)             |
    |eventfd                              |
    |    (struct eventfd_ctx*)            |
    |list                                 |
    |    (struct list_head)               |
    |register_event/unregister_event      |
    |                                     |
    |pt                                   |  = memcg_event_ptable_queue_proc
    |    (poll_table)                     |
    |wqh                                  |
    |    (wait_queue_head_t)              |
    |wait                                 |  = memcg_event_wake
    |    (wait_queue_entry_t)             |
    |remove                               |  = memcg_event_remove
    |    (struct work_struct)             |
    +-------------------------------------+  

0.4 mem_cgroup_tree_per_node
================================================================================

    mem_cgroup_tree_per_node
    +-------------------------------------+  
    |rb_root                              |
    |    (struct rb_root)                 |
    |rb_rightmost                         |
    |    (struct rb_node *)               |
    |lock                                 |
    |                                     |
    +-------------------------------------+  

0.4.1 soft_limit_tree, mem_cgroup_tree
================================================================================

soft_limit_tree, allocate and init in mem_cgroup_init()

            soft_limit_tree(struct mem_cgroup_tree)
            +-------------------------------------+  
            |rb_tree_per_node[MAX_NUMNODES]       |
            |    (struct mem_cgroup_tree_per_node)|
            | +---++---++---++---++---++---++---+ |
            | |   ||   ||   ||RB ||   ||   ||   | |
            +-+---++---++---++---++---++---++---+-+  

	                      / \

			  /         \

        mem_cgroup_per_node          mem_cgroup_per_node
        +-------------------+        +-------------------+
        |tree_node  <-+     |        |  +->  tree_node   |
        |                   |        |                   |
        |usage_in_excess    |        |usage_in_excess    |
        +-------------------+        +-------------------+



