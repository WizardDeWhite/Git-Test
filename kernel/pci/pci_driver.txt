1. pci_driver
================================================================================
struct pci_driver {
	struct list_head node;
	const char *name;
	const struct pci_device_id *id_table;	/* must be non-NULL for probe to be called */
	int  (*probe)  (struct pci_dev *dev, const struct pci_device_id *id);	/* New device inserted */
	void (*remove) (struct pci_dev *dev);	/* Device removed (NULL if not a hot-plug capable driver) */
	int  (*suspend) (struct pci_dev *dev, pm_message_t state);	/* Device suspended */
	int  (*suspend_late) (struct pci_dev *dev, pm_message_t state);
	int  (*resume_early) (struct pci_dev *dev);
	int  (*resume) (struct pci_dev *dev);	                /* Device woken up */
	void (*shutdown) (struct pci_dev *dev);
	int (*sriov_configure) (struct pci_dev *dev, int num_vfs); /* PF pdev */
	const struct pci_error_handlers *err_handler;
	struct device_driver	driver;
	struct pci_dynids dynids;
};

2. probe, invoked by insmod
================================================================================
init_module()
  load_module()
    do_init_module()
      mod->init()
        pci_register_driver()
          driver_register()
            bus->probe() --> pci_device_probe
	      drv->probe()

3. remove, invoked by rmmod
================================================================================
delete_module()
  mod->exit()
    pci_unregister_driver()
      driver_unregister()
        bus_remove_driver()
          driver_detach()
            __device_release_driver()
              bus->remove() --> pci_device_remove()
                drv->remove()

4. shutdown, invoked by reboot/halt/kexec
================================================================================
kernel_restart_prepare() or kernel_shutdown_prepare()
  device_shutdown()
    bus->shutdown() --> pci_device_shutdown()
      drv->shutdown()
