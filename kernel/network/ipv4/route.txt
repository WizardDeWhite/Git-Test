0. IP packet out and get route
================================================================================

ip_route_output_key_hash(net, fl4, skb)
    fib_result res
    ip_route_output_key_hash_rcu(net, fl4, &res, skb)
        fib_lookup(net, fl4, res, 0)
        fib_select_path(net, res, fl4, skb)
        rt = __mkroute_output(res, fl4, orig_oif, dev_out, flags)
            rt = rt_dst_alloc(dev_out, )
                rt = dst_alloc()
                rt->dst.output = ip_output
            rt_set_nexthop(rt, fl4->daddr, res)
        return rt
skb_dst_set(skb, &rt->dst)
dst_output(net, sk, sbk)
    skb_dst(skb)->output(net, sk, skb)

1. ip_route_output_flow(net, flp4, sk)
================================================================================
1.1 rt = __ip_route_output_key(net, flp4) -> ip_route_output_key_hash(net, flp, NULL)
================================================================================
1.2 flp4->flowi4_oif = rt->dst.dev->ifindex
================================================================================
1.3 rt = xfrm_lookup_route(net, &rt->dst, flowi4_to_flowi(flp4), sk, 0)
================================================================================
1.4 return rt 
================================================================================

2. ip_route_output_key_hash(net, fl4, skb), major route resolver routine
================================================================================
2.1 fl4->flowi4_iif = LOOPBACK_IFINDEX;
================================================================================
2.2 fl4->flowi4_tos = tos & IPTOS_RT_MASK;
================================================================================
2.3 fl4->flowi4_scope = ((tos & RTO_ONLINK) ?  RT_SCOPE_LINK : RT_SCOPE_UNIVERSE);
================================================================================
2.4 ip_route_output_key_hash_rcu(net, fl4, &res, skb)
================================================================================
2.4.1 dev_out = __ip_dev_find(net, fl4->saddr, false) 
================================================================================
2.4.2 fl4->flowi4_oif = dev_out->ifindex
================================================================================
2.4.3 dev_out = dev_get_by_index_rcu(net, fl4->flowi4_oif)
================================================================================
2.4.4 fib_lookup(net, fl4, res, 0)
================================================================================
2.4.4.1 tb = fib_get_table(net, RT_TABLE_MAIN)
================================================================================
2.4.4.2 fib_table_lookup(tb, flp, res, )
================================================================================
2.4.5 fib_select_path(net, res, fl4, skb)
================================================================================
2.4.6 rth = __mkroute_output(res, fl4, orig_oif, dev_out, flags)
================================================================================

3. IP packet receive and get route
================================================================================

deliver_skb()
    pt_prev->func() -> ip_rcv()
        ip_rcv_core()
        ip_rcv_finish()
            ip_rcv_finish_core()
                ip_route_input_noref()
                    fib_result res;
                    ip_route_input_rcu(skb, daddr, saddr, tos, dev, &res); -> ip_route_input_slow
                        fib_lookup(net, fl4, res, 0)
                    :forward
                        ip_mkroute_input(skb, res, in_dev, daddr, saddr, tos, flkeys)
                            rt = rt_dst_alloc()
                            rt->dst.input = ip_forward
                            rt_set_nexthop(rth, daddr, res, )
                            skb_dst_set(skb, &rt->dst)
                    :local
                        rt = rt_dst_alloc()
                            rt->dst.input = ip_local_deliver
                        skb_dst_set(skb, &rt->dst)
            dst_input()
                skb_dst(skb)->input(skb);

4. ip_rcv_finish_core(net, sk, skb, dev, hint)
================================================================================
4.1 ip_route_use_hint(skb, ,dev, hint)
================================================================================
4.2 ip_route_input_noref(skb, daddr, saddr, tos, dev)
================================================================================
4.2.1 struct fib_result res;
================================================================================
4.2.2 err = ip_route_input_rcu(skb, daddr, saddr, tos, dev, &res);
================================================================================
4.2.2.1 handle multicast packet
================================================================================
4.2.2.2 ip_route_input_slow(skb, daddr, saddr, tos, dev, res)
================================================================================
4.3 rt = skb_rtable(skb)
================================================================================
4.4 return NET_RX_SUCCESS
================================================================================

5. ip_route_input_slow(skb, daddr, saddr, tos, dev, res)
================================================================================
5.1 skb_dst_drop(skb);
================================================================================
5.2 fib4_rules_early_flow_dissect(net, skb, &fl4, &_flkeys)
================================================================================
5.3 fib_lookup(net, &fl4, res, 0)
================================================================================
5.3.1 tb = net->ipv4.fib_main
================================================================================
5.3.2 fib_table_lookup(tb, fl4, res, flags), main table?
================================================================================
5.3.3 tb = net->ipv4.fib_default
================================================================================
5.3.4 fib_table_lookup(tb, fl4, res, flags), default table?
================================================================================
5.4 ip_mkroute_input(skb, res, in_dev, daddr, saddr, tos, flkeys)
================================================================================

6. fib_table_lookup(tb, flp, res, fib_flags)
================================================================================
6.1 t = tb->tb_data
================================================================================
6.2 key = ntohl(flp->daddr)
================================================================================
6.3 key_vector *pn = t->kv
================================================================================
6.4 cindex = 0
================================================================================
6.5 n = get_child_rcu(pn, cindex)
================================================================================
6.6 index = get_cindex(key, n)
================================================================================

0. Data Struct
================================================================================

0.1 flowi4
================================================================================

   flowi4
   +---------------------------------------+
   |__fl_common                            |
   |    (struct flowi_common)              |
   |    +----------------------------------+
   |    |flowic_oif                        |  = output interface idx
   |    |flowic_iif                        |  = LOOPBACK_IFINDEX
   |    |   (int)                          |
   |    |flowic_mark                       |
   |    |   (__u32)                        |
   |    |flowic_tos                        |
   |    |flowic_scope                      |  = RT_SCOPE_UNIVERSE
   |    |flowic_proto                      |
   |    |flowic_flags                      |
   |    |   (__u8)                         |
   |    |flowic_secid                      |
   |    |   (__u32)                        |
   |    |flowic_uid                        |
   |    |   (kuid_t)                       |
   |    |flowic_tun_key                    |
   |    |                                  |
   |    |flowic_multipath_hash             |
   |    |   (__u32)                        |
   |    +----------------------------------+
   |saddr                                  |  = source ip
   |daddr                                  |  = destination ip
   |    (__be32)                           |
   |uli                                    |
   |    (union flowi_uli)                  |
   |    .ports   +-------------------------+
   |             |dport/sport              |
   |             |   (__be16)              |
   |    .icmpt   +=========================+
   |             |type/code                |
   |             |   (__u8)                |
   |    .dnports +=========================+
   |             |dport/sport              |
   |             |   (__le16)              |
   |             +=========================+
   |             |spi                      |
   |             |   (__be32)              |
   |             +=========================+
   |             |gre_key                  |
   |             |   (__be32)              |
   |    .mht     +=========================+
   |             |type                     |
   |             |   (__u8)                |
   |             |                         |
   +-------------+-------------------------+

0.1 fib_result
================================================================================

   fib_result
   +---------------------------------------+
   |prefix                                 |
   |    (__be32)                           |
   |prefixlen                              |
   |nh_sel                                 |
   |type                                   |  = RTN_UNSPEC
   |scope                                  |
   |    (unsigned char)                    |
   |tclassid                               |
   |    (u32)                              |
   |nhc                                    |
   |    (struct fib_nh_common*)            |
   |fi                                     |
   |    (struct fib_info*)                 |
   |table                                  |
   |    (struct fib_table*)                |
   |fa_head                                |
   |    (struct hlist_head*)               |
   |                                       |
   +---------------------------------------+

0.1.1 fib_info
================================================================================

   fib_info
   +---------------------------------------+<--------+
   |fib_hash                               |         |
   |fib_lhash                              |         |
   |    (struct hlist_node)                |         |
   |fib_net                                |         |
   |    (struct net*)                      |         |
   |fib_treeref                            |         |
   |    (int)                              |         |
   |fib_dead | fib_protocol | fib_scope    |         |
   |    (unsigned char)                    |         |
   |fib_tb_id                              |         |
   |fib_priority                           |         |
   |    (u32)                              |         |
   |fib_nhs                                |         |
   |    (int)                              |         |
   |                                       |         |
   |fib_nh[0]                              |         |
   |    (struct fib_nh)                    |         |
   |    +----------------------------------+         |
   |    |nh_parent                      ---|---------+
   |    |    (struct fib_info*)            |
   |    |nh_dev                            |
   |    |    (struct net_device*)          |
   |    |nh_oif                            |
   |    |    (int)                         |
   |    |nh_gw | nh_saddr                  |
   |    |    (__be32)                      |
   |    |                                  |
   |    |                                  |
   +----+----------------------------------+

0.2 rtable, assigned to skb->_skb_refdst
================================================================================
; could be retrieved by skb_rtable(skb)

   rtable
   +---------------------------------------+
   |dst                                    |
   |    (struct dst_entr)                  |
   |    +----------------------------------+
   |    |dev                               |  = 
   |    |    (struct net_device*)          |
   |    |ops                               |  = ipv4_dst_ops
   |    |    (struct dst_ops*)             |
   |    |_metrics                          |
   |    |expires                           |
   |    |    (unsigned long)               |
   |    |input                             |  = dst_discard
   |    |output                            |  = dst_discard_out | ip_output
   |    |    (int (*)())                   |
   |    |flags                             |
   |    |    (unsigned short)              |
   |    |header_len                        |
   |    |trailer_len                       |
   |    |    (unsigned short)              |
   |    |                                  |
   |    +----------------------------------+
   |                                       |
   |rt_genid                               |
   |    (int)                              |
   |rt_flags                               |
   |    (unsigned int)                     |
   |rt_type                                |  = UNICAST|LOCAL|BROADCAST|NAT
   |    (__u16)                            |
   |rt_is_input                            |
   |rt_uses_gateway                        |
   |    (__u8)                             |
   |rt_iif                                 |
   |    (int)                              |
   |rt_gw_family                           |
   |    (u8)                               |
   +-------------------++------------------+
   |rt_gw4             ||rt_gw6            |
   |   (__be32)        || (struct in6_addr)|
   +-------------------++------------------+
   |                                       |
   |rt_uncached                            |
   |    (struct list_head)                 |
   |rt_uncached_list                       |
   |    (struct uncached_list*)            |
   |                                       |
   +---------------------------------------+


0.4 fib_table, a member of netns_ipv4
================================================================================

   struct net
   +------------------------------+
   |ipv4                          |
   |    (struct netns_ipv4)       |
   |    +-------------------------+
   |    |fib_main                 |
   |    |fib_default              |        struct fib_table
   |    |    (struct fib_table*)  |------->+---------------------------------------+
   |    |                         |        |tb_num_default                         |
   +----+-------------------------+        |     (int)                             |
                                           |tb_id                                  |
                                           |     (u32)                             |
                                           |tb_hlist                               |
                                           |     (struct hlist_node)               |
                                           |tb_data                                |  -> trie
                                           |     (unsigned long*)                  |
                                           |__data[]                               |
                                           |     (unsigned long)                   |
                                           |                                       |
                                           +---------------------------------------+

0.4.1 trie
================================================================================

   trie
   +---------------------------------------+
   |kv[1]                                  |
   |     (struct key_vector)               |
   |     +---------------------------------+
   |     |key                              |
   |     |    (t_key|unsigned int)         |
   |     |pos                              |
   |     |bits                             |
   |     |slen                             |
   |     |    (unsigned char)              |
   |     |=================================|
   |     |leaf                             |  LEAF
   |     |   (struct hlist_head)           |
   |     |tnode[0]                         |  TNODE
   |     |   (struct key_vectora*)         |
   +-----+---------------------------------+
